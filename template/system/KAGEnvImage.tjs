/**
 * 環境画像の基底クラス
 */
class KAGEnvImage {

    function dm(msg) {
		if (kag.debugLevel >= tkdlSimple) {
			global.dm(msg);
        }
	}

	// デフォルト情報
	var init;
	var name;
	
    // スキップ状態か
    function isSkip() {
        return env.kag.skipMode != SKIP_FORCE && (env.kag.skipMode || env.kag.noeffect);
    }

    // 各種情報を保持する環境
    var env;

	/// 表示状態変更
    // BOTH      バストアップ＋フェイス (標準）
    // BU        バストアップ
    // FACE      フェイス
	// SHOW      表示状態（自動選択）
	// CLEAR     消去状態 (標準)
    // INVISIBLE 非表示
	var _disp;
	property disp {
		getter() {
			return _disp;
		}
		setter(v) {
			if (v !== _disp) {
				if (v == SHOW) {
					if (isClear()) {
						if (init !== void && init.noPose !== void) {
							_disp = init.noPose ? FACE : BOTH;
						} else {
							_disp = BOTH;
						}
					}
				} else {
					_disp = v;
				}
				show = isShowBU() ? 1 : 0;
				redraw = true;
				reposition = true;
			}
		}
	}

	// バストアップ表示中
    function isShowBU() {
        return _disp <= BU;
    }

	// フェイス表示中
    function isShowFace() {
        return (_disp == BOTH && env.bothFace)|| _disp == FACE;
    }

	// 表示されているか
	function isShow() {
        return _disp <= FACE;
	}

	// 消去状態か
	function isClear() {
		return _disp == CLEAR;
	}

	// 更新フラグ
	var updateFlag;
    // 再描画指示フラグ
    var redraw;
    // 初期化処理
    var resetFlag;

    /**
     * 時間用最初期化処理
     */
    function setRedraw() {
		if (isShowBU()) {
			redraw = true;
		}
    }
	
	// -----------------------------------------------------------------------
	// レイヤ制御
	// -----------------------------------------------------------------------

	// レイヤが有効になっている
	var layerOn;
	
	// 表示状態
	// -1:アクション完了後消去 0:消去 1:表示
	var _show;
	var doShow;
	property show {
		getter() {
			return _show;
		}
		setter(v) {
			_show = v;
			doShow = v !== void;
			if (isShowBU()) {
				layerOn = true;
			}
			updateFlag = true;
		}
	}
	
    // 種別
    var _type;
    var doType;
    property type {
        getter() {
            return _type;
        }
        setter(v) {
            _type = v;
            doType = (v !== void);
			updateFlag = true;
        }
    }

    // 透明度
    var opacityFrom;
    var opacityTime;
    var opacityAccel;
    var _opacity;
    var doOpacity;
    property opacity {
        getter() {
            return _opacity;
        }
        setter(v) {
            _opacity = v;
            doOpacity = (v !== void);
			updateFlag = true;
        }
    }

    // 回転
    var rotateFrom;
    var rotateTime;
    var rotateAccel;
    var _rotate;
    var doRotate;
    property rotate {
        getter() {
            return _rotate;
        }
        setter(v) {
            _rotate = v;
            doRotate = (v !== void);
			updateFlag = true;
        }
    }

    // ズーム処理
    var zoomFrom;
    var zoomTime;
    var zoomAccel;
    var _zoom;
    var doZoom;
    property zoom {
        getter() {
            return _zoom;
        }
        setter(v) {
            _zoom = v;
            doZoom = (v !== void);
			updateFlag = true;
        }
    }

    // 回転原点指定
    var _afx;
    var _afy;
    var doAffine;
    property afx {
        getter() {
            return _afx;
        }
        setter(v) {
            _afx = v;
            doAffine = (v !== void);
			updateFlag = true;
        }
    }
    property afy {
        getter() {
            return _afy;
        }
        setter(v) {
            _afy = v;
            doAffine = (v !== void);
			updateFlag = true;
        }
    }

    // 表示位置座標
    var xpos;
    var ypos;
    var xposFrom;
    var yposFrom;
    var moveTime;
    var moveAccel;

    // 位置変更
    var reposition;
    
    // アクション処理
	var doStopAction;
	var actionList;
	var currentActionList;

    // 画像補整指定
    var _grayscale;
    property grayscale {
        getter() {
            if (env.colorall) {
                return env.grayscale;
            } else {
                return _grayscale;
            }
        }
        setter(v) {
            _grayscale = v;
            if (!env.colorall) {
                redraw = true;
            }
        }
    }

    var _rgamma;
    property rgamma {
        getter() {
            if (env.colorall) {
                return env.rgamma;
            } else {
                return _rgamma;
            }
        }
        setter(v) {
            _rgamma = v;
            if (!env.colorall) {
                redraw = true;
            }
        }
    }

    var _ggamma;
    property ggamma {
        getter() {
            if (env.colorall) {
                return env.ggamma;
            } else {
                return _ggamma;
            }
        }
        setter(v) {
            _ggamma = v;
            if (!env.colorall) {
                redraw = true;
            }
        }
    }
    
    var _bgamma;
    property bgamma {
        getter() {
            if (env.colorall) {
                return env.bgamma;
            } else {
                return _bgamma;
            }
        }
        setter(v) {
            _bgamma = v;
            if (!env.colorall) {
                redraw = true;
            }
        }
    }

	// 色状態の初期化
    function resetColor(param, elm) {
        _grayscale = void;
        _rgamma = void;
        _ggamma = void;
        _bgamma = void;
        if (!env.colorall) {
            redraw = true;
        }
    }
    
    // フェード指定のデフォルト値
    property fadeValue {
        getter() {
            return env.fadeValue;
        }
    }
    
    /**
     * コンストラクタ
     * @param env 環境
     */
    function KAGEnvImage(env) {
        this.env = env;
		actionList = new Array();
		currentActionList = new Array();
        _disp = CLEAR;
    }

    function initImage() {
        type = void;
        opacityFrom = void;
        opacityTime = void;
        opacityAccel = void;
        opacity = void;
        rotateFrom = void;
        rotateTime = void;
        rotateAccel = void;
        rotate = void;
        zoomFrom = void;
        zoomTime = void;
        zoomAccel = void;
        zoom = void;
        afx = void;
        afy = void;
        xpos     = void;
        ypos     = void;
        xposFrom = void;
        yposFrom = void;
        moveTime = void;
        moveAccel = void;
        reposition = false;

        rgamma = void;
        ggamma = void;
        bgamma = void;
        grayscale = void;
        
        resetFlag = false;
        actionList.clear();
		currentActionList.clear();
        _disp = CLEAR;
    }

    function initLayer(layer) {
		layer.reset();
		if (!doType) {
			_type    = void;
        }
		if (!doOpacity) {
			_opacity = void;
		}
        if (!doRotate) {
			_rotate = void;
		}
        if (!doZoom) {
			_zoom = void;
		}
		if (!doAffine) {
            _afx = void;
			_afy = void;
		}
		clearAction(true);
    }
    
    function finalize() {
        clearAction(true);
        invalidate actionList;
        invalidate currentActionList;
    }

    function setXPos(cmd, elm) {
        if (xpos !== void && moveTime === void) {
            moveTime  = elm.time;
            moveAccel = elm.accel;
        }
        xposFrom = calcRelative(xpos, getFrom(cmd), env.xmax);
        xpos     = calcRelative(xpos, getTo(cmd), env.xmax);
        //dm("X位置指定:", xpos, xposFrom, moveTime);
        reposition = true;
    } 

    function setYPos(cmd, elm) {
        if (ypos !== void && moveTime === void) {
            moveTime  = elm.time;
            moveAccel = elm.accel;
        }
        yposFrom = calcRelative(ypos, getFrom(cmd), env.ymax);
        ypos     = calcRelative(ypos, getTo(cmd), env.ymax);
        //dm("Y位置指定:", ypos, yposFrom, moveTime);
        reposition = true;
    }

    /**
     * アクション情報の追加
     */
	function addAction(action) {
		// 規定のモジュールは排除する
		//dm("アクション情報登録");
		if (action instanceof "Dictionary") {
			if (action.module == "LayerFadeToModeModule") {
				opacity     = action.opacity;
				opacityTime = action.time;
				opacityAccel = action.accel;
			} else if (action.module == "LayerToRotateModule") {
				rotate = action.angle;
				rotateTime = action.time;
				rotateAccel = action.accel;
			} else if (action.module == "LayerNormalZoomModule") {
				zoom = action.zoom;
				zoomTime = action.time;
				zoomAccel = action.accel;
			} else if (action.module == "LayerAccelMoveModule") {
				xpos = action.x;
				ypos = action.y;
				moveTime = action.time;
				moveAccel = 1;
				reposition = true;
			} else if (action.module == "LayerNormalMoveModule") {
				xpos = action.x;
				ypos = action.y;
				moveTime = action.time;
				moveAccel = 0;
				reposition = true;
			} else if (action.module == "LayerDecelMoveModule") {
				xpos = action.x;
				ypos = action.y;
				moveTime = action.time;
				moveAccel = -1;
				reposition = true;
			} else {
				actionList.add(action);
				updateFlag = true;
			}
		} else if (action instanceof "Array") {
			actionList.add(action);
			updateFlag = true;
		}
	}

    /**
	 * アクション情報の消去
	 * @param all 全アクション指定
     */
	function clearAction(all) {
		//dm("アクション解除指示:" + name + ":" + all);
		for (var i=currentActionList.count-1;i>=0;i--) {
			var info = currentActionList[i];
			if (all || !info.nowait) {
				currentActionList.erase(i);
			}
		}
    }

	/**
	 * アクション情報のコピー
	 * @param act  元アクション情報
	 * @param time 時間上書き指定
	 * @param elm  タグによる上書き用パラメータ情報
	 * @return システム登録用アクション情報
	 */
	function copyActionInfo(act, time, elm) {
		var action = %[];
		if (act !== void) {
			var names = [];
			names.assign(act);
			if (act.module !== void || act.moduleName !== void) {
				// 旧スタイル
				for (var i=0; i<names.count; i+= 2) {
					var name = names[i];
					var elm  = names[i+1];
					action[name] = elm;
				}
				if (time !== void) {
					action.time = time;
				}
				// パラメータのコピー
				if (elm !== void) {
					foreach(elm, function(name, value, elm, action) {
						if (actionParam[name] !== void) {
							action[name] = value;
						}
					}, action);
				}
			} else {
				// 新スタイル
				for (var i=0; i<names.count; i+= 2) {
					var name = names[i];
					var elm  = names[i+1];
					if (elm instanceof "Dictionary") {
						// 辞書の場合はクローンして時間指定
						var e = %[];
						(Dictionary.assign incontextof e)(elm);
						if (time !== void) {
							e.time = time;
						}
						// パラメータのコピー
						if (elm !== void) {
							e.time   = +elm.time if elm.time !== void;
							e.delay  = +elm.delay if elm.delay !== void;
							e.nowait = +elm.nowait if elm.nowait !== void;
						}
						action[name] = e;
					} else {
						// そうでない場合はそのまま
						action[name] = elm;
					}
				}
			}
		}
		return action;
	}
	
    /**
     * アクションを設定
     * @param name アクション名
     * @param elm パラメータ
     */
	function setAction(name, elm) {
		if (env.actions !== void) {
			var info;
			if ((info = env.actions[name]) !== void) {
				if (info instanceof "Dictionary") {
					var action = copyActionInfo(info, info.time, elm);
					if (action.module !== void && action.module == "") {
						//dm("アクション停止処理:" + name);
						stopAction(true);
					} else {
						addAction(action);
					}
					return true;
				} else if (info instanceof "Array") {
					//dm("配列アクション:" + name);
					var arrayAction = [];
					for (var i=0;i<info.count;i++) {
						var i = info[i];
						if (typeof i == "String") {
							// 文字列の場合再帰的に参照
							i = env.actions[i];
						}
						if (i !== void && i instanceof "Dictionary") {
							var action = copyActionInfo(i, i.time, elm);
							arrayAction.add(action);
						}
					}
					addAction(arrayAction);
					return true;
                }
                return false;
            }
			// 個別記述
            if (elm !== void && name.substring(0,5) == "Layer") {
				var moduleType;
				try {
                    moduleType = global[name];
					if (typeof moduleType == "Object") {
						// アクションモジュール名の場合
						var action = %[];
						foreach(elm, function(name, value, elm, action) {
							if (actionParam[name] !== void) {
								action[name] = value;
                            }
						}, action);
						action.module = name;
						action.time   = +elm.time   if elm.time !== void;
						action.delay  = +elm.delay  if elm.time !== void;
						action.nowait = +elm.nowait if elm.nowait !== void;
						addAction(action);
                        return true;
                    }
                } catch() {
                    // 無視
                }
            }
        }
        return false;
    }

    /**
     * アクションを解除
     */
	function stopAction() {
		clearAction(true);
		doStopAction = true;
		updateFlag = true;
    }

	// --------------------------------------------------------------------
	// トランジション処理
	// --------------------------------------------------------------------
	
    // 画面更新設定
    var trans;
	
    /**
     * トランジション情報の取得
     */
    function getTrans(name, elm) {
		// 名前指定で上書き
		var tr = %[];
		if (name == "void" || name == "none") {
			return tr;
		}
		var info;
		if (env.transitions !== void && (info = env.transitions[name]) !== void) {
			//dm("登録ずみのトランジション:" + name);
			// コピー
			(Dictionary.assign incontextof tr)(info, false); 
			// パラメータのコピー
			foreach(elm, function(name, value, elm, tr) {
				if (transitionParam[name] !== void) {
					//dm("パラメータコピー:" + name + ":" + value);
					tr[name] = value;
				}
			}, tr);
			return tr;
		} else if (elm != null && (transitionName[name] !== void)) {
			//dm("規定のシステムトランジション:" + name);
			var tr = %[];
			// 規定のトランジション
			// パラメータのコピー
			foreach(elm, function(name, value, elm, tr) {
				if (transitionParam[name] !== void) {
					tr[name] = value;
				}
			}, tr);
			tr.method = name;
			return tr;
		}
    }

    /**
	 * トランジションを設定
	 * @param name トランジション名
	 * @param elm パラメータ
	 * @return トランジションが設定された
	 */
	function setTrans(name, elm) {
		//dm("トランジション設定:" + name);
		var tr = getTrans(name, elm);
		if (tr !== void) {
			trans = tr;
			return true;
		}
		return false;
    }

	// 自動トランジション
	var autoTrans;

	// 自動トランジションを登録
	function setAutoTrans(list) {
		for (var i=0;i<list.count;i++) {
			var param = list[i];
			if (param !== void) {
				if (typeof param == "String") {
					var tr = getTrans(param);
					if (tr !== void && tr.method != void) {
						autoTrans = tr;
						//dm("自動トランジション指定:" + tr.method + ":" + tr.time);
						return;
					}
				} else if (param instanceof "Dictionary") {
					autoTrans = param;
					return;
				}
			}
		}
	}

	/**
	 * 表示処理用の自動トランジションの指定
	 */
	function setDispAutoTrans() {
	}
	
	// --------------------------------------------------------------
	
	var syncMode;
	var movieSyncMode;
	
	/**
	 * 状態更新処理
     */
	function updateLayer(layer) {
		
		if (resetFlag) {
			layer.visible = isShowBU();
			layer.reset();
			_show    = isShowBU();
            _type    = void;
			_opacity = void;
			_rotate = void;
			_zoom = void;
			_afx = void;
            _afy = void;
			clearAction(true);
			_rgamma = void;
			_ggamma = void;
			_bgamma = void;
            _grayscale = void;
			resetFlag = false;
		}

		if (doShow) {
			//dm("表示指定:" + show);
			layer.visible = show > 0;
			doShow = false;
		}
		if (doAffine) {
			layer.afx = afx;
			layer.afy = afy;
				doAffine = false;
		}
		if (doOpacity) {
			//dm("透明度変更:" + opacity + ":" + opacityTime); 
			if (opacityFrom !== void) {
				layer.opacity = opacityFrom;
				opacityFrom = void;
			}
			layer.setOpacityTime(opacity, opacityTime, opacityAccel);
			doOpacity = false;
		}
		if (doRotate) {
			//dm("回転変更:" + rotate + ":" + rotateTime);
			if (rotateFrom !== void) {
				layer.rotate = rotateFrom;
				rotateFrom = void;
			}
			layer.setRotateTime(rotate, rotateTime, rotateAccel);
			doRotate = false;
		}
		if (doZoom) {
			//dm("ズーム変更:" + zoom + ":" + zoomTime);
			if (zoomFrom !== void) {
				layer.zoom = zoomFrom;
				zoomFrom = void;
			}
			layer.setZoomTime(zoom, zoomTime, zoomAccel);
			doZoom = false;
		}
		if (doType) {
			//dm("合成種別変更");
			layer.type = type;
			doType = false;
		}
		if (doStopAction) {
			//dm("アクション停止");
			layer.stopAction();
			doStopAction = false;
		}
		// アクション処理
		if (actionList.count > 0) {
			//dm("アクション適用開始:" + actionList.count);
			for (var i=0;i<actionList.count;i++) {
				var action = actionList[i];
				layer.beginAction(action);
				// 実行中アクションの記録（保存用）
				if (action instanceof "Dictionary") {
					if (action.time == 0) {
						//dm("アクションを記録:" + i);
						currentActionList.add(action);
					}
				} else if (action instanceof "Array") {
					if (action.count > 0 && action[action.count - 1].time == 0) {
						//dm("アクションを記録:" + i + " count:" + action.count);
						currentActionList.add(action);
					}
				}
			}
			actionList.clear();
		}
		// アクションの結果の吸収
		var result = layer.getActionResult();
		if (result !== void) {
			//dm("アクション結果取得");
			//dm("不透明度:" + result.opacity);
			//dm("回転量:" + result.rotate);
			//dm("拡大率:" + result.zoom);
			//dm("left:" + result.left);
			//dm("top:" + result.top);
			_opacity = result.opacity if result.opacity !== void;
			_rotate  = result.rotate  if result.rotate  !== void;
			_zoom    = result.zoom    if result.zoom    !== void;
			if (result.left !== void || result.top  !== void) {
				//dm("処理前:" + xpos + "," + ypos);
				reversePosition(layer, result.left, result.top);
				//dm("処理後:" + xpos + "," + ypos);
			}
		}
		// シンクロ指定
		if (syncMode) {
			ret = kag.waitAction(layer);
		}
		if (movieSyncMode) {
			ret = kag.waitLayerMovie(layer);
		}
	}

	/**
	 * 相対値計算 Action.tjs からのコピー
	 * @param value 値指定
	 * @param orig オリジナルの値
	 */
	function getRelative(value, orig) {
		if (typeof value == "String" && (value.indexOf("@") >= 0)) {
			return Scripts.eval(value.replace(/@/, (string)orig));
		} else {
			return +value;
		}
	}
	
	function applyPropMoveAction(action, prop) {
		var info = action[prop];
		if (info !== void && info.handler == "MoveAction") {
			if (info.value !== void) {
				this[prop] = getRelative(info.value, this[prop]);
			}
		}
	}
	
	function applyMoveAction(action) {
		if (action.module !== void) {
			// 旧スタイルアクションは無視の方向
			return;
		}
		applyPropMoveAction(action, "opacity");
		applyPropMoveAction(action, "rotate");
		applyPropMoveAction(action, "zoom");
		var left, top;
		if (action.left !== void && action.left.handler == "MoveAction") {
			left = action.left.value;
		}
		if (action.top !== void && action.top.handler == "MoveAction") {
			top = action.top.value;
		}
		if (left !== void || top !== void) {
			calcActionPosition(left, top);
		}
	}

	function updateSkip() {
		// アクション廃棄処理
		if (actionList.count > 0) {
			for (var i=0;i<actionList.count;i++) {
				var action = actionList[i];
				if (action instanceof "Dictionary") {
					applyMoveAction(action);
				} else if (action instanceof "Array") {
					for (var j=0;j<action.count;j++) {
						applyMoveAction(action[j]);
					}
				}
			}
			actionList.clear();
		}
	}
	
    var commands = %[
    tagname : null, 
    time : null,
    type : function(param, elm) {
        type =  global[param];
    } incontextof this,
    opacity : function(param, elm) {
        opacityFrom = calcRelative(opacity, getFrom(param), 100);
        opacity     = calcRelative(opacity, getTo(param), 100);
        opacityTime = isSkip() ? 0 : +elm.time;
        opacityAccel = +elm.accel;
    } incontextof this,
    rotate : function(param, elm) {
        rotateFrom = calcRelative(rotate, getFrom(param), 360);
        rotate     = calcRelative(rotate, getTo(param), 360);
        rotateTime = isSkip() ? 0 : +elm.time;
        rotateAccel = +elm.accel;
    } incontextof this,
    zoom : function(param, elm) {
        zoomFrom = calcRelative(zoom, getFrom(param), 100);
        zoom     = calcRelative(zoom, getTo(param), 100);
        zoomTime = isSkip() ? 0 : +elm.time;
        zoomAccel = +elm.accel;
    } incontextof this,
    afx : function(param, elm) {
        afx = param;
    } incontextof this,
    afy : function(param, elm) {
        afy = param;
    } incontextof this,
    reset : function(param, elm) {
		resetFlag = true;
		updateFlag = true;
    } incontextof this,
    grayscale : function(param, elm) {
        grayscale = param;
    } incontextof this,
    rgamma : function(param, elm) {
        rgamma = param;
    } incontextof this,
    ggamma : function(param, elm) {
        ggamma = param;
    } incontextof this,
    bgamma : function(param, elm) {
        bgamma = param;
    } incontextof this,
    resetcolor : this.resetColor incontextof this,
    action : setAction incontextof this,
    stopaction : stopAction incontextof this,
	sync : function(param) { if (param) { syncMode = true; updateFlag=true; } } incontextof this,
	waitmovie : function(param) { if (param) { movieSyncMode = true; updateFlag=true; } } incontextof this,
	xpos : this.setXPos incontextof this,
	ypos : this.setYPos incontextof this,
	trans : this.setTrans incontextof this,
	show : function(param) { disp = SHOW; },
	hide : function(param) { disp = CLEAR; },
	accel : null, // 無視
	fade : null, // 無視
	nosync : null, // 無視
	nowait : null, // 無視
        ];

    /**
     * コマンドの実行
     * @param cmd コマンド
     * @param param パラメータ
     * @param elm 他のコマンドも含む全パラメータ
     * @return 実行が行われた場合 true
     */
    function doCommand(cmd, param, elm) {
        //dm("コマンド処理:" + cmd + " パラメータ:" + param);
        var func;
        if ((func = commands[cmd]) !== void) {
            if (func != null) {
                func(param, elm);
            }
            return true;
        }
        // 後で考えたほうがいいかも？
        if (actionParam[cmd] !== void) {
            return true;
        }
        if (transitionParam[cmd] !== void) {
            return true;
        }
        return false;
    }

    /**
     * セーブ処理
     */
    function onStore(f) {
		f.show    = show;
		f.type    = type;
		f.opacity = opacity;
        f.rotate  = rotate;
        f.zoom    = zoom;
		f.afx     = afx;
		f.afy     = afy;
        f.xpos    = xpos;
        f.ypos    = ypos;
        f.disp    = disp;

		f.actionList = [];
		(Array.assign incontextof f.actionList)(currentActionList);
		//for (var i=0;i<currentActionList.count;i++) {
		//dm("アクション保存:" + currentActionList[i].handler);
		//}
		f.grayscale = _grayscale;
        f.rgamma    = _rgamma;
        f.ggamma    = _ggamma;
        f.bgamma    = _bgamma;
    }

    /**
     * ロード処理
     */
    function onRestore(f) {
		
		show = f.show;
        type = f.type;
        opacity     = f.opacity;
        opacityFrom = void;
        opacityTime = void;
        opacityAccel = void;
        rotate      = f.rotate;
        rotateFrom  = void;
        rotateTime  = void;
        rotateAccel = void;
        zoom        = f.zoom;
        zoomFrom    = void;
        zoomTime    = void;
        zoomAccel   = void;
		afx         = f.afx;
		afy         = f.afy;
		if (f.actionList !== void) {
			for (var i=0;i<f.actionList.count;i++) {
				addAction(f.actionList[i]);
				//dm("アクション復帰:" + f.actionList[i].handler);
            }
        }
		disp      = f.disp;
		xpos      = f.xpos;
		xposFrom  = void;
        ypos      = f.ypos;
        yposFrom  = void;
        moveTime  = void;
        moveAccel = void;

        if (isShowBU()) {
            reposition = true;
        }

        _grayscale = f.grayscale;
        _rgamma    = f.rgamma;
        _ggamma    = f.ggamma;
        _bgamma    = f.bgamma;
        if (_grayscale != void ||
            _rgamma    != void ||
            _ggamma    != void ||
            _bgamma    != void) {
            redraw = true;
        }
        
    }

	// レイヤのサイズ調整用
	function setSize(layer) {
	}
	
    // このメソッドを実装する
    // function getLayer(base);
	// function drawLayer(layer)

	/**
	 * アクション座標計算
	 */
	function calcActionPosition(left, top) {
		xpos = getRelative(left, xpos) if left !== void;
		ypos = getRelative(top, ypos)  if top  !== void;
	}
	
	/**
	 * 座標逆計算
	 */
	function reversePosition(layer, left, top) {
		xpos = left if left !== void;
		ypos = top  if top  !== void;
	}

    /**
     * レイヤ配置処理(標準)：左上原点
     * @param layer 処理対象レイヤ
     */
    function calcPosition(layer) {
		//dm("位置指定1",xpos,ypos);
		var l = (int)xpos;
		var t = (int)ypos;
		if (moveTime !== void && moveTime > 0) {
			if (xposFrom !== void || yposFrom !== void) {
				var fl = xposFrom !== void ? (int)xposFrom : l;
				var ft = yposFrom !== void ? (int)yposFrom : t;
				layer.setPos(fl, ft);
			}
			layer.setMove(l, t, moveTime, moveAccel);
		} else {
			layer.setMove(l, t);
		}
		xposFrom = void;
		yposFrom = void;
		moveTime = void;
	}

	/*
	 * トランジション実行エントリ
	 * @param trans トランジション情報
	 * KAG にトランジション実行命令を差し込む
	 */
	function beginTransition(trans) {
		if (trans === void || trans.method === void || trans.time == 0 || isSkip()) {
			kag.insertTag("forelay");
			env.clearTrash();
		} else {
			// メッセージ窓状態同期
			kag.insertTag("syncmsg");
			if (trans.transwait !== void) {
				// 時間待ち
				kag.insertTag("wait", %[ time : (int)trans.time + (int)trans.transwait, trans:true ]);
			} else {
				// トランジション待ち
				kag.insertTag("wt");
			}
			// 実際のトランジション実行
			trans.children = true;
			if (trans.method === void) {
				trans.method = "crossfade";
			}
			kag.insertTag("trans", trans);
		}
    }

	function beginTransActionUpdate(trans, layer) {
		//dm("更新アクション実行");
		if (trans.showaction !== void) {
			var action = copyActionInfo(trans.showaction, trans.time);
			kag.insertTag("action", %[target:layer, action:action]);
		}
		if (trans.hideaction !== void) {
			var action = copyActionInfo(trans.hideaction, trans.time);
			kag.insertTag("action", %[target:layer.comp, action:action]);
		}
	}
	
	function beginTransAction(trans, layer, hide, nosync) {
		//dm("表示アクション実行");
		if (!nosync && !trans.nosync) {
			if (trans.transwait !== void) {
				// 時間待ち
				kag.insertTag("wait", %[ time : (int)trans.time + (int)trans.transwait, action:true ]);
			} else {
				// アクション待ち
				kag.insertTag("wact", %[ target:layer ]);
			}
		}
		// アクション実行
		var action = copyActionInfo(hide ? trans.hideaction : trans.showaction, trans.time);
		action["visvalue"] = %[ handler:MoveAction, value: hide ? 0 : 100, time:trans.time ];
		kag.insertTag("action", %[target:layer, action:action]);
	}
	
	/**
	 * メッセージ窓消去
	 */
	function hideMessage(trans) {
		if (trans !== void && trans.msgoff) {
			kag.insertTag("msgoff");
		}
    }

	/**
	 * 単純更新
	 */
	function update(base) {
		//dm("更新処理実行:" + name);
		if (layerOn && (updateFlag || redraw || reposition)) {
			var layer = getLayer(base);
			if (redraw) {
				initLayer(layer);
				drawLayer(layer);
				if (grayscale) {
					layer.doGrayScale();
				}
				if (rgamma != void || ggamma != void || bgamma != void) {
					layer.adjustGamma(rgamma == void ? 1.0 : rgamma, 0, 255,
									  ggamma == void ? 1.0 : ggamma, 0, 255,
									  bgamma == void ? 1.0 : bgamma, 0, 255);
				}
			}
			if (redraw || reposition) {
				setSize(layer);
				calcPosition(layer);
			}
			redraw = false;
			reposition = false;
			updateLayer(layer);

			// レイヤ処理がおわった段階で
			// レイヤ消去されてたら
			// 次は処理対象からはずす
			if (!isShowBU()) {
				layerOn = false;
			}
			updateFlag = false;
			return layer;
		}
		updateFlag = false;
	}

	// タグ処理の帰り値
	var _ret;
	property ret {
		getter() {
			return _ret;
		}
		setter(v) {
			if (v === void) {
				_ret = 0;
            } else {
                if (v < ret) {
                    _ret = v;
                }
            }
        }
    }

	/**
	 * KAG 個別コマンド処理
	 * @param elm 引数
	 */
    function command(elm) {
		var names = [];
		names.assign(elm);
		for (var i=0; i<names.count; i+= 2) {
			if (!doCommand(names[i], names[i+1], elm)) {
				kag.errorCmd(name + ":未知のコマンド:" + names[i]);
			}
		}
    }
	
	/**
	 * KAG タグ処理
	 * @param elm 要素
	 */
	function tagfunc(elm) {

		kag.updateBeforeCh = 1;
		ret = void;
		trans = void;
		autoTrans = void;
		syncMode = void;
		movieSyncMode = void;
		
		// コマンド実行前の表示状態
		var prevShow = isShowBU();

		command(elm);

		// 0:非表示 1:表示 2:消去 3:更新
		var mode = (prevShow ? 2 : 0) + (isShowBU() ? 1 : 0);
		//dm("表示モード:" + mode);

		if (trans === void) {
			if (elm.fade) {
				var fadeTime = elm.fade;
				trans = %[
					"time" => fadeTime > 1 ? fadeTime : fadeValue,
					"method" => "crossfade",
					];
			} else {
				// 表示・消去指定に対応
				if (mode == 1 || mode == 2) {
					setDispAutoTrans();
				}
				trans = autoTrans;
			}
		}

		// キャラクタ強制消去
		if (trans !== void && trans.charoff) {
			foreach(characters, function(name,value,dict) {
				value.disp = CLEAR;
			} incontextof this);
		}

		if (!kag.skipNoDisp) {
			//dm("更新処理開始" + name);
			if (env.transMode) {
				//dm("トランジション処理中");
				update(env.transMode == 1 ? kag.back : kag.fore);
			} else if (isSkip()) {
				// スキップ中または描画なし
				update(kag.fore);
				env.clearTrash();
			} else {
				if (trans === void) {
					update(kag.fore);
				} else if (trans.time == 0) {
					update(kag.fore);
					env.clearTrash();
				} else {
					if (trans.method !== void || mode == 3) {
						//dm("画像更新:" + trans.method + ":" + trans.showaction + ":" + trans.hideaction);
						kag.fore.base.stopTransition();
						kag.backupLayer(EMPTY, true);
						var layer = update(kag.back);
						beginTransition(trans);
						if (layer !== void) {
							beginTransActionUpdate(trans, layer);
						}
					} else if (mode == 2) {
						//dm("画像消去");
						doShow = false;
						var layer = update(kag.fore);
						beginTransAction(trans, layer, true, elm.nosync);
					} else if (mode == 1) {
						//dm("画像表示");
						doShow = false;
						var layer = update(kag.fore);
						beginTransAction(trans, layer, false, elm.nosync);
					} else {
						update(kag.fore);
					}
				}
			}
			hideMessage(trans);
		} else {
			updateSkip();
		}
		return ret;
	}

}

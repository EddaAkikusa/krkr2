if (typeof global.CSVParser == "undefined") {
	dm("csv Parserr がロードされてない");
	Plugins.link("csvParser.dll");
}

/**
 * シーン定義ファイル読み出し用パーサ
 * キャラ名, コンフィグ名, ボイスファイル名
 */
class VariableListParser extends CSVParser {

	var varInfos = []; // 変数情報
	var check; // ロードチェック用

    /**
     * 行毎に呼び出される
     * @param columns カラムデータ(Array)
     * @param lineNo 論理行番号(1〜)
     */
	function doLine(columns, lineNo) {
		if (columns.count > 0 && columns[0] != "" && columns[0].charAt(0) != '#') {
			var name = columns[0].trim();
			if (name != "") {
				// 変数の所属
				var zone = 0;
				var p = name.indexOf(".");
				if (p >= 0) {
					var base = name.substring(0,p);
					name = name.substring(p+1);
					if (base == "sf") {
						zone = 1;
					} else if (base == "tf") {
						zone = 2;
					}
				}

				// 変数の型とサイズ
				// 0:整数 1:実数 2:文字列
				var type = 0;
				var size;
				if (columns.count > 1) {
					var typen = columns[1].trim().toUpperCase();
					if (typen == "FLOAT") {
						type = 1;
					} else if (typen == "STRING" || typen == "STR" ) {
						type = 2;
						if (columns.count > 2) {
							size = (int)columns[2];
						} else{
							size = 16;
						}
					}
				}
				var e = %[ zone:zone, type:type, name:name ];
				if (size !== void) {
					e.size = size;
				}
				varInfos.add(e);
			}
			check = true;
		}
    }

	// ファイルをパースする
	function parseStorage(filename,utf8=false) {
		check = false;
		super.parseStorage(...);
		if (check) return;

		// １行も読まれなかったらとりあえずエンコードを変えて読み直し
		super.parseStorage(filename, !utf8);
		if (check) return;

		// それでもダメだったらArrayで読み直す
		var temp = [];
		var sep = (Storages.extractStorageExt(filename).toLowerCase() == ".txt") ? "\t" : ",";
		temp.load(filename);
		for (var i = 0; i < temp.count; i++) {
			var line = [];
			line.split(sep, temp[i]);
			doLine(line, i+1) if (line.count > 0);
		}
	}

	/**
	 * コンストラクタ
	 */
	function VariableListParser() {
		super.CSVParser(...);
	}
};

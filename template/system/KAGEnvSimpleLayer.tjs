/**
 * 舞台用レイヤ
 */
class SimpleLayerGraphicLayer extends EnvGraphicLayer {

	var xbase;
	var ybase;
	var originMode;
	
	function SimpleLayerGraphicLayer(owner, base, name) {
		super.EnvGraphicLayer(...);
		originMode = owner.originMode;
		xbase = owner.xbase;
		ybase = owner.ybase;
	}

	function recalcPosition() {
		var xdiff;
		var ydiff;
		switch (originMode) {
		case 1:
			xdiff = 0;
			ydiff = 0;
			break;
		case 2:
			xdiff = width / 2;
			ydiff = 0;
			break;
		case 3:
			xdiff = width;
			ydiff = 0;
			break;
		case 4:
			xdiff = width;
			ydiff = height / 2;
			break;
		case 5:
			xdiff = width;
			ydiff = height;
			break;
		case 6:
			xdiff = width / 2;
			ydiff = height;
			break;
		case 7:
			xdiff = 0;
			ydiff = height;
			break;
		case 8:
			xdiff = 0;
			ydiff = height / 2;
			break;
		default:
			xdiff = width / 2;
			ydiff = height / 2;
			break;
		}

		//dm("位置指定2:" + xbase + "," + ybase + ":" + xdiff + "," + ydiff + ":" + left + "," + top);
		setRealPosition(xbase + left - xdiff,
						ybase + top  - ydiff);
	}
};

/**
 * 単独レイヤ
 */
class KAGEnvSimpleLayer extends KAGEnvLevelLayer, KAGEnvLayer {

	/**
	 * 表示処理用の自動トランジションの指定
	 */
	function setDispAutoTrans() {
		setAutoTrans([env.envinfo.layerDispTrans]);
	}

	var xbase;
	var ybase;
	var _viewOriginMode; // 画面原点位置指定
	property viewOriginMode {
		getter() {
			return _viewOriginMode;
		}
		setter(v) {
			_viewOriginMode = v;
			switch (v) {
			case 1:
				xbase = 0;
				ybase = 0;
				break;
			case 2:
				xbase = kag.scWidth / 2;
				ybase = 0;
				break;
			case 3:
				xbase = kag.scWidth;
				ybase = 0;
				break;
			case 4:
				xbase = kag.scWidth;
				ybase = kag.scHeight / 2;
				break;
			case 5:
				xbase = kag.scWidth;
				ybase = kag.scHeight;
				break;
			case 6:
				xbase = kag.scWidth / 2;
				ybase = kag.scHeight;
				break;
			case 7:
				xbase = 0;
				ybase = kag.scHeight;
				break;
			case 8:
				xbase = 0;
				ybase = kag.scHeight / 2;
				break;
			default:
				xbase = kag.scWidth / 2;
				ybase = kag.scHeight / 2;
				break;
			}
		}
	}

	var originMode;     // レイヤ原点
    // 左上1 中上2 右上3
    // 左  8 中央9   右4
    // 左下7 中下6 左下5
    
    /**
     * コンストラクタ
     * @param env
     * @param name
     * @param level
     */
    function KAGEnvSimpleLayer(env, name) {
		global.KAGEnvLayer.KAGEnvLayer(env, name);
		global.KAGEnvLevelLayer.KAGEnvLevelLayer();
		viewOriginMode = 9;
    }

    function finalize() {
        // 順番変更不可
        global.KAGEnvLevelLayer.finalize();
        global.KAGEnvLayer.finalize();
    }

    function onStore(f) {
        global.KAGEnvLayer.onStore(f);
        global.KAGEnvLevelLayer.onStore(f);
        f.name = name;
        f.originMode = originMode;
        f.viewOriginMode = viewOriginMode;
    }

    function onRestore(f) {
        name = f.name;
		originMode = f.originMode;
        viewOriginMode = f.viewOriginMode;
		global.KAGEnvLayer.onRestore(f);
		global.KAGEnvLevelLayer.onRestore(f);
    }

	var simpleLayerCommands = %[
	origin : function(cmd,elm) { originMode = +cmd; } incontextof this,
	vorigin : function(cmd,elm) { viewOriginMode = +cmd; } incontextof this,
    front : this.setFront incontextof this,
	back : this.setBack incontextof this,
	level : this.setLevel incontextof this,
		];

    /**
	 * コマンドの実行
	 * @param cmd コマンド
	 * @param param パラメータ
	 * @param elm 他のコマンドも含む全パラメータ
     * @return 実行が行われた場合 true
     */
	function doCommand(cmd, param, elm) {
		
		// 共通コマンド
		if (global.KAGEnvLayer.doCommand(cmd, param, elm)) {
			return true;
        }

		var func;
		if ((func = simpleLayerCommands[cmd]) !== void) {
			if (func != null) {
				func(param, elm);
			}
            return true;
        }
		
		// 画像のロード
		return setImageFile(cmd, elm);
	}

	/**
	 * 新レイヤ生成
	 */
	function createLayer(owner, base, name) {
		return new SimpleLayerGraphicLayer(owner, base, name);
	}

}

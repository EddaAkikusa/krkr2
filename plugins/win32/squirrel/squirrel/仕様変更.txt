Author: 渡邊剛(go@wamsoft.jp)
Date: 2009/4/22

●SQUIRREL仕様変更

・SJISスルー対応
　
　USESJIS が定義されてる場合は、SJIS の文字列を通すようになります

　適切に文字分離できてるわけではありません。コンパイル時の
  漢字の2byte目でのエスケープ処理の誤動作が防がれるだけです。

  string.mb* の拡張関数を使うことで基本的なマルチバイト操作を行うことができます。

・スレッド実行中の sq_call でエラーを出力するように修正

　sqbaselib.c:776 の　sq_call の raiseerror を SQFalse → SQTrue

・コンパイルされたスクリプトは可変長引数を持つように修正 

  function main(...) という扱いになっていて、
  vargc, vargv で sq_call 時に渡された引数を参照できます

 compiler.cpp:163 に funcstate._varparams = true; を追加

・SQ_SUCCEEDED, SQ_FAILED のマクロが危険だったので修正

・SQInstance の Finalize 処理の仕様変更

　GCは Finalize を先行して呼び出す。この時、class が破棄されてしまうため、
  その後の _hook 呼び出しの先にある sqobject::Object の destructor の呼び出しで
　例外が生じてしまう。これを防止するため、Finalize / Release いずれか先に
　呼ばれたほうで _hook を処理するように仕様を変更

・sqvm.cpp で _OP_FOREACH の処理に以下のコードを追加

-------------------------------------------------
if (sarg1 == tojump) { // XXX stack clear code
    int n = _stackbase + (arg2+3);
    while (n < _top) {
        _stack._vals[n++].Null();
    }
}
-------------------------------------------------

これはforeach を抜けるときにスタックの後ろを全部消去する処理です。

配列/辞書中のデータの呼び出しを行った際、スタック上の
隠し変数に参照が残るため、配列や辞書の消去を行っても、
参照が残って関数を抜けるまでオブジェクトが残る場合があります。

これはあらゆる局面でおこる可能性があるのですが、
・配列/辞書の連続操作は foreach を使うことが多い
・foreach は抜ける部分がプログラム的に検知可能
ということで、専用の対策コードをいれました。

※本来は、例えばスコープ単位で、コンパイラが
　作業スタックをクリアするバイトコードを挿入するようにするのが妥当です。
　現在は関数からの Return 時にしかクリア処理が行われません

・sq_writeclosure にエンディアン指定を追加

引数 endian に SQ_DEFUALT_ENDIAN, SQ_LITTLE_ENDIAN, SQ_BIG_ENDIAN
が指定可能です。指定されたエンディアンのバイナリを出力します。
squirrel グローバル関数 writeclosuretofile() も最後に endian 引数が追加されます。
指定されたエンディアンでの出力を行わせることができます。
※別環境用のバイナリを出力させる場合に使います

・sq.exe に出力エンディアン指定の -e オプションを追加

 0: 環境標準
 1: little endian
 2: bigendian

・sq_loadclosure でエンディアン判定を追加

エンディアンが違うストリームを読み込ませようとすると 
"invalid endian closure stream" エラーになります。
※読み込めるエンディアンは実行環境に合致したものに限ります。

●SQPLUS仕様変更

オリジナルの SQPLUS では、エラー処理に例外を使っていたため、
ゲーム用途では不便なので以下のような仕様変更を行いました。

・SuiqrrelVM のコンパイル処理系の関数

　squirrelのエラーコードを返すように仕様変更

　帰り値　：エラーコード
  第一引数：帰り値(SquirrelObject)の参照

・SquirrelFunction の呼び出し

　squirrelのエラーコードを返すように仕様変更

　帰り値：エラーコード
　第一引数：関数呼び出しの帰り値（テンプレートで指定した型）を格納するポインタ

  SquirrelFunction<void>() はエラーになります。帰り値を無視したい
　場合は、型には int などを指定した上で、第一引数に NULL を渡してください。

・各種呼び出し時の Push/Get系の例外(オブジェクト関連で発生)を廃止

  全部ログ出力のみでスルーするように仕様変更
　失敗時は値には NULLが入ります。

　ログ出力はマクロ SQPLUS_LOG(msg) で定義されてます。
　コンパイラ側で再定義することで置き換え可能です。

  標準定義は以下の通り
  -----------------------------------------------
  #define SQPLUS_LOG(msg) scprintf(msg);
  -----------------------------------------------

・ポインタを返した場合にリリーサを付加する定義を追加

DECLARE_INSTANCE_TYPE_NAME_RELEASE(TYPE,NAME)
DECLARE_INSTANCE_TYPE_RELEASE(TYPE)


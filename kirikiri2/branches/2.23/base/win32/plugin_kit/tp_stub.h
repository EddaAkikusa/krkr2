/*

	TVP2 ( T Visual Presenter 2 )  A script authoring tool
	Copyright (C) 2000-2004  W.Dee <dee@kikyou.info>

	See details of license at "license.txt"
*/
/* This file is always generated by makestub.pl . */
/* Modification by hand will be lost. */
#ifndef __TP_STUB_H__
#define __TP_STUB_H__

#ifndef __cplusplus
	#error Sorry, currently tp_stub.h can only be used in C++ mode.
#endif

#ifndef _WIN32
	#error Sorry, currently tp_stub.h can only be used in Win32 VC++ or Borland compilers.
#endif




typedef __int8 tjs_int8;
typedef unsigned __int8 tjs_uint8;
typedef __int16 tjs_int16;
typedef unsigned __int16 tjs_uint16;
typedef __int32 tjs_int32;
typedef unsigned __int32 tjs_uint32;
typedef __int64 tjs_int64;
typedef unsigned __int64 tjs_uint64;
typedef int tjs_int;    /* at least 32bits */
typedef unsigned int tjs_uint;    /* at least 32bits */

#ifdef __cplusplus
typedef wchar_t tjs_char;
#else
typedef unsigned short tjs_char;
#endif

typedef char tjs_nchar;
typedef double tjs_real;

#define TJS_HOST_IS_BIG_ENDIAN 0
#define TJS_HOST_IS_LITTLE_ENDIAN 1

#define TJS_INTF_METHOD __stdcall

#define TJS_USERENTRY __cdecl

#define TJS_I64_VAL(x) ((tjs_int64)(x##i64))
#define TJS_UI64_VAL(x) ((tjs_uint64)(x##i64))



#define TJS_W(X) L##X
#define TJS_N(X) X


typedef tjs_int32 tjs_error;

typedef tjs_int64 tTVInteger;
typedef tjs_real tTVReal;


/* IEEE double manipulation support
 (TJS requires IEEE double(64-bit float) native support on machine or C++ compiler) */

/*

63 62       52 51                         0
+-+-----------+---------------------------+
|s|    exp    |         significand       |
+-+-----------+---------------------------+

s = sign,  negative if this is 1, otherwise positive.



*/

/* double related constants */
#define TJS_IEEE_D_EXP_MAX 1023
#define TJS_IEEE_D_EXP_MIN -1022
#define TJS_IEEE_D_SIGNIFICAND_BITS 52

#define TJS_IEEE_D_EXP_BIAS 1023

/* component extraction */
#define TJS_IEEE_D_SIGN_MASK              (TJS_UI64_VAL(0x8000000000000000))
#define TJS_IEEE_D_EXP_MASK               (TJS_UI64_VAL(0x7ff0000000000000))
#define TJS_IEEE_D_SIGNIFICAND_MASK       (TJS_UI64_VAL(0x000fffffffffffff))
#define TJS_IEEE_D_SIGNIFICAND_MSB_MASK   (TJS_UI64_VAL(0x0008000000000000))

#define TJS_IEEE_D_GET_SIGN(x)   ((bool)(x & TJS_IEEE_D_SIGN_MASK))
#define TJS_IEEE_D_GET_EXP(x)  ((tjs_int)(((x & TJS_IEEE_D_EXP_MASK) >> \
								TJS_IEEE_D_SIGNIFICAND_BITS) - TJS_IEEE_D_EXP_BIAS))
#define TJS_IEEE_D_GET_SIGNIFICAND(x) (x & TJS_IEEE_D_SIGNIFICAND_MASK)

/* component composition */
#define TJS_IEEE_D_MAKE_SIGN(x)  ((x)?TJS_UI64_VAL(0x8000000000000000):TJS_UI64_VAL(0))
#define TJS_IEEE_D_MAKE_EXP(x)   ((tjs_uint64)(x + TJS_IEEE_D_EXP_BIAS) << 52)
#define TJS_IEEE_D_MAKE_SIGNIFICAND(x) ((tjs_uint64)(x))

/* special expression */
 /* (quiet) NaN */
  #define TJS_IEEE_D_P_NaN (tjs_uint64)(TJS_IEEE_D_EXP_MASK|TJS_IEEE_D_SIGNIFICAND_MSB_MASK)
  #define TJS_IEEE_D_N_NaN (tjs_uint64)(TJS_IEEE_D_SIGN_MASK|TJS_IEEE_D_P_NaN)
 /* infinite */
  #define TJS_IEEE_D_P_INF (tjs_uint64)(TJS_IEEE_D_EXP_MASK)
  #define TJS_IEEE_D_N_INF (tjs_uint64)(TJS_IEEE_D_SIGN_MASK|TJS_IEEE_D_P_INF)

/* special expression check */
  #define TJS_IEEE_D_IS_NaN(x) ((TJS_IEEE_D_EXP_MASK & (x)) == TJS_IEEE_D_EXP_MASK) && \
				(((x) & TJS_IEEE_D_SIGNIFICAND_MSB_MASK) || \
				(!((x) & TJS_IEEE_D_SIGNIFICAND_MSB_MASK) && \
				((x) & (TJS_IEEE_D_SIGNIFICAND_MASK ^ TJS_IEEE_D_SIGNIFICAND_MSB_MASK))))
  #define TJS_IEEE_D_IS_INF(x) (((TJS_IEEE_D_EXP_MASK & (x)) == TJS_IEEE_D_EXP_MASK) && \
				(!((x) & TJS_IEEE_D_SIGNIFICAND_MASK)))



//---------------------------------------------------------------------------
// tTJSVariantString stuff
//---------------------------------------------------------------------------
#define TJS_VS_SHORT_LEN 21


//---------------------------------------------------------------------------
// tTJSVariantString
//---------------------------------------------------------------------------
#pragma pack(push, 4)
struct tTJSVariantString_S
{
	tjs_int RefCount; // reference count - 1
	tjs_char *LongString;
	tjs_char ShortString[TJS_VS_SHORT_LEN +1];
	tjs_int Length; // string length
	tjs_uint32 HeapFlag;
	tjs_uint32 Hint;
};
#pragma pack(pop)


//---------------------------------------------------------------------------
// tTJSRefHolder : a object holder for classes that has AddRef and Release methods
//---------------------------------------------------------------------------
template <typename T>
class tTJSRefHolder
{
private:
	T *Object;
public:
	tTJSRefHolder(T * ref) { Object = ref; Object->AddRef(); }
	tTJSRefHolder(const tTJSRefHolder<T> &ref)
	{
		Object = ref.Object;
		Object->AddRef();
	}
	~tTJSRefHolder() { Object->Release(); }

	T* GetObject() { Object->AddRef(); return Object; }
	T* GetObjectNoAddRef() { return Object; }

	const tTJSRefHolder & operator = (const tTJSRefHolder & rhs)
	{
		if(rhs.Object != Object)
		{
			Object->Release();
			Object = rhs.Object;
			Object->AddRef();
		}
		return *this;
	}
};





//---------------------------------------------------------------------------
// floating-point class checker
//---------------------------------------------------------------------------
// constants used in TJSGetFPClass
#define TJS_FC_CLASS_MASK 7
#define TJS_FC_SIGN_MASK 8

#define TJS_FC_CLASS_NORMAL 0
#define TJS_FC_CLASS_NAN 1
#define TJS_FC_CLASS_INF 2

#define TJS_FC_IS_NORMAL(x)  (((x)&TJS_FC_CLASS_MASK) == TJS_FC_CLASS_NORMAL)
#define TJS_FC_IS_NAN(x)  (((x)&TJS_FC_CLASS_MASK) == TJS_FC_CLASS_NAN)
#define TJS_FC_IS_INF(x)  (((x)&TJS_FC_CLASS_MASK) == TJS_FC_CLASS_INF)

#define TJS_FC_IS_NEGATIVE(x) ((bool)((x) & TJS_FC_SIGN_MASK))
#define TJS_FC_IS_POSITIVE(x) (!TJS_FC_IS_NEGATIVE(x))




//---------------------------------------------------------------------------
// tTJSStringBufferLength
//---------------------------------------------------------------------------
#pragma pack(push, 4)
class tTJSStringBufferLength
{
public:
	tjs_int n;
	tTJSStringBufferLength(tjs_int n) {this->n = n;}
};
#pragma pack(pop)


//---------------------------------------------------------------------------
// tTJSString
//---------------------------------------------------------------------------
#pragma pack(push, 4)
class tTJSVariantString;
struct tTJSString_S
{
	tTJSVariantString *Ptr;
};
#pragma pack(pop)
class tTJSString;


typedef tTJSString ttstr;


//---------------------------------------------------------------------------
// call flag type
//---------------------------------------------------------------------------
#define TJS_MEMBERENSURE		0x00000200 // create a member if not exists
#define TJS_MEMBERMUSTEXIST     0x00000400 // member *must* exist ( for Dictionary/Array )
#define TJS_IGNOREPROP			0x00000800 // ignore property invoking
#define TJS_HIDDENMEMBER		0x00001000 // member cannot be enumerated in
										   // tTJSCustomObject::EnumMembers
#define TJS_STATICMEMBER		0x00010000 // member is not registered to the
										   // object (internal use)

#define TJS_NIS_REGISTER		0x00000001 // set native pointer
#define TJS_NIS_GETINSTANCE		0x00000002 // get native pointer

#define TJS_CII_ADD				0x00000001 // register name
#define TJS_CII_GET				0x00000000 // retrieve name

#define TJS_OL_LOCK				0x00000001 // Lock the object
#define TJS_OL_UNLOCK			0x00000002 // Unlock the object



//---------------------------------------------------------------------------
// 	Operation  flag
//---------------------------------------------------------------------------

#define TJS_OP_BAND				0x0001
#define TJS_OP_BOR				0x0002
#define TJS_OP_BXOR				0x0003
#define TJS_OP_SUB				0x0004
#define TJS_OP_ADD				0x0005
#define TJS_OP_MOD				0x0006
#define TJS_OP_DIV				0x0007
#define TJS_OP_IDIV				0x0008
#define TJS_OP_MUL				0x0009
#define TJS_OP_LOR				0x000a
#define TJS_OP_LAND				0x000b
#define TJS_OP_SAR				0x000c
#define TJS_OP_SAL				0x000d
#define TJS_OP_SR				0x000e
#define TJS_OP_INC				0x000f
#define TJS_OP_DEC				0x0010

#define TJS_OP_MASK				0x001f

#define TJS_OP_MIN				TJS_OP_BAND
#define TJS_OP_MAX				TJS_OP_DEC

/* SAR = Shift Arithmetic Right, SR = Shift (bitwise) Right */



//---------------------------------------------------------------------------
// iTJSDispatch
//---------------------------------------------------------------------------
/*
	iTJSDispatch interface
*/
class tTJSVariant;
class iTJSNativeInstance;
class iTJSDispatch2
{
/*
	methods, that have "ByNum" at the end of the name, have
	"num" parameter that enables the function to call a member with number directly.
	following two have the same effect:
	FuncCall(NULL, L"123", NULL, 0, NULL, NULL);
	FuncCallByNum(NULL, 123, NULL, 0, NULL, NULL);
*/

public:
	virtual tjs_uint TJS_INTF_METHOD AddRef(void) = 0;
	virtual tjs_uint TJS_INTF_METHOD Release(void) = 0;

public:

	virtual tjs_error TJS_INTF_METHOD
	FuncCall( // function invocation
		tjs_uint32 flag,			// calling flag
		const tjs_char * membername,// member name ( NULL for a default member )
		tjs_uint32 *hint,			// hint for the member name (in/out)
		tTJSVariant *result,		// result
		tjs_int numparams,			// number of parameters
		tTJSVariant **param,		// parameters
		iTJSDispatch2 *objthis		// object as "this"
		) = 0;

	virtual tjs_error TJS_INTF_METHOD
	FuncCallByNum( // function invocation by index number
		tjs_uint32 flag,			// calling flag
		tjs_int num,				// index number
		tTJSVariant *result,		// result
		tjs_int numparams,			// number of parameters
		tTJSVariant **param,		// parameters
		iTJSDispatch2 *objthis		// object as "this"
		) = 0;

	virtual tjs_error TJS_INTF_METHOD
	PropGet( // property get
		tjs_uint32 flag,			// calling flag
		const tjs_char * membername,// member name ( NULL for a default member )
		tjs_uint32 *hint,			// hint for the member name (in/out)
		tTJSVariant *result,		// result
		iTJSDispatch2 *objthis		// object as "this"
		) = 0;

	virtual tjs_error TJS_INTF_METHOD
	PropGetByNum( // property get by index number
		tjs_uint32 flag,			// calling flag
		tjs_int num,				// index number
		tTJSVariant *result,		// result
		iTJSDispatch2 *objthis		// object as "this"
		) = 0;

	virtual tjs_error TJS_INTF_METHOD
	PropSet( // property set
		tjs_uint32 flag,			// calling flag
		const tjs_char *membername,	// member name ( NULL for a default member )
		tjs_uint32 *hint,			// hint for the member name (in/out)
		const tTJSVariant *param,	// parameters
		iTJSDispatch2 *objthis		// object as "this"
		) = 0;

	virtual tjs_error TJS_INTF_METHOD
	PropSetByNum( // property set by index number
		tjs_uint32 flag,			// calling flag
		tjs_int num,				// index number
		const tTJSVariant *param,	// parameters
		iTJSDispatch2 *objthis		// object as "this"
		) = 0;

	virtual tjs_error TJS_INTF_METHOD
	GetCount( // get member count
		tjs_int *result,         	// variable that receives the result
		const tjs_char *membername,	// member name ( NULL for a default member )
		tjs_uint32 *hint,			// hint for the member name (in/out)
		iTJSDispatch2 *objthis      // object as "this"
		) = 0;

	virtual tjs_error TJS_INTF_METHOD
	GetCountByNum( // get member count by index number
		tjs_int *result,			// variable that receives the result
		tjs_int num,				// by index number
		iTJSDispatch2 *objthis		// object as "this"
		) = 0;

	virtual tjs_error TJS_INTF_METHOD
	Reserved1() = 0; // reserved.

	virtual tjs_error TJS_INTF_METHOD
	Reserved2() = 0; // reserved ( may become member enumeration method... )

	virtual tjs_error TJS_INTF_METHOD
	DeleteMember( // delete member
		tjs_uint32 flag,			// calling flag
		const tjs_char *membername,	// member name ( NULL for a default member )
		tjs_uint32 *hint,			// hint for the member name (in/out)
		iTJSDispatch2 *objthis		// object as "this"
		) = 0;

	virtual tjs_error TJS_INTF_METHOD
	DeleteMemberByNum( // delete member by index number
		tjs_uint32 flag,			// calling flag
		tjs_int num,				// index number
		iTJSDispatch2 *objthis		// object as "this"
		) = 0;

	virtual tjs_error TJS_INTF_METHOD
	Invalidate( // invalidation
		tjs_uint32 flag,			// calling flag
		const tjs_char *membername,	// member name ( NULL for a default member )
		tjs_uint32 *hint,			// hint for the member name (in/out)
		iTJSDispatch2 *objthis		// object as "this"
		) = 0;

	virtual tjs_error TJS_INTF_METHOD
	InvalidateByNum( // invalidation by index number
		tjs_uint32 flag,			// calling flag
		tjs_int num,				// index number
		iTJSDispatch2 *objthis		// object as "this"
		) = 0;

	virtual tjs_error TJS_INTF_METHOD
	IsValid( // get validation
		tjs_uint32 flag,			// calling flag
		const tjs_char *membername,	// member name ( NULL for a default member )
		tjs_uint32 *hint,			// hint for the member name (in/out)
		iTJSDispatch2 *objthis		// object as "this"
		) = 0;

	virtual tjs_error TJS_INTF_METHOD
	IsValidByNum( // get validation by index number
		tjs_uint32 flag,			// calling flag
		tjs_int num,				// index number
		iTJSDispatch2 *objthis		// object as "this"
		) = 0;

	virtual tjs_error TJS_INTF_METHOD
	CreateNew( // create new object
		tjs_uint32 flag,			// calling flag
		const tjs_char * membername,// member name ( NULL for a default member )
		tjs_uint32 *hint,			// hint for the member name (in/out)
		iTJSDispatch2 **result,		// result
		tjs_int numparams,			// number of parameters
		tTJSVariant **param,		// parameters
		iTJSDispatch2 *objthis		// object as "this"
		) = 0;

	virtual tjs_error TJS_INTF_METHOD
	CreateNewByNum( // create new object by index number
		tjs_uint32 flag,			// calling flag
		tjs_int num,				// index number
		iTJSDispatch2 **result,		// result
		tjs_int numparams,			// number of parameters
		tTJSVariant **param,		// parameters
		iTJSDispatch2 *objthis		// object as "this"
		) = 0;

	virtual tjs_error TJS_INTF_METHOD
	GetSuperClass( // get super class : useless !!!!
		tjs_uint32 flag,			// calling flag
		iTJSDispatch2 **result,		// result
		iTJSDispatch2 *objthis		// object as "this"
		) = 0;

	virtual tjs_error TJS_INTF_METHOD
	IsInstanceOf( // class instance matching returns TJS_S_FALSE or TJS_S_TRUE
		tjs_uint32 flag,			// calling flag
		const tjs_char *membername,	// member name ( NULL for a default member )
		tjs_uint32 *hint,			// hint for the member name (in/out)
		const tjs_char *classname,	// class name to inquire
		iTJSDispatch2 *objthis		// object as "this"
		) = 0;

	virtual tjs_error TJS_INTF_METHOD
	IsInstanceOfByNum( // class instance matching by index number
		tjs_uint32 flag,			// calling flag
		tjs_int num,					// index number
		const tjs_char *classname,	// class name to inquire
		iTJSDispatch2 *objthis		// object as "this"
		) = 0;

	virtual tjs_error TJS_INTF_METHOD
	Operation( // operation with member
		tjs_uint32 flag,			// calling flag
		const tjs_char *membername,	// member name ( NULL for a default member )
		tjs_uint32 *hint,			// hint for the member name (in/out)
		tTJSVariant *result,		// result ( can be NULL )
		const tTJSVariant *param,	// parameters
		iTJSDispatch2 *objthis		// object as "this"
		) = 0;

	virtual tjs_error TJS_INTF_METHOD
	OperationByNum( // operation with member by index number
		tjs_uint32 flag,			// calling flag
		tjs_int num,				// index number
		tTJSVariant *result,		// result ( can be NULL )
		const tTJSVariant *param,	// parameters
		iTJSDispatch2 *objthis		// object as "this"
		) = 0;

	virtual tjs_error TJS_INTF_METHOD
	NativeInstanceSupport( // support for native instance
		tjs_uint32 flag,			// calling flag
		tjs_int32 classid,			// native class ID
		iTJSNativeInstance **pointer// object pointer
		) = 0;

	virtual tjs_error TJS_INTF_METHOD
	ClassInstanceInfo( // support for class instance information
		tjs_uint32 flag,			// calling flag
		tjs_uint num,				// index number
		tTJSVariant *value			// the name
		) = 0;

};
//---------------------------------------------------------------------------
class iTJSNativeInstance
{
public:
	virtual tjs_error TJS_INTF_METHOD Construct(tjs_int numparams,
		tTJSVariant **param, iTJSDispatch2 *tjs_obj) = 0;
		// TJS constructor
	virtual void TJS_INTF_METHOD Invalidate() = 0;
		// called before destruction
	virtual void TJS_INTF_METHOD Destruct() = 0;
		// must destruct itself
};


//---------------------------------------------------------------------------
// return values as tjs_error
//---------------------------------------------------------------------------
#define TJS_E_MEMBERNOTFOUND		(-1001)
#define TJS_E_NOTIMPL				(-1002)
#define TJS_E_INVALIDPARAM			(-1003)
#define TJS_E_BADPARAMCOUNT			(-1004)
#define TJS_E_INVALIDTYPE			(-1005)
#define TJS_E_INVALIDOBJECT			(-1006)
#define TJS_E_ACCESSDENYED			(-1007)
#define TJS_E_NATIVECLASSCRASH		(-1008)

#define TJS_S_TRUE					(1)
#define TJS_S_FALSE					(2)

#define TJS_S_OK                    (0)
#define TJS_E_FAIL					(-1)

#define TJS_FAILED(x)				((x)<0)
#define TJS_SUCCEEDED(x)			((x)>=0)






//---------------------------------------------------------------------------
// tTJSVariantOctet
//---------------------------------------------------------------------------

#pragma pack(push, 4)
struct tTJSVariantOctet_S
{
	tjs_uint Length;
	tjs_int RefCount;
	tjs_uint8 *Data;
};
#pragma pack(pop)


//---------------------------------------------------------------------------
// tTJSVariant_S
//---------------------------------------------------------------------------
#ifdef __BORLANDC__
	#pragma option push -b
#endif
enum tTJSVariantType
{
	tvtVoid,  // empty
	tvtObject,
	tvtString,
	tvtOctet,  // octet binary data
	tvtInteger,
	tvtReal
};
#ifdef __BORLANDC__
	#pragma option pop
#endif


#pragma pack(push, 4)
class iTJSDispatch2;
struct tTJSVariantClosure_S
{
	iTJSDispatch2 *Object;
	iTJSDispatch2 *ObjThis;
};
class tTJSVariantClosure;

class tTJSVariantString;
class tTJSVariantOctet;
struct tTJSVariant_S
{
	//---- data members -----------------------------------------------------

	#define tTJSVariant_BITCOPY(a,b) \
	{\
		*(tTJSVariant_S*)&(a) = *(tTJSVariant_S*)&(b); \
	}

	union
	{
		tTJSVariantClosure_S Object;
		tTVInteger Integer;
		tTVReal Real;
		tTJSVariantString *String;
		tTJSVariantOctet *Octet;
	};
	tTJSVariantType vt;
};
#pragma pack(pop)


//---------------------------------------------------------------------------
// tTJSVariantClosure
//---------------------------------------------------------------------------


void TJSThrowNullAccess();



class tTJSVariantClosure : public tTJSVariantClosure_S
{
	// tTJSVariantClosure does not provide any function of object lifetime
	// namagement. ( AddRef and Release are provided but tTJSVariantClosure
	// has no responsibility for them )

public:
	tTJSVariantClosure() {;} // note that default constructor does nothing 

	tTJSVariantClosure(iTJSDispatch2 *obj, iTJSDispatch2 *objthis = NULL)
	{ Object = obj, ObjThis = objthis; }

	iTJSDispatch2 * SelectObjectNoAddRef()
		{ return ObjThis ? ObjThis : Object; }

public:

	bool operator == (const tTJSVariantClosure &rhs)
	{
		return Object == rhs.Object && ObjThis == rhs.ObjThis;
	}

	bool operator != (const tTJSVariantClosure &rhs)
	{
		return ! this->operator ==(rhs);
	}


	void AddRef()
	{
		if(Object) Object->AddRef();
		if(ObjThis) ObjThis->AddRef();
	}

	void Release()
	{
		if(Object) Object->Release();
		if(ObjThis) ObjThis->Release();
	}


	tjs_error
	FuncCall(tjs_uint32 flag, const tjs_char * membername, tjs_uint32 *hint,
		tTJSVariant *result,
		tjs_int numparams, tTJSVariant **param, iTJSDispatch2 *objthis) const
	{
		if(!Object) TJSThrowNullAccess();
		return Object->FuncCall(flag, membername, hint, result, numparams, param,
			ObjThis?ObjThis:(objthis?objthis:Object));
	}

	tjs_error
	FuncCallByNum(tjs_uint32 flag, tjs_int num, tTJSVariant *result,
		tjs_int numparams, tTJSVariant **param, iTJSDispatch2 *objthis) const
	{
		if(!Object) TJSThrowNullAccess();
		return Object->FuncCallByNum(flag, num, result, numparams, param,
			ObjThis?ObjThis:(objthis?objthis:Object));
	}

	tjs_error
	PropGet(tjs_uint32 flag, const tjs_char * membername, tjs_uint32 *hint,
		tTJSVariant *result,
		iTJSDispatch2 *objthis) const
	{
		if(!Object) TJSThrowNullAccess();
		return Object->PropGet(flag, membername, hint, result,
			ObjThis?ObjThis:(objthis?objthis:Object));
	}

	tjs_error
	PropGetByNum(tjs_uint32 flag, tjs_int num, tTJSVariant *result,
		iTJSDispatch2 *objthis) const
	{
		if(!Object) TJSThrowNullAccess();
		return Object->PropGetByNum(flag, num, result,
			ObjThis?ObjThis:(objthis?objthis:Object));
	}

	tjs_error
	PropSet(tjs_uint32 flag, const tjs_char *membername, tjs_uint32 *hint,
		const tTJSVariant *param,
		iTJSDispatch2 *objthis) const
	{
		if(!Object) TJSThrowNullAccess();
		return Object->PropSet(flag, membername, hint, param,
			ObjThis?ObjThis:(objthis?objthis:Object));
	}

	tjs_error
	PropSetByNum(tjs_uint32 flag, tjs_int num, const tTJSVariant *param,
		iTJSDispatch2 *objthis) const
	{
		if(!Object) TJSThrowNullAccess();
		return Object->PropSetByNum(flag, num, param,
			ObjThis?ObjThis:(objthis?objthis:Object));
	}

	tjs_error
	GetCount(tjs_int *result, const tjs_char *membername, tjs_uint32 *hint,
		iTJSDispatch2 *objthis) const
	{
		if(!Object) TJSThrowNullAccess();
		return Object->GetCount(result, membername, hint,
			ObjThis?ObjThis:(objthis?objthis:Object));
	}

	tjs_error
	GetCountByNum(tjs_int *result, tjs_int num, iTJSDispatch2 *objthis) const
	{
		if(!Object) TJSThrowNullAccess();
		return Object->GetCountByNum(result, num,
			ObjThis?ObjThis:(objthis?objthis:Object));
	}

//	HRESUT
//	Reserved1()
//	HRESUT
//	Reserved2()

	tjs_error
	DeleteMember(tjs_uint32 flag, const tjs_char *membername, tjs_uint32 *hint,
		iTJSDispatch2 *objthis) const
	{
		if(!Object) TJSThrowNullAccess();
		return Object->DeleteMember(flag, membername, hint,
			ObjThis?ObjThis:(objthis?objthis:Object));
	}

	tjs_error
	DeleteMemberByNum(tjs_uint32 flag, tjs_int num, iTJSDispatch2 *objthis) const
	{
		if(!Object) TJSThrowNullAccess();
		return Object->DeleteMemberByNum(flag, num,
			ObjThis?ObjThis:(objthis?objthis:Object));
	}

	tjs_error
	Invalidate(tjs_uint32 flag, const tjs_char *membername, tjs_uint32 *hint,
		iTJSDispatch2 *objthis) const
	{
		if(!Object) TJSThrowNullAccess();
		return Object->Invalidate(flag, membername, hint,
			ObjThis?ObjThis:(objthis?objthis:Object));
	}

	tjs_error
	InvalidateByNum(tjs_uint32 flag, tjs_int num, iTJSDispatch2 *objthis) const
	{
		if(!Object) TJSThrowNullAccess();
		return Object->InvalidateByNum(flag, num,
			ObjThis?ObjThis:(objthis?objthis:Object));
	}

	tjs_error
	IsValid(tjs_uint32 flag, const tjs_char *membername, tjs_uint32 *hint,
		iTJSDispatch2 *objthis) const
	{
		if(!Object) TJSThrowNullAccess();
		return Object->IsValid(flag, membername, hint,
			ObjThis?ObjThis:(objthis?objthis:Object));
	}

	tjs_error
	IsValidByNum(tjs_uint32 flag, tjs_int num, iTJSDispatch2 *objthis) const
	{
		if(!Object) TJSThrowNullAccess();
		return Object->IsValidByNum(flag, num,
			ObjThis?ObjThis:(objthis?objthis:Object));
	}

	tjs_error
	CreateNew(tjs_uint32 flag, const tjs_char * membername, tjs_uint32 *hint,
		iTJSDispatch2 **result,
		tjs_int numparams, tTJSVariant **param,	iTJSDispatch2 *objthis) const
	{
		if(!Object) TJSThrowNullAccess();
		return Object->CreateNew(flag, membername, hint, result, numparams,
			param, ObjThis?ObjThis:(objthis?objthis:Object));
	}

	tjs_error
	CreateNewByNum(tjs_uint32 flag, tjs_int num, iTJSDispatch2 **result,
		tjs_int numparams, tTJSVariant **param,	iTJSDispatch2 *objthis) const
	{
		if(!Object) TJSThrowNullAccess();
		return Object->CreateNewByNum(flag, num, result, numparams, param,
			ObjThis?ObjThis:(objthis?objthis:Object));
	}

	tjs_error
	GetSuperClass(tjs_uint32 flag, iTJSDispatch2 **result,
		iTJSDispatch2 *objthis) const
	{
		if(!Object) TJSThrowNullAccess();
		return Object->GetSuperClass(flag, result,
			ObjThis?ObjThis:(objthis?objthis:Object));
	}

	tjs_error
	IsInstanceOf(tjs_uint32 flag, const tjs_char *membername, tjs_uint32 *hint,
		const tjs_char *classname, iTJSDispatch2 *objthis) const
	{
		if(!Object) TJSThrowNullAccess();
		return Object->IsInstanceOf(flag, membername, hint, classname,
			ObjThis?ObjThis:(objthis?objthis:Object));
	}

	tjs_error
	IsInstanceOf(tjs_uint32 flag, tjs_int num, tjs_char *classname,
		iTJSDispatch2 *objthis) const
	{
		if(!Object) TJSThrowNullAccess();
		return Object->IsInstanceOfByNum(flag, num, classname,
			ObjThis?ObjThis:(objthis?objthis:Object));
	}

	tjs_error
	Operation(tjs_uint32 flag, const tjs_char *membername, tjs_uint32 *hint,
		tTJSVariant *result, const tTJSVariant *param,	iTJSDispatch2 *objthis) const
	{
		if(!Object) TJSThrowNullAccess();
		return Object->Operation(flag, membername, hint, result, param,
			ObjThis?ObjThis:(objthis?objthis:Object));
	}

	tjs_error
	OperationByNum(tjs_uint32 flag, tjs_int num, tTJSVariant *result,
		const tTJSVariant *param,	iTJSDispatch2 *objthis) const
	{
		if(!Object) TJSThrowNullAccess();
		return Object->OperationByNum(flag, num, result, param,
			ObjThis?ObjThis:(objthis?objthis:Object));
	}
};






//---------------------------------------------------------------------------
// iTVPStorageMedia
//---------------------------------------------------------------------------
/*
	abstract class for managing media ( like file: http: etc.)
*/


	// for plug-in
class tTJSBinaryStream;


//---------------------------------------------------------------------------
class iTVPStorageLister // callback class for GetListAt
{
public:
	virtual void Add(const ttstr &file) = 0;
};
//---------------------------------------------------------------------------
class iTVPStorageMedia
{
public:
	virtual void AddRef() = 0;
	virtual void Release() = 0;

	virtual ttstr GetName() = 0;
		// returns media name like "file", "http" etc.

//	virtual ttstr IsCaseSensitive() = 0;
		// returns whether this media is case sensitive or not

	virtual void NormalizeDomainName(ttstr &name) = 0;
		// normalize domain name according with the media's rule

	virtual void NormalizePathName(ttstr &name) = 0;
		// normalize path name according with the media's rule

	// "name" below is normalized but does not contain media, eg.
	// not "media://domain/path" but "domain/path"

	virtual bool CheckExistentStorage(const ttstr &name) = 0;
		// check file existence

	virtual tTJSBinaryStream * Open(const ttstr & name, tjs_uint32 flags) = 0;
		// open a storage and return a tTJSBinaryStream instance.
		// name does not contain in-archive storage name but
		// is normalized.

	virtual void GetListAt(const ttstr &name, iTVPStorageLister * lister) = 0;
		// list files at given place

	virtual ttstr GetLocallyAccessibleName(const ttstr &name) = 0;
		// basically the same as above,
		// check wether given name is easily accessible from local OS filesystem.
		// if true, returns local OS native name. otherwise returns an empty string.
};
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
// Extraction filter related
//---------------------------------------------------------------------------
#pragma pack(push, 4)
struct tTVPXP3ExtractionFilterInfo
{
	const tjs_uint SizeOfSelf; // structure size of tTVPXP3ExtractionFilterInfo itself
	const tjs_uint64 Offset; // offset of the buffer data in uncompressed stream position
	void * Buffer; // target data buffer
	const tjs_uint BufferSize; // buffer size in bytes pointed by "Buffer"
	const tjs_uint32 FileHash; // hash value of the file (since inteface v2)

	tTVPXP3ExtractionFilterInfo(tjs_uint64 offset, void *buffer,
		tjs_uint buffersize, tjs_uint32 filehash) :
			Offset(offset), Buffer(buffer), BufferSize(buffersize),
			FileHash(filehash),
			SizeOfSelf(sizeof(tTVPXP3ExtractionFilterInfo)) {;}
};
#pragma pack(pop)

typedef void (TJS_INTF_METHOD * tTVPXP3ArchiveExtractionFilter)(
	tTVPXP3ExtractionFilterInfo *info);




//---------------------------------------------------------------------------
// Script Event Related
//---------------------------------------------------------------------------
#define TVP_EPT_POST			0x00  // normal post, simply add to queue
#define TVP_EPT_REMOVE_POST		0x01
		// remove event in pending queue that has same target, source, tag and
		// name before post
#define TVP_EPT_IMMEDIATE		0x02
		// the event will be delivered immediately

#define TVP_EPT_DISCARDABLE		0x10
		// the event can be discarded when event system is disabled

#define TVP_EPT_EXCLUSIVE		0x20
		// (with TVP_EPT_POST only)
		// the event is given priority and other posted events are not processed
		// until the exclusive event is processed.

#define TVP_EPT_METHOD_MASK		0x0f


class tTVPContinuousEventCallbackIntf // callback class for continuous event delivering
{
public:
	virtual void TJS_INTF_METHOD OnContinuousCallback(tjs_uint64 tick) = 0;
};


//---------------------------------------------------------------------------
// System "Compact" Event related
//---------------------------------------------------------------------------
#define TVP_COMPACT_LEVEL_IDLE        5  // the application is in idle state
#define TVP_COMPACT_LEVEL_DEACTIVATE 10  // the application had been deactivated
#define TVP_COMPACT_LEVEL_MINIMIZE   15  // the application had been minimized
#define TVP_COMPACT_LEVEL_MAX       100  // strongest level, should clear all caches
//---------------------------------------------------------------------------
class tTVPCompactEventCallbackIntf // callback class for compact event delivering
{
public:
	virtual void TJS_INTF_METHOD OnCompact(tjs_int level) = 0;
};


//---------------------------------------------------------------------------
// AsyncTrigger related
//---------------------------------------------------------------------------
enum tTVPAsyncTriggerMode
{
	atmNormal, atmExclusive, atmAtIdle
};


//---------------------------------------------------------------------------
// iTVPFunctionExporter, exporting main module's functions
//---------------------------------------------------------------------------
struct iTVPFunctionExporter
{
	virtual bool TJS_INTF_METHOD QueryFunctions(const tjs_char **name, void **function,
		tjs_uint count) = 0;
	virtual bool TJS_INTF_METHOD QueryFunctionsByNarrowString(const char **name,
		void **function, tjs_uint count) = 0;
};
//---------------------------------------------------------------------------





//---------------------------------------------------------------------------
// this stub includes exported function from Independent implementation of
// MD5 (RFC 1321) by Aladdin Enterprises.
//---------------------------------------------------------------------------
// TVP_md5_init, TVP_md5_append, TVP_md5_finish are exported
typedef tjs_uint8 TVP_md5_state_t[4*2+4*4+64]; // md5_state_t
//---------------------------------------------------------------------------




//---------------------------------------------------------------------------
// tTJSBinaryStream constants
//---------------------------------------------------------------------------
#define TJS_BS_READ 0
#define TJS_BS_WRITE 1
#define TJS_BS_APPEND 2
#define TJS_BS_UPDATE 3

#define TJS_BS_ACCESS_MASK 0x0f

#define TJS_BS_SEEK_SET 0
#define TJS_BS_SEEK_CUR 1
#define TJS_BS_SEEK_END 2
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
// tTJSDispatch
//---------------------------------------------------------------------------
/*
	tTJSDispatch is a base class that implements iTJSDispatch2, and every methods.
	most methods are maked as simply returning "TJS_E_NOTIMPL";
	methods, those access the object by index, call another methods that access
	the object by string.
*/
/*
#define TJS_SELECT_OBJTHIS(__closure__, __override__) \
	((__closure__).ObjThis?((__override__)?(__override__):(__closure__).ObjThis):(__override__))
*/
#define TJS_SELECT_OBJTHIS(__closure__, __override__) \
	((__closure__).ObjThis?(__closure__).ObjThis:(__override__))

class tTJSDispatch : public iTJSDispatch2
{
	virtual void BeforeDestruction(void) {;}
	bool BeforeDestructionCalled;
		// BeforeDestruction will be certainly called before object destruction
private:
	tjs_uint RefCount;
public:
	tTJSDispatch();
	virtual ~tTJSDispatch();

//	bool DestructionTrace;

public:
	tjs_uint TJS_INTF_METHOD  AddRef(void);
	tjs_uint TJS_INTF_METHOD  Release(void);

protected:
	tjs_uint GetRefCount() { return RefCount; }

public:
	tjs_error TJS_INTF_METHOD
	FuncCall(
		tjs_uint32 flag,
		const tjs_char * membername,
		tjs_uint32 *hint,
		tTJSVariant *result,
		tjs_int numparams,
		tTJSVariant **param,
		iTJSDispatch2 *objthis
		)
	{
		return membername?TJS_E_MEMBERNOTFOUND:TJS_E_NOTIMPL;
	}

	tjs_error TJS_INTF_METHOD
	FuncCallByNum(
		tjs_uint32 flag,
		tjs_int num,
		tTJSVariant *result,
		tjs_int numparams,
		tTJSVariant **param,
		iTJSDispatch2 *objthis
		);

	tjs_error TJS_INTF_METHOD
	PropGet(
		tjs_uint32 flag,
		const tjs_char * membername,
		tjs_uint32 *hint,
		tTJSVariant *result,
		iTJSDispatch2 *objthis
		)
	{
		return membername?TJS_E_MEMBERNOTFOUND:TJS_E_NOTIMPL;
	}

	tjs_error TJS_INTF_METHOD
	PropGetByNum(
		tjs_uint32 flag,
		tjs_int num,
		tTJSVariant *result,
		iTJSDispatch2 *objthis
		);

	tjs_error TJS_INTF_METHOD
	PropSet(
		tjs_uint32 flag,
		const tjs_char *membername,
		tjs_uint32 *hint,
		const tTJSVariant *param,
		iTJSDispatch2 *objthis
		)
	{
		return membername?TJS_E_MEMBERNOTFOUND:TJS_E_NOTIMPL;
	}

	tjs_error TJS_INTF_METHOD
	PropSetByNum(
		tjs_uint32 flag,
		tjs_int num,
		const tTJSVariant *param,
		iTJSDispatch2 *objthis
		);
	
	tjs_error TJS_INTF_METHOD
	GetCount(
		tjs_int *result,
		const tjs_char *membername,
		tjs_uint32 *hint,
		iTJSDispatch2 *objthis
		)
	{
		return TJS_E_NOTIMPL;
	}

	tjs_error TJS_INTF_METHOD
	GetCountByNum(
		tjs_int *result,
		tjs_int num,
		iTJSDispatch2 *objthis
		);

	tjs_error TJS_INTF_METHOD
	Reserved1()
	{
		return TJS_E_NOTIMPL;
	}

	tjs_error TJS_INTF_METHOD
	Reserved2()
	{
		return TJS_E_NOTIMPL;
	}

	tjs_error TJS_INTF_METHOD
	DeleteMember(
		tjs_uint32 flag,
		const tjs_char *membername,
		tjs_uint32 *hint,
		iTJSDispatch2 *objthis
		)
	{
		return membername?TJS_E_MEMBERNOTFOUND:TJS_E_NOTIMPL;
	}

	tjs_error TJS_INTF_METHOD
	DeleteMemberByNum(
		tjs_uint32 flag,
		tjs_int num,
		iTJSDispatch2 *objthis
		);

	tjs_error TJS_INTF_METHOD
	Invalidate(
		tjs_uint32 flag,
		const tjs_char *membername,
		tjs_uint32 *hint,
		iTJSDispatch2 *objthis
		)
	{
		return membername?TJS_E_MEMBERNOTFOUND:TJS_E_NOTIMPL;
	}

	tjs_error TJS_INTF_METHOD
	InvalidateByNum(
		tjs_uint32 flag,
		tjs_int num,
		iTJSDispatch2 *objthis
		);

	tjs_error TJS_INTF_METHOD
	IsValid(
		tjs_uint32 flag,
		const tjs_char *membername,
		tjs_uint32 *hint,
		iTJSDispatch2 *objthis
		)
	{
		return membername?TJS_E_MEMBERNOTFOUND:TJS_E_NOTIMPL;
	}

	tjs_error TJS_INTF_METHOD
	IsValidByNum(
		tjs_uint32 flag,
		tjs_int num,
		iTJSDispatch2 *objthis
		);

	tjs_error TJS_INTF_METHOD
	CreateNew(
		tjs_uint32 flag,
		const tjs_char * membername,
		tjs_uint32 *hint,
		iTJSDispatch2 **result,
		tjs_int numparams,
		tTJSVariant **param,
		iTJSDispatch2 *objthis
		)
	{
		return membername?TJS_E_MEMBERNOTFOUND:TJS_E_NOTIMPL;
	}

	tjs_error TJS_INTF_METHOD
	CreateNewByNum(
		tjs_uint32 flag,
		tjs_int num,
		iTJSDispatch2 **result,
		tjs_int numparams,
		tTJSVariant **param,
		iTJSDispatch2 *objthis
		);

	tjs_error TJS_INTF_METHOD
	GetSuperClass(
		tjs_uint32 flag,
		iTJSDispatch2 **result,
		iTJSDispatch2 *objthis
		)
	{
		return TJS_E_NOTIMPL;
	}


	tjs_error TJS_INTF_METHOD
	IsInstanceOf(
		tjs_uint32 flag,
		const tjs_char *membername,
		tjs_uint32 *hint,
		const tjs_char *classname,
		iTJSDispatch2 *objthis
		)
	{
		return membername?TJS_E_MEMBERNOTFOUND:TJS_E_NOTIMPL;
	}

	tjs_error TJS_INTF_METHOD
	IsInstanceOfByNum(
		tjs_uint32 flag,
		tjs_int num,
		const tjs_char *classname,
		iTJSDispatch2 *objthis
		);

	tjs_error TJS_INTF_METHOD
	Operation(
		tjs_uint32 flag,
		const tjs_char *membername,
		tjs_uint32 *hint,
		tTJSVariant *result,
		const tTJSVariant *param,
		iTJSDispatch2 *objthis
		);

	tjs_error TJS_INTF_METHOD
	OperationByNum(
		tjs_uint32 flag,
		tjs_int num,
		tTJSVariant *result,
		const tTJSVariant *param,
		iTJSDispatch2 *objthis
		);


	tjs_error TJS_INTF_METHOD
	NativeInstanceSupport(
		tjs_uint32 flag,
		tjs_int32 classid,
		iTJSNativeInstance **pointer
		)
	{
		return TJS_E_NOTIMPL;
	}

	tjs_error TJS_INTF_METHOD
	ClassInstanceInfo( 
		tjs_uint32 flag,
		tjs_uint num,
		tTJSVariant *value
		)
	{
		return TJS_E_NOTIMPL;
	}

};
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
// KAG Parser debug level
//---------------------------------------------------------------------------
enum tTVPKAGDebugLevel
{
	tkdlNone, // none is reported
	tkdlSimple, // simple report
	tkdlVerbose // complete report ( verbose )
};


//---------------------------------------------------------------------------
// IDirectSound former declaration
//---------------------------------------------------------------------------
class IDirectSound;




//---------------------------------------------------------------------------
// font ralated constants
//---------------------------------------------------------------------------
#define TVP_TF_ITALIC    0x01
#define TVP_TF_BOLD      0x02
#define TVP_TF_UNDERLINE 0x04
#define TVP_TF_STRIKEOUT 0x08


//---------------------------------------------------------------------------
#define TVP_FSF_FIXEDPITCH   1      // fsfFixedPitch
#define TVP_FSF_SAMECHARSET  2      // fsfSameCharSet
#define TVP_FSF_NOVERTICAL   4      // fsfNoVertical
#define TVP_FSF_TRUETYPEONLY 8      // fsfTrueTypeOnly
#define TVP_FSF_USEFONTFACE  0x100  // fsfUseFontFace



//---------------------------------------------------------------------------
// mouse button
//---------------------------------------------------------------------------
enum tTVPMouseButton
{
	mbLeft,
	mbRight,
	mbMiddle
};



//---------------------------------------------------------------------------
// IME modes : comes from VCL's TImeMode
//---------------------------------------------------------------------------
enum tTVPImeMode
{
	imDisable,
	imClose,
	imOpen,
	imDontCare,
	imSAlpha,
	imAlpha,
	imHira,
	imSKata,
	imKata,
	imChinese,
	imSHanguel,
	imHanguel
};


//---------------------------------------------------------------------------
// shift state
//---------------------------------------------------------------------------
#define TVP_SS_SHIFT   0x01
#define TVP_SS_ALT     0x02
#define TVP_SS_CTRL    0x04
#define TVP_SS_LEFT    0x08
#define TVP_SS_RIGHT   0x10
#define TVP_SS_MIDDLE  0x20
#define TVP_SS_DOUBLE  0x40
#define TVP_SS_REPEAT  0x80


inline bool TVPIsAnyMouseButtonPressedInShiftStateFlags(tjs_uint32 state)
{ return (state & 
	(TVP_SS_LEFT | TVP_SS_RIGHT | TVP_SS_MIDDLE | TVP_SS_DOUBLE)) != 0; }



//---------------------------------------------------------------------------
// JoyPad virtual key codes
//---------------------------------------------------------------------------
// These VKs are KIRIKIRI specific. Not widely used.
#define VK_PAD_FIRST	0xB0   // first PAD related key code
#define VK_PADLEFT		0xB5
#define VK_PADUP		0xB6
#define VK_PADRIGHT		0xB7
#define VK_PADDOWN		0xB8
#define VK_PAD1			0xC0
#define VK_PAD2			0xC1
#define VK_PAD3			0xC2
#define VK_PAD4			0xC3
#define VK_PAD5			0xC4
#define VK_PAD6			0xC5
#define VK_PAD7			0xC6
#define VK_PAD8			0xC7
#define VK_PAD9			0xC8
#define VK_PAD10		0xC9
#define VK_PADANY		0xDF   // returns whether any one of pad buttons are pressed,
							   // in System.getKeyState
#define VK_PAD_LAST		0xDF   // last PAD related key code
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
// tTVPBBBltMethod and tTVPBBStretchType
//---------------------------------------------------------------------------
enum tTVPBBBltMethod
{
	bmCopy,
	bmCopyOnAlpha,
	bmAlpha,
	bmAlphaOnAlpha,
	bmAdd,
	bmSub,
	bmMul,
	bmDodge,
	bmDarken,
	bmLighten,
	bmScreen,
	bmAddAlpha,
	bmAddAlphaOnAddAlpha,
	bmAddAlphaOnAlpha,
	bmAlphaOnAddAlpha,
	bmCopyOnAddAlpha
};
enum tTVPBBStretchType
{
	stNearest = 0, // primal method; nearest neighbor method
	stFastLinear = 1, // fast linear interpolation (does not have so much precision)
	stLinear = 2,  // (strict) linear interpolation
	stCubic = 3    // cubic interpolation
};


//---------------------------------------------------------------------------
// drawn face types
//---------------------------------------------------------------------------
enum tTVPDrawFace
{
	dfBoth  = 0,
	dfAlpha = 0,
	dfAddAlpha = 4,
	dfMain = 1,
	dfOpaque = 1,
	dfMask = 2,
	dfProvince = 3,
	dfAuto = 128 // face is chosen automatically from the layer type
};
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
// alias to blending types
//---------------------------------------------------------------------------
enum tTVPBlendOperationMode
{
	omAdditive = ltAdditive,
	omSubtractive = ltSubtractive,
	omMultiplicative = ltMultiplicative,
	omDodge = ltDodge,
	omDarken = ltDarken,
	omLighten = ltLighten,
	omScreen = ltScreen,
	omAlpha = ltTransparent,
	omAddAlpha = ltAddAlpha,
	omOpaque = ltCoverRect
};
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
// layer hit test type
//---------------------------------------------------------------------------
enum tTVPHitType {htMask, htProvince};
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
// color key types
//---------------------------------------------------------------------------
#define TVP_clAdapt			((tjs_uint32)(0x1ffffff)
#define TVP_clNone			((tjs_uint32)(0x2ffffff)
#define TVP_Is_clPalIdx(n)	((tjs_uint32)(((n)&0xff000000) == 0x3000000)
#define TVP_get_clPalIdx(n) ((tjs_uint32)((n)&0xff)
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
// Window related constants
//---------------------------------------------------------------------------
enum tTVPUpdateType
{
	utNormal, // only needed region
	utEntire // entire of window
};
//---------------------------------------------------------------------------
enum tTVPBorderStyle
{
	bsNone=0,  bsSingle=1,  bsSizeable=2,  bsDialog=3,  bsToolWindow=4,
	bsSizeToolWin =5
};
//---------------------------------------------------------------------------
enum tTVPMouseCursorState
{
	mcsVisible, // the mouse cursor is visible
	mcsTempHidden, // the mouse cursor is temporarily hidden
	mcsHidden // the mouse cursor is invisible
};
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
// window message receivers
//---------------------------------------------------------------------------
enum tTVPWMRRegMode { wrmRegister=0, wrmUnregister=1 };
#pragma pack(push, 4)
struct tTVPWindowMessage
{
	unsigned int Msg; // window message
	int WParam;  // WPARAM
	int LParam;  // LPARAM
	int Result;  // result
};
#pragma pack(pop)
typedef bool (__stdcall * tTVPWindowMessageReceiver)
	(void *userdata, tTVPWindowMessage *Message);

#define TVP_WM_DETACH (WM_USER+106)  // before re-generating the window
#define TVP_WM_ATTACH (WM_USER+107)  // after re-generating the window




//---------------------------------------------------------------------------
// scroll transition handler
//---------------------------------------------------------------------------
enum tTVPScrollTransFrom
{
	sttLeft, sttTop, sttRight, sttBottom
};
enum tTVPScrollTransStay
{
	ststNoStay, ststStayDest, ststStaySrc
};


//---------------------------------------------------------------------------
// layer / blending types
//---------------------------------------------------------------------------
enum tTVPLayerType
{
	ltBinder = 0,
	ltCoverRect = 1,
	ltOpaque = 1, // the same as ltCoverRect
	ltTransparent = 2, // alpha blend
	ltAlpha = 2, // the same as ltTransparent
	ltAdditive = 3,
	ltSubtractive = 4,
	ltMultiplicative = 5,
	ltEffect = 6,
	ltFilter = 7,
	ltDodge = 8,
	ltDarken = 9,
	ltLighten = 10,
	ltScreen = 11,
	ltAddAlpha = 12 // additive alpha blend
};
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
// tTVPTransType
//---------------------------------------------------------------------------
// transition type
#ifdef __BORLANDC__
	#pragma option push -b
#endif
enum tTVPTransType
{
	ttSimple, // transition using only one(self) layer ( eg. simple fading )
	ttExchange // transition using two layer ( eg. cross fading )
};
#ifdef __BORLANDC__
	#pragma option pop
#endif
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
// tTVPTransUpdateType
//---------------------------------------------------------------------------
// transition update type
#ifdef __BORLANDC__
	#pragma option push -b
#endif
enum tTVPTransUpdateType
{
	tutDivisibleFade,
	tutDivisible,
	tutGiveUpdate
};
#ifdef __BORLANDC__
	#pragma option pop
#endif
/*
	there are two types of transition update method;
	tutDivisibleFade, tutDivisible and tutGiveUpdate.

	tutDivisibleFade
		used when the transition processing is region-divisible and
		the transition updates entire area of the layer.
		update area is always given by iTVPTransHandler::Process caller.
		handler must use only given area of the source bitmap on each
		callbacking.

	tutDivisible
		same as tutDivisibleFade, except for its usage of source area.
		handler can use any area of the source bitmap.
		this will somewhat slower than tutDivisibleFade.

	tutGiveUpdate
		used when the transition processing is not region-divisible or
		the transition updates only some small regions rather than entire
		area.
		update area is given by callee of iTVPTransHandler::Process, 
		via iTVPLayerUpdater interface.
*/
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
// iTVPScanLineProvider
//---------------------------------------------------------------------------
// provides layer scanline
class iTVPScanLineProvider
{
public:
	virtual tjs_error TJS_INTF_METHOD AddRef() = 0;
	virtual tjs_error TJS_INTF_METHOD Release() = 0;
		// call "Release" when done with this object

	virtual tjs_error TJS_INTF_METHOD GetWidth(/*out*/tjs_int *width) = 0;
		// return image width
	virtual tjs_error TJS_INTF_METHOD GetHeight(/*out*/tjs_int *height) = 0;
		// return image height
	virtual tjs_error TJS_INTF_METHOD GetPixelFormat(/*out*/tjs_int *bpp) = 0;
		// return image bit depth
	virtual tjs_error TJS_INTF_METHOD GetPitchBytes(/*out*/tjs_int *pitch) = 0;
		// return image bitmap data width in bytes ( offset to next down line )
	virtual tjs_error TJS_INTF_METHOD GetScanLine(/*in*/tjs_int line,
			/*out*/const void ** scanline) = 0;
		// return image pixel scan line pointer
	virtual tjs_error TJS_INTF_METHOD GetScanLineForWrite(/*in*/tjs_int line,
			/*out*/void ** scanline) = 0;
		// return image pixel scan line pointer for writing
};
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
// iTVPSimpleOptionProvider
//---------------------------------------------------------------------------
// provides option set
class iTVPSimpleOptionProvider
{
public:
	virtual tjs_error TJS_INTF_METHOD AddRef() = 0;
	virtual tjs_error TJS_INTF_METHOD Release() = 0;
		// call this when done with this object

	virtual tjs_error TJS_INTF_METHOD GetAsNumber(
			/*in*/const tjs_char *name, /*out*/tjs_int64 *value) = 0;
		// retrieve option as a number.
	virtual tjs_error TJS_INTF_METHOD GetAsString(
			/*in*/const tjs_char *name, /*out*/const tjs_char **out) = 0;
		// retrieve option as a string.
		// note that you must use the returned string as an one time string
		// pointer; you cannot hold its pointer and/or use it later.

	virtual tjs_error TJS_INTF_METHOD GetValue(
			/*in*/const tjs_char *name, /*out*/tTJSVariant *dest) = 0;
		// retrieve option as a tTJSVariant.

	virtual tjs_error TJS_INTF_METHOD Reserved2() = 0;

	virtual tjs_error TJS_INTF_METHOD GetDispatchObject(iTJSDispatch2 **dsp)
		 = 0;
		// retrieve internal dispatch object ( if exists )
};
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
// iTVPSimpleImageProvider
//---------------------------------------------------------------------------
// image loader
class iTVPSimpleImageProvider
{
public:
	virtual tjs_error TJS_INTF_METHOD LoadImage(
			/*in*/const tjs_char *name, /*in*/tjs_int bpp,
			/*in*/tjs_uint32 key, 
			/*in*/tjs_uint w,
			/*in*/tjs_uint h,
			/*out*/iTVPScanLineProvider ** scpro) = 0;
		// load an image.
		// returned image be an 8bpp bitmap when bpp == 8, otherwise
		// 32bpp.
		// key is a color key. pass 0x02ffffff for not to apply color key.
		// you must release "scpro" when you done with it.
		// w and h are desired size of the image. if the actual size is smaller
		// than these, the image is to be tiled. give 0, 0 to obtain original
		// sized image.
};
//---------------------------------------------------------------------------




//---------------------------------------------------------------------------
// iTVPLayerUpdater
//---------------------------------------------------------------------------
// layer update region notification interface
class iTVPLayerUpdater
{
public:
	virtual tjs_error TJS_INTF_METHOD UpdateRect(tjs_int left,
		tjs_int top, tjs_int right, tjs_int bottom);
		// notify that the layer image had been changed.
};
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
// tTVPDivisibleData
//---------------------------------------------------------------------------
// structure used by iTVPDivisibleTransHandler::Process
#ifdef _WIN32
#pragma pack(push, 4)
#endif

struct tTVPDivisibleData
{
	/*const*/tjs_int Left; // processing rectangle left
	/*const*/tjs_int Top; // processing rectangle top
	/*const*/tjs_int Width; // processing rectangle width
	/*const*/tjs_int Height; // processing rectangle height
	iTVPScanLineProvider *Dest; // destination image
	tjs_int DestLeft; // destination image rectangle's left
	tjs_int DestTop; // destination image rectangle's top
	/*const*/iTVPScanLineProvider *Src1; // source 1 (self layer image)
	/*const*/tjs_int Src1Left; // source 1 image rectangle's left
	/*const*/tjs_int Src1Top; // source 1 image rectangle's top
	/*const*/iTVPScanLineProvider *Src2; // source 2 (other layer image)
	/*const*/tjs_int Src2Left; // source 2 image rectangle's left
	/*const*/tjs_int Src2Top; // source 2 image rectangle's top
};
/* note that "Src2" will be null when transition type is ttSimple. */
/* Src1Left, Src1Top, Src2Left, Src2Top are not used when the transition is
	tutDivisible. */

#ifdef _WIN32
#pragma pack(pop)
#endif



//---------------------------------------------------------------------------
// iTVPBaseTransHandler
//---------------------------------------------------------------------------
class iTVPBaseTransHandler
{
public:
	virtual tjs_error TJS_INTF_METHOD AddRef() = 0;
	virtual tjs_error TJS_INTF_METHOD Release() = 0;

	virtual tjs_error TJS_INTF_METHOD SetOption(
			/*in*/iTVPSimpleOptionProvider *options // option provider
		) = 0;
		// Set option for current processing transition
};
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
// iTVPDivisibleTransHandler
//---------------------------------------------------------------------------
class iTVPDivisibleTransHandler : public iTVPBaseTransHandler
{
public:
	virtual tjs_error TJS_INTF_METHOD StartProcess(
			/*in*/tjs_uint64 tick) = 0;
		// called before one processing time unit.
		// expected return values are:
		// TJS_S_TRUE: continue processing
		// TJS_S_FALSE: break processing

	virtual tjs_error TJS_INTF_METHOD EndProcess() = 0;
		// called after one processing time unit.
		// expected return values are:
		// TJS_S_TRUE: continue processing
		// TJS_S_FALSE: break processing

	virtual tjs_error TJS_INTF_METHOD Process(
			/*in,out*/tTVPDivisibleData *data) = 0;
		// called during StartProcess and EndProcess per an update rectangle.
		// the handler processes given rectangle and put result image to
		// "Dest"( in tTVPDivisibleData ).
		// given "Dest" is a internal image buffer, but callee can change
		// the "Dest" pointer to Src1 or Src2. Also DestLeft and DestTop can
		// be changed to point destination image part.

	virtual tjs_error TJS_INTF_METHOD MakeFinalImage(
			/*in,out*/iTVPScanLineProvider ** dest, // destination
			/*in*/iTVPScanLineProvider * src1, // source 1
			/*in*/iTVPScanLineProvider * src2 // source 2
			) = 0;
		// will be called after StartProcess/EndProcess returns TJS_S_FALSE.
		// this function does not called in some occasions.
		// fill "dest" to make a final image.
		// dest can be set to either src1 or src2.
};
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
// iTVPGiveUpdateTransHandler
//---------------------------------------------------------------------------
class iTVPGiveUpdateTransHandler : public iTVPBaseTransHandler
{
public:
	virtual tjs_error TJS_INTF_METHOD Process(
			/*in*/tjs_uint64 tick, // tick count provided by the system in ms
			/*in*/iTVPLayerUpdater * updater, // layer updater object
			/*in*/iTVPScanLineProvider * dest, // destination
			/*in*/iTVPScanLineProvider * src1, // source 1
			/*in*/iTVPScanLineProvider * src2 // source 2
		) = 0;
	// process the transition.
	// callee must call updater->UpdateLayerRect when changing the layer image.
	// updater->UpdateLayerRect can be called more than once.
};
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
// iTVPTransHandlerProvider
//---------------------------------------------------------------------------
// transition handler provider abstract class
class iTVPTransHandlerProvider
{
public:
	virtual tjs_error TJS_INTF_METHOD AddRef() = 0;
	virtual tjs_error TJS_INTF_METHOD Release() = 0;

	virtual tjs_error TJS_INTF_METHOD GetName(
			/*out*/const tjs_char ** name) = 0;
		// return this transition name

	virtual tjs_error TJS_INTF_METHOD StartTransition(
			/*in*/iTVPSimpleOptionProvider *options, // option provider
			/*in*/iTVPSimpleImageProvider *imagepro, // image provider
			/*in*/tTVPLayerType layertype, // destination layer type
			/*in*/tjs_uint src1w, tjs_uint src1h, // source 1 size
			/*in*/tjs_uint src2w, tjs_uint src2h, // source 2 size
			/*out*/tTVPTransType *type, // transition type
			/*out*/tTVPTransUpdateType * updatetype, // update typwe
			/*out*/iTVPBaseTransHandler ** handler // transition handler
			) = 0;
		// start transition and return a handler.
		// "handler" is an object of iTVPDivisibleTransHandler when
		// updatetype is tutDivisibleFade or tutDivisible.
		// Otherwise is an object of iTVPGiveUpdateTransHandler ( cast to
		// each class to use it )
		// layertype is the destination layer type.
};
//---------------------------------------------------------------------------


#ifdef __cplusplus
 extern "C" {
#endif


#pragma pack(push, 4)
typedef struct
{
	/* structure used for adjustment of gamma levels */

	float RGamma; /* R gamma   ( 0.10 -- 1.00 -- 9.99) */
	tjs_int RFloor;   /* output floor value  ( 0 -- 255 ) */
	tjs_int RCeil;    /* output ceil value ( 0 -- 255 ) */
	float GGamma; /* G */
	tjs_int GFloor;
	tjs_int GCeil;
	float BGamma; /* B */
	tjs_int BFloor;
	tjs_int BCeil;
} tTVPGLGammaAdjustData;
#pragma pack(pop)


#pragma pack(push, 4)
typedef struct
{
	tjs_uint8 R[256];
	tjs_uint8 G[256];
	tjs_uint8 B[256];
} tTVPGLGammaAdjustTempData;
#pragma pack(pop)


#ifdef __cplusplus
 }
#endif


#define TVP_RGB2COLOR(r,g,b) ((((r)<<16) + ((g)<<8) + (b)) | 0xff000000)
#define TVP_RGBA2COLOR(r,g,b,a) \
	(((a)<<24) +  (((r)<<16) + ((g)<<8) + (b)))


//---------------------------------------------------------------------------
// CPU Types
//---------------------------------------------------------------------------


#define TVP_CPU_HAS_FPU 0x000010000
#define TVP_CPU_HAS_MMX 0x000020000
#define TVP_CPU_HAS_3DN 0x000040000
#define TVP_CPU_HAS_SSE 0x000080000
#define TVP_CPU_HAS_CMOV 0x000100000
#define TVP_CPU_HAS_E3DN 0x000200000
#define TVP_CPU_HAS_EMMX 0x000400000
#define TVP_CPU_HAS_SSE2 0x000800000
#define TVP_CPU_HAS_TSC 0x001000000
#define TVP_CPU_FEATURE_MASK 0x0ffff0000
#define TVP_CPU_IS_INTEL 0x000000010
#define TVP_CPU_IS_AMD 0x000000020
#define TVP_CPU_IS_IDT 0x000000030
#define TVP_CPU_IS_CYRIX 0x000000040
#define TVP_CPU_IS_NEXGEN 0x000000050
#define TVP_CPU_IS_RISE 0x000000060
#define TVP_CPU_IS_UMC 0x000000070
#define TVP_CPU_IS_TRANSMETA 0x000000080
#define TVP_CPU_IS_UNKNOWN 0x000000000
#define TVP_CPU_VENDOR_MASK 0x000000ff0
#define TVP_CPU_FAMILY_MASK 0x00000000f






































#ifdef __BORLANDC__
#pragma warn -8027
#endif

//---------------------------------------------------------------------------
// function import pointers
//---------------------------------------------------------------------------

extern void * TVPGetImportFuncPtr(const char *name);


extern void * TVPImportFuncPtr0;
extern void * TVPImportFuncPtr1;
extern void * TVPImportFuncPtr2;
extern void * TVPImportFuncPtr3;
extern void * TVPImportFuncPtr4;
extern void * TVPImportFuncPtr5;
extern void * TVPImportFuncPtr6;
extern void * TVPImportFuncPtr7;
extern void * TVPImportFuncPtr8;
extern void * TVPImportFuncPtr9;
extern void * TVPImportFuncPtr10;
extern void * TVPImportFuncPtr11;
extern void * TVPImportFuncPtr12;
extern void * TVPImportFuncPtr13;
extern void * TVPImportFuncPtr14;
extern void * TVPImportFuncPtr15;
extern void * TVPImportFuncPtr16;
extern void * TVPImportFuncPtr17;
extern void * TVPImportFuncPtr18;
extern void * TVPImportFuncPtr19;
extern void * TVPImportFuncPtr20;
extern void * TVPImportFuncPtr21;
extern void * TVPImportFuncPtr22;
extern void * TVPImportFuncPtr23;
extern void * TVPImportFuncPtr24;
extern void * TVPImportFuncPtr25;
extern void * TVPImportFuncPtr26;
extern void * TVPImportFuncPtr27;
extern void * TVPImportFuncPtr28;
extern void * TVPImportFuncPtr29;
extern void * TVPImportFuncPtr30;
extern void * TVPImportFuncPtr31;
extern void * TVPImportFuncPtr32;
extern void * TVPImportFuncPtr33;
extern void * TVPImportFuncPtr34;
extern void * TVPImportFuncPtr35;
extern void * TVPImportFuncPtr36;
extern void * TVPImportFuncPtr37;
extern void * TVPImportFuncPtr38;
extern void * TVPImportFuncPtr39;
extern void * TVPImportFuncPtr40;
extern void * TVPImportFuncPtr41;
extern void * TVPImportFuncPtr42;
extern void * TVPImportFuncPtr43;
extern void * TVPImportFuncPtr44;
extern void * TVPImportFuncPtr45;
extern void * TVPImportFuncPtr46;
extern void * TVPImportFuncPtr47;
extern void * TVPImportFuncPtr48;
extern void * TVPImportFuncPtr49;
extern void * TVPImportFuncPtr50;
extern void * TVPImportFuncPtr51;
extern void * TVPImportFuncPtr52;
extern void * TVPImportFuncPtr53;
extern void * TVPImportFuncPtr54;
extern void * TVPImportFuncPtr55;
extern void * TVPImportFuncPtr56;
extern void * TVPImportFuncPtr57;
extern void * TVPImportFuncPtr58;
extern void * TVPImportFuncPtr59;
extern void * TVPImportFuncPtr60;
extern void * TVPImportFuncPtr61;
extern void * TVPImportFuncPtr62;
extern void * TVPImportFuncPtr63;
extern void * TVPImportFuncPtr64;
extern void * TVPImportFuncPtr65;
extern void * TVPImportFuncPtr66;
extern void * TVPImportFuncPtr67;
extern void * TVPImportFuncPtr68;
extern void * TVPImportFuncPtr69;
extern void * TVPImportFuncPtr70;
extern void * TVPImportFuncPtr71;
extern void * TVPImportFuncPtr72;
extern void * TVPImportFuncPtr73;
extern void * TVPImportFuncPtr74;
extern void * TVPImportFuncPtr75;
extern void * TVPImportFuncPtr76;
extern void * TVPImportFuncPtr77;
extern void * TVPImportFuncPtr78;
extern void * TVPImportFuncPtr79;
extern void * TVPImportFuncPtr80;
extern void * TVPImportFuncPtr81;
extern void * TVPImportFuncPtr82;
extern void * TVPImportFuncPtr83;
extern void * TVPImportFuncPtr84;
extern void * TVPImportFuncPtr85;
extern void * TVPImportFuncPtr86;
extern void * TVPImportFuncPtr87;
extern void * TVPImportFuncPtr88;
extern void * TVPImportFuncPtr89;
extern void * TVPImportFuncPtr90;
extern void * TVPImportFuncPtr91;
extern void * TVPImportFuncPtr92;
extern void * TVPImportFuncPtr93;
extern void * TVPImportFuncPtr94;
extern void * TVPImportFuncPtr95;
extern void * TVPImportFuncPtr96;
extern void * TVPImportFuncPtr97;
extern void * TVPImportFuncPtr98;
extern void * TVPImportFuncPtr99;
extern void * TVPImportFuncPtr100;
extern void * TVPImportFuncPtr101;
extern void * TVPImportFuncPtr102;
extern void * TVPImportFuncPtr103;
extern void * TVPImportFuncPtr104;
extern void * TVPImportFuncPtr105;
extern void * TVPImportFuncPtr106;
extern void * TVPImportFuncPtr107;
extern void * TVPImportFuncPtr108;
extern void * TVPImportFuncPtr109;
extern void * TVPImportFuncPtr110;
extern void * TVPImportFuncPtr111;
extern void * TVPImportFuncPtr112;
extern void * TVPImportFuncPtr113;
extern void * TVPImportFuncPtr114;
extern void * TVPImportFuncPtr115;
extern void * TVPImportFuncPtr116;
extern void * TVPImportFuncPtr117;
extern void * TVPImportFuncPtr118;
extern void * TVPImportFuncPtr119;
extern void * TVPImportFuncPtr120;
extern void * TVPImportFuncPtr121;
extern void * TVPImportFuncPtr122;
extern void * TVPImportFuncPtr123;
extern void * TVPImportFuncPtr124;
extern void * TVPImportFuncPtr125;
extern void * TVPImportFuncPtr126;
extern void * TVPImportFuncPtr127;
extern void * TVPImportFuncPtr128;
extern void * TVPImportFuncPtr129;
extern void * TVPImportFuncPtr130;
extern void * TVPImportFuncPtr131;
extern void * TVPImportFuncPtr132;
extern void * TVPImportFuncPtr133;
extern void * TVPImportFuncPtr134;
extern void * TVPImportFuncPtr135;
extern void * TVPImportFuncPtr136;
extern void * TVPImportFuncPtr137;
extern void * TVPImportFuncPtr138;
extern void * TVPImportFuncPtr139;
extern void * TVPImportFuncPtr140;
extern void * TVPImportFuncPtr141;
extern void * TVPImportFuncPtr142;
extern void * TVPImportFuncPtr143;
extern void * TVPImportFuncPtr144;
extern void * TVPImportFuncPtr145;
extern void * TVPImportFuncPtr146;
extern void * TVPImportFuncPtr147;
extern void * TVPImportFuncPtr148;
extern void * TVPImportFuncPtr149;
extern void * TVPImportFuncPtr150;
extern void * TVPImportFuncPtr151;
extern void * TVPImportFuncPtr152;
extern void * TVPImportFuncPtr153;
extern void * TVPImportFuncPtr154;
extern void * TVPImportFuncPtr155;
extern void * TVPImportFuncPtr156;
extern void * TVPImportFuncPtr157;
extern void * TVPImportFuncPtr158;
extern void * TVPImportFuncPtr159;
extern void * TVPImportFuncPtr160;
extern void * TVPImportFuncPtr161;
extern void * TVPImportFuncPtr162;
extern void * TVPImportFuncPtr163;
extern void * TVPImportFuncPtr164;
extern void * TVPImportFuncPtr165;
extern void * TVPImportFuncPtr166;
extern void * TVPImportFuncPtr167;
extern void * TVPImportFuncPtr168;
extern void * TVPImportFuncPtr169;
extern void * TVPImportFuncPtr170;
extern void * TVPImportFuncPtr171;
extern void * TVPImportFuncPtr172;
extern void * TVPImportFuncPtr173;
extern void * TVPImportFuncPtr174;
extern void * TVPImportFuncPtr175;
extern void * TVPImportFuncPtr176;
extern void * TVPImportFuncPtr177;
extern void * TVPImportFuncPtr178;
extern void * TVPImportFuncPtr179;
extern void * TVPImportFuncPtr180;
extern void * TVPImportFuncPtr181;
extern void * TVPImportFuncPtr182;
extern void * TVPImportFuncPtr183;
extern void * TVPImportFuncPtr184;
extern void * TVPImportFuncPtr185;
extern void * TVPImportFuncPtr186;
extern void * TVPImportFuncPtr187;
extern void * TVPImportFuncPtr188;
extern void * TVPImportFuncPtr189;
extern void * TVPImportFuncPtr190;
extern void * TVPImportFuncPtr191;
extern void * TVPImportFuncPtr192;
extern void * TVPImportFuncPtr193;
extern void * TVPImportFuncPtr194;
extern void * TVPImportFuncPtr195;
extern void * TVPImportFuncPtr196;
extern void * TVPImportFuncPtr197;
extern void * TVPImportFuncPtr198;
extern void * TVPImportFuncPtr199;
extern void * TVPImportFuncPtr200;
extern void * TVPImportFuncPtr201;
extern void * TVPImportFuncPtr202;
extern void * TVPImportFuncPtr203;
extern void * TVPImportFuncPtr204;
extern void * TVPImportFuncPtr205;
extern void * TVPImportFuncPtr206;
extern void * TVPImportFuncPtr207;
extern void * TVPImportFuncPtr208;
extern void * TVPImportFuncPtr209;
extern void * TVPImportFuncPtr210;
extern void * TVPImportFuncPtr211;
extern void * TVPImportFuncPtr212;
extern void * TVPImportFuncPtr213;
extern void * TVPImportFuncPtr214;
extern void * TVPImportFuncPtr215;
extern void * TVPImportFuncPtr216;
extern void * TVPImportFuncPtr217;
extern void * TVPImportFuncPtr218;
extern void * TVPImportFuncPtr219;
extern void * TVPImportFuncPtr220;
extern void * TVPImportFuncPtr221;
extern void * TVPImportFuncPtr222;
extern void * TVPImportFuncPtr223;
extern void * TVPImportFuncPtr224;
extern void * TVPImportFuncPtr225;
extern void * TVPImportFuncPtr226;
extern void * TVPImportFuncPtr227;
extern void * TVPImportFuncPtr228;
extern void * TVPImportFuncPtr229;
extern void * TVPImportFuncPtr230;
extern void * TVPImportFuncPtr231;
extern void * TVPImportFuncPtr232;
extern void * TVPImportFuncPtr233;
extern void * TVPImportFuncPtr234;
extern void * TVPImportFuncPtr235;
extern void * TVPImportFuncPtr236;
extern void * TVPImportFuncPtr237;
extern void * TVPImportFuncPtr238;
extern void * TVPImportFuncPtr239;
extern void * TVPImportFuncPtr240;
extern void * TVPImportFuncPtr241;
extern void * TVPImportFuncPtr242;
extern void * TVPImportFuncPtr243;
extern void * TVPImportFuncPtr244;
extern void * TVPImportFuncPtr245;
extern void * TVPImportFuncPtr246;
extern void * TVPImportFuncPtr247;
extern void * TVPImportFuncPtr248;
extern void * TVPImportFuncPtr249;
extern void * TVPImportFuncPtr250;
extern void * TVPImportFuncPtr251;
extern void * TVPImportFuncPtr252;
extern void * TVPImportFuncPtr253;
extern void * TVPImportFuncPtr254;
extern void * TVPImportFuncPtr255;
extern void * TVPImportFuncPtr256;
extern void * TVPImportFuncPtr257;
extern void * TVPImportFuncPtr258;
extern void * TVPImportFuncPtr259;
extern void * TVPImportFuncPtr260;
extern void * TVPImportFuncPtr261;
extern void * TVPImportFuncPtr262;
extern void * TVPImportFuncPtr263;
extern void * TVPImportFuncPtr264;
extern void * TVPImportFuncPtr265;
extern void * TVPImportFuncPtr266;
extern void * TVPImportFuncPtr267;
extern void * TVPImportFuncPtr268;
extern void * TVPImportFuncPtr269;
extern void * TVPImportFuncPtr270;
extern void * TVPImportFuncPtr271;
extern void * TVPImportFuncPtr272;
extern void * TVPImportFuncPtr273;
extern void * TVPImportFuncPtr274;
extern void * TVPImportFuncPtr275;
extern void * TVPImportFuncPtr276;
extern void * TVPImportFuncPtr277;
extern void * TVPImportFuncPtr278;
extern void * TVPImportFuncPtr279;
extern void * TVPImportFuncPtr280;
extern void * TVPImportFuncPtr281;
extern void * TVPImportFuncPtr282;
extern void * TVPImportFuncPtr283;
extern void * TVPImportFuncPtr284;
extern void * TVPImportFuncPtr285;
extern void * TVPImportFuncPtr286;
extern void * TVPImportFuncPtr287;
extern void * TVPImportFuncPtr288;
extern void * TVPImportFuncPtr289;
extern void * TVPImportFuncPtr290;
extern void * TVPImportFuncPtr291;
extern void * TVPImportFuncPtr292;
extern void * TVPImportFuncPtr293;
extern void * TVPImportFuncPtr294;
extern void * TVPImportFuncPtr295;
extern void * TVPImportFuncPtr296;
extern void * TVPImportFuncPtr297;
extern void * TVPImportFuncPtr298;
extern void * TVPImportFuncPtr299;
extern void * TVPImportFuncPtr300;
extern void * TVPImportFuncPtr301;
extern void * TVPImportFuncPtr302;
extern void * TVPImportFuncPtr303;
extern void * TVPImportFuncPtr304;
extern void * TVPImportFuncPtr305;
extern void * TVPImportFuncPtr306;
extern void * TVPImportFuncPtr307;
extern void * TVPImportFuncPtr308;
extern void * TVPImportFuncPtr309;
extern void * TVPImportFuncPtr310;
extern void * TVPImportFuncPtr311;
extern void * TVPImportFuncPtr312;
extern void * TVPImportFuncPtr313;
extern void * TVPImportFuncPtr314;
extern void * TVPImportFuncPtr315;
extern void * TVPImportFuncPtr316;
extern void * TVPImportFuncPtr317;
extern void * TVPImportFuncPtr318;
extern void * TVPImportFuncPtr319;
extern void * TVPImportFuncPtr320;
extern void * TVPImportFuncPtr321;
extern void * TVPImportFuncPtr322;
extern void * TVPImportFuncPtr323;
extern void * TVPImportFuncPtr324;
extern void * TVPImportFuncPtr325;
extern void * TVPImportFuncPtr326;
extern void * TVPImportFuncPtr327;
extern void * TVPImportFuncPtr328;
extern void * TVPImportFuncPtr329;
extern void * TVPImportFuncPtr330;
extern void * TVPImportFuncPtr331;
extern void * TVPImportFuncPtr332;
extern void * TVPImportFuncPtr333;
extern void * TVPImportFuncPtr334;
extern void * TVPImportFuncPtr335;
extern void * TVPImportFuncPtr336;
extern void * TVPImportFuncPtr337;
extern void * TVPImportFuncPtr338;
extern void * TVPImportFuncPtr339;
extern void * TVPImportFuncPtr340;
extern void * TVPImportFuncPtr341;
extern void * TVPImportFuncPtr342;
extern void * TVPImportFuncPtr343;
extern void * TVPImportFuncPtr344;
extern void * TVPImportFuncPtr345;
extern void * TVPImportFuncPtr346;
extern void * TVPImportFuncPtr347;
extern void * TVPImportFuncPtr348;
extern void * TVPImportFuncPtr349;
extern void * TVPImportFuncPtr350;
extern void * TVPImportFuncPtr351;
extern void * TVPImportFuncPtr352;
extern void * TVPImportFuncPtr353;
extern void * TVPImportFuncPtr354;
extern void * TVPImportFuncPtr355;
extern void * TVPImportFuncPtr356;
extern void * TVPImportFuncPtr357;
extern void * TVPImportFuncPtr358;
extern void * TVPImportFuncPtr359;
extern void * TVPImportFuncPtr360;
extern void * TVPImportFuncPtr361;
extern void * TVPImportFuncPtr362;
extern void * TVPImportFuncPtr363;
extern void * TVPImportFuncPtr364;
extern void * TVPImportFuncPtr365;
extern void * TVPImportFuncPtr366;
extern void * TVPImportFuncPtr367;
extern void * TVPImportFuncPtr368;
extern void * TVPImportFuncPtr369;
extern void * TVPImportFuncPtr370;
extern void * TVPImportFuncPtr371;
extern void * TVPImportFuncPtr372;
extern void * TVPImportFuncPtr373;
extern void * TVPImportFuncPtr374;
extern void * TVPImportFuncPtr375;
extern void * TVPImportFuncPtr376;
extern void * TVPImportFuncPtr377;
extern void * TVPImportFuncPtr378;
extern void * TVPImportFuncPtr379;
extern void * TVPImportFuncPtr380;
extern void * TVPImportFuncPtr381;
extern void * TVPImportFuncPtr382;
extern void * TVPImportFuncPtr383;
extern void * TVPImportFuncPtr384;
extern void * TVPImportFuncPtr385;
extern void * TVPImportFuncPtr386;
extern void * TVPImportFuncPtr387;
extern void * TVPImportFuncPtr388;
extern void * TVPImportFuncPtr389;
extern void * TVPImportFuncPtr390;
extern void * TVPImportFuncPtr391;
extern void * TVPImportFuncPtr392;
extern void * TVPImportFuncPtr393;
extern void * TVPImportFuncPtr394;
extern void * TVPImportFuncPtr395;
extern void * TVPImportFuncPtr396;
extern void * TVPImportFuncPtr397;
extern void * TVPImportFuncPtr398;
extern void * TVPImportFuncPtr399;
extern void * TVPImportFuncPtr400;
extern void * TVPImportFuncPtr401;
extern void * TVPImportFuncPtr402;
extern void * TVPImportFuncPtr403;
extern void * TVPImportFuncPtr404;
extern void * TVPImportFuncPtr405;
extern void * TVPImportFuncPtr406;
extern void * TVPImportFuncPtr407;
extern void * TVPImportFuncPtr408;
extern void * TVPImportFuncPtr409;
extern void * TVPImportFuncPtr410;
extern void * TVPImportFuncPtr411;
extern void * TVPImportFuncPtr412;
extern void * TVPImportFuncPtr413;
extern void * TVPImportFuncPtr414;
extern void * TVPImportFuncPtr415;
extern void * TVPImportFuncPtr416;
extern void * TVPImportFuncPtr417;
extern void * TVPImportFuncPtr418;
extern void * TVPImportFuncPtr419;
extern void * TVPImportFuncPtr420;
extern void * TVPImportFuncPtr421;
extern void * TVPImportFuncPtr422;
extern void * TVPImportFuncPtr423;
extern void * TVPImportFuncPtr424;
extern void * TVPImportFuncPtr425;
extern void * TVPImportFuncPtr426;
extern void * TVPImportFuncPtr427;
extern void * TVPImportFuncPtr428;
extern void * TVPImportFuncPtr429;
extern void * TVPImportFuncPtr430;
extern void * TVPImportFuncPtr431;
extern void * TVPImportFuncPtr432;
extern void * TVPImportFuncPtr433;
extern void * TVPImportFuncPtr434;
extern void * TVPImportFuncPtr435;
extern void * TVPImportFuncPtr436;
extern void * TVPImportFuncPtr437;
extern void * TVPImportFuncPtr438;
extern void * TVPImportFuncPtr439;
extern void * TVPImportFuncPtr440;
extern void * TVPImportFuncPtr441;
extern void * TVPImportFuncPtr442;
extern void * TVPImportFuncPtr443;
extern void * TVPImportFuncPtr444;
extern void * TVPImportFuncPtr445;
extern void * TVPImportFuncPtr446;
extern void * TVPImportFuncPtr447;
extern void * TVPImportFuncPtr448;
extern void * TVPImportFuncPtr449;
extern void * TVPImportFuncPtr450;
extern void * TVPImportFuncPtr451;
extern void * TVPImportFuncPtr452;
extern void * TVPImportFuncPtr453;
extern void * TVPImportFuncPtr454;
extern void * TVPImportFuncPtr455;
extern void * TVPImportFuncPtr456;
extern void * TVPImportFuncPtr457;
extern void * TVPImportFuncPtr458;
extern void * TVPImportFuncPtr459;
extern void * TVPImportFuncPtr460;
extern void * TVPImportFuncPtr461;
extern void * TVPImportFuncPtr462;
extern void * TVPImportFuncPtr463;
extern void * TVPImportFuncPtr464;
extern void * TVPImportFuncPtr465;
extern void * TVPImportFuncPtr466;
extern void * TVPImportFuncPtr467;
extern void * TVPImportFuncPtr468;
extern void * TVPImportFuncPtr469;
extern void * TVPImportFuncPtr470;
extern void * TVPImportFuncPtr471;
extern void * TVPImportFuncPtr472;
extern void * TVPImportFuncPtr473;
extern void * TVPImportFuncPtr474;
extern void * TVPImportFuncPtr475;
extern void * TVPImportFuncPtr476;
extern void * TVPImportFuncPtr477;
extern void * TVPImportFuncPtr478;
extern void * TVPImportFuncPtr479;
extern void * TVPImportFuncPtr480;
extern void * TVPImportFuncPtr481;
extern void * TVPImportFuncPtr482;
extern void * TVPImportFuncPtr483;
extern void * TVPImportFuncPtr484;
extern void * TVPImportFuncPtr485;
extern void * TVPImportFuncPtr486;
extern void * TVPImportFuncPtr487;
extern void * TVPImportFuncPtr488;
extern void * TVPImportFuncPtr489;
extern void * TVPImportFuncPtr490;
extern void * TVPImportFuncPtr491;
extern void * TVPImportFuncPtr492;
extern void * TVPImportFuncPtr493;
extern void * TVPImportFuncPtr494;
extern void * TVPImportFuncPtr495;
extern void * TVPImportFuncPtr496;
extern void * TVPImportFuncPtr497;
extern void * TVPImportFuncPtr498;
extern void * TVPImportFuncPtr499;
extern void * TVPImportFuncPtr500;
extern void * TVPImportFuncPtr501;
extern void * TVPImportFuncPtr502;
extern void * TVPImportFuncPtr503;
extern void * TVPImportFuncPtr504;
extern void * TVPImportFuncPtr505;
extern void * TVPImportFuncPtr506;
extern void * TVPImportFuncPtr507;


//---------------------------------------------------------------------------
// tTJSVariantString
//---------------------------------------------------------------------------

class tTJSVariantString : protected tTJSVariantString_S
{
	// do not create an instance of this class directly.

public:
	void AddRef()
	{
		if(!TVPImportFuncPtr179)
		{
			static char funcname[] = "void tTJSVariantString::AddRef()";
			TVPImportFuncPtr179 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariantString *);
		((__functype)(TVPImportFuncPtr179))(this);
	}

	void Release()
	{
		if(!TVPImportFuncPtr180)
		{
			static char funcname[] = "void tTJSVariantString::Release()";
			TVPImportFuncPtr180 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariantString *);
		((__functype)(TVPImportFuncPtr180))(this);
	}

	void SetString(const tjs_char * ref , tjs_int maxlen = - 1)
	{
		if(!TVPImportFuncPtr181)
		{
			static char funcname[] = "void tTJSVariantString::SetString(const tjs_char *,tjs_int)";
			TVPImportFuncPtr181 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariantString *, const tjs_char *, tjs_int);
		((__functype)(TVPImportFuncPtr181))(this, ref, maxlen);
	}

	void SetString(const tjs_nchar * ref)
	{
		if(!TVPImportFuncPtr182)
		{
			static char funcname[] = "void tTJSVariantString::SetString(const tjs_nchar *)";
			TVPImportFuncPtr182 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariantString *, const tjs_nchar *);
		((__functype)(TVPImportFuncPtr182))(this, ref);
	}

	void AllocBuffer(tjs_uint len)
	{
		if(!TVPImportFuncPtr183)
		{
			static char funcname[] = "void tTJSVariantString::AllocBuffer(tjs_uint)";
			TVPImportFuncPtr183 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariantString *, tjs_uint);
		((__functype)(TVPImportFuncPtr183))(this, len);
	}

	void ResetString(const tjs_char * ref)
	{
		if(!TVPImportFuncPtr184)
		{
			static char funcname[] = "void tTJSVariantString::ResetString(const tjs_char *)";
			TVPImportFuncPtr184 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariantString *, const tjs_char *);
		((__functype)(TVPImportFuncPtr184))(this, ref);
	}

	void AppendBuffer(tjs_uint applen)
	{
		if(!TVPImportFuncPtr185)
		{
			static char funcname[] = "void tTJSVariantString::AppendBuffer(tjs_uint)";
			TVPImportFuncPtr185 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariantString *, tjs_uint);
		((__functype)(TVPImportFuncPtr185))(this, applen);
	}

	void Append(const tjs_char * str)
	{
		if(!TVPImportFuncPtr186)
		{
			static char funcname[] = "void tTJSVariantString::Append(const tjs_char *)";
			TVPImportFuncPtr186 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariantString *, const tjs_char *);
		((__functype)(TVPImportFuncPtr186))(this, str);
	}

	void Append(const tjs_char * str , tjs_int applen)
	{
		if(!TVPImportFuncPtr187)
		{
			static char funcname[] = "void tTJSVariantString::Append(const tjs_char *,tjs_int)";
			TVPImportFuncPtr187 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariantString *, const tjs_char *, tjs_int);
		((__functype)(TVPImportFuncPtr187))(this, str, applen);
	}

	tTJSVariantString * FixLength()
	{
		if(!TVPImportFuncPtr188)
		{
			static char funcname[] = "tTJSVariantString * tTJSVariantString::FixLength()";
			TVPImportFuncPtr188 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariantString *(__stdcall * __functype)(tTJSVariantString *);
		return ((__functype)(TVPImportFuncPtr188))(this);
	}

	tjs_uint32 * GetHint()
	{
		if(!TVPImportFuncPtr189)
		{
			static char funcname[] = "tjs_uint32 * tTJSVariantString::GetHint()";
			TVPImportFuncPtr189 = TVPGetImportFuncPtr(funcname);
		}
		typedef tjs_uint32 *(__stdcall * __functype)(tTJSVariantString *);
		return ((__functype)(TVPImportFuncPtr189))(this);
	}

	operator const tjs_char *() const
	{
		if(!TVPImportFuncPtr190)
		{
			static char funcname[] = "tTJSVariantString::operator const tjs_char *() const";
			TVPImportFuncPtr190 = TVPGetImportFuncPtr(funcname);
		}
		typedef const tjs_char *(__stdcall * __functype)(const tTJSVariantString *);
		return ((__functype)(TVPImportFuncPtr190))(this);
	}

	tjs_int GetLength() const
	{
		if(!TVPImportFuncPtr191)
		{
			static char funcname[] = "tjs_int tTJSVariantString::GetLength() const";
			TVPImportFuncPtr191 = TVPGetImportFuncPtr(funcname);
		}
		typedef tjs_int(__stdcall * __functype)(const tTJSVariantString *);
		return ((__functype)(TVPImportFuncPtr191))(this);
	}

	tTVInteger ToInteger() const
	{
		if(!TVPImportFuncPtr192)
		{
			static char funcname[] = "tTVInteger tTJSVariantString::ToInteger() const";
			TVPImportFuncPtr192 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTVInteger(__stdcall * __functype)(const tTJSVariantString *);
		return ((__functype)(TVPImportFuncPtr192))(this);
	}

	tTVReal ToReal() const
	{
		if(!TVPImportFuncPtr193)
		{
			static char funcname[] = "tTVReal tTJSVariantString::ToReal() const";
			TVPImportFuncPtr193 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTVReal(__stdcall * __functype)(const tTJSVariantString *);
		return ((__functype)(TVPImportFuncPtr193))(this);
	}

	void ToNumber(tTJSVariant & dest) const
	{
		if(!TVPImportFuncPtr194)
		{
			static char funcname[] = "void tTJSVariantString::ToNumber(tTJSVariant &) const";
			TVPImportFuncPtr194 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(const tTJSVariantString *, tTJSVariant &);
		((__functype)(TVPImportFuncPtr194))(this, dest);
	}

	tjs_int GetRefCount() const
	{
		if(!TVPImportFuncPtr195)
		{
			static char funcname[] = "tjs_int tTJSVariantString::GetRefCount() const";
			TVPImportFuncPtr195 = TVPGetImportFuncPtr(funcname);
		}
		typedef tjs_int(__stdcall * __functype)(const tTJSVariantString *);
		return ((__functype)(TVPImportFuncPtr195))(this);
	}

};
//---------------------------------------------------------------------------
// tTJSVariantOctet
//---------------------------------------------------------------------------

class tTJSVariantOctet : protected tTJSVariantOctet_S
{
	// do not create an instance of this class directly.

public:
	tTJSVariantOctet(const tjs_uint8 * data , tjs_uint length)
	{
		if(!TVPImportFuncPtr111)
		{
			static char funcname[] = "tTJSVariantOctet::tTJSVariantOctet(const tjs_uint8 *,tjs_uint)";
			TVPImportFuncPtr111 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariantOctet *, const tjs_uint8 *, tjs_uint);
		((__functype)(TVPImportFuncPtr111))(this, data, length);
	}

	tTJSVariantOctet(const tjs_uint8 * data1 , tjs_uint len1 , const tjs_uint8 * data2 , tjs_uint len2)
	{
		if(!TVPImportFuncPtr112)
		{
			static char funcname[] = "tTJSVariantOctet::tTJSVariantOctet(const tjs_uint8 *,tjs_uint,const tjs_uint8 *,tjs_uint)";
			TVPImportFuncPtr112 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariantOctet *, const tjs_uint8 *, tjs_uint , const tjs_uint8 *, tjs_uint);
		((__functype)(TVPImportFuncPtr112))(this, data1, len1, data2, len2);
	}

	tTJSVariantOctet(const tTJSVariantOctet * o1 , const tTJSVariantOctet * o2)
	{
		if(!TVPImportFuncPtr113)
		{
			static char funcname[] = "tTJSVariantOctet::tTJSVariantOctet(const tTJSVariantOctet *,const tTJSVariantOctet *)";
			TVPImportFuncPtr113 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariantOctet *, const tTJSVariantOctet *, const tTJSVariantOctet *);
		((__functype)(TVPImportFuncPtr113))(this, o1, o2);
	}

	~ tTJSVariantOctet()
	{
		if(!TVPImportFuncPtr114)
		{
			static char funcname[] = "tTJSVariantOctet::~ tTJSVariantOctet()";
			TVPImportFuncPtr114 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariantOctet *);
		((__functype)(TVPImportFuncPtr114))(this);
	}

	void AddRef()
	{
		if(!TVPImportFuncPtr115)
		{
			static char funcname[] = "void tTJSVariantOctet::AddRef()";
			TVPImportFuncPtr115 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariantOctet *);
		((__functype)(TVPImportFuncPtr115))(this);
	}

	void Release()
	{
		if(!TVPImportFuncPtr116)
		{
			static char funcname[] = "void tTJSVariantOctet::Release()";
			TVPImportFuncPtr116 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariantOctet *);
		((__functype)(TVPImportFuncPtr116))(this);
	}

	tjs_uint GetLength() const
	{
		if(!TVPImportFuncPtr117)
		{
			static char funcname[] = "tjs_uint tTJSVariantOctet::GetLength() const";
			TVPImportFuncPtr117 = TVPGetImportFuncPtr(funcname);
		}
		typedef tjs_uint(__stdcall * __functype)(const tTJSVariantOctet *);
		return ((__functype)(TVPImportFuncPtr117))(this);
	}

	const tjs_uint8 * GetData() const
	{
		if(!TVPImportFuncPtr118)
		{
			static char funcname[] = "const tjs_uint8 * tTJSVariantOctet::GetData() const";
			TVPImportFuncPtr118 = TVPGetImportFuncPtr(funcname);
		}
		typedef const tjs_uint8 *(__stdcall * __functype)(const tTJSVariantOctet *);
		return ((__functype)(TVPImportFuncPtr118))(this);
	}

};
//---------------------------------------------------------------------------
// tTJSVariant
//---------------------------------------------------------------------------

class tTJSVariant : protected tTJSVariant_S
{

public:
	void ChangeClosureObjThis(iTJSDispatch2 * objthis)
	{
		if(!TVPImportFuncPtr0)
		{
			static char funcname[] = "void tTJSVariant::ChangeClosureObjThis(iTJSDispatch2 *)";
			TVPImportFuncPtr0 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, iTJSDispatch2 *);
		((__functype)(TVPImportFuncPtr0))(this, objthis);
	}

	tTJSVariant()
	{
		if(!TVPImportFuncPtr1)
		{
			static char funcname[] = "tTJSVariant::tTJSVariant()";
			TVPImportFuncPtr1 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *);
		((__functype)(TVPImportFuncPtr1))(this);
	}

	tTJSVariant(const tTJSVariant & ref)
	{
		if(!TVPImportFuncPtr2)
		{
			static char funcname[] = "tTJSVariant::tTJSVariant(const tTJSVariant &)";
			TVPImportFuncPtr2 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, const tTJSVariant &);
		((__functype)(TVPImportFuncPtr2))(this, ref);
	}

	tTJSVariant(iTJSDispatch2 * ref)
	{
		if(!TVPImportFuncPtr3)
		{
			static char funcname[] = "tTJSVariant::tTJSVariant(iTJSDispatch2 *)";
			TVPImportFuncPtr3 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, iTJSDispatch2 *);
		((__functype)(TVPImportFuncPtr3))(this, ref);
	}

	tTJSVariant(iTJSDispatch2 * obj , iTJSDispatch2 * objthis)
	{
		if(!TVPImportFuncPtr4)
		{
			static char funcname[] = "tTJSVariant::tTJSVariant(iTJSDispatch2 *,iTJSDispatch2 *)";
			TVPImportFuncPtr4 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, iTJSDispatch2 *, iTJSDispatch2 *);
		((__functype)(TVPImportFuncPtr4))(this, obj, objthis);
	}

	tTJSVariant(const tjs_char * ref)
	{
		if(!TVPImportFuncPtr5)
		{
			static char funcname[] = "tTJSVariant::tTJSVariant(const tjs_char *)";
			TVPImportFuncPtr5 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, const tjs_char *);
		((__functype)(TVPImportFuncPtr5))(this, ref);
	}

	tTJSVariant(const tTJSString & ref)
	{
		if(!TVPImportFuncPtr6)
		{
			static char funcname[] = "tTJSVariant::tTJSVariant(const tTJSString &)";
			TVPImportFuncPtr6 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, const tTJSString &);
		((__functype)(TVPImportFuncPtr6))(this, ref);
	}

	tTJSVariant(const tjs_nchar * ref)
	{
		if(!TVPImportFuncPtr7)
		{
			static char funcname[] = "tTJSVariant::tTJSVariant(const tjs_nchar *)";
			TVPImportFuncPtr7 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, const tjs_nchar *);
		((__functype)(TVPImportFuncPtr7))(this, ref);
	}

	tTJSVariant(const tjs_uint8 * ref , tjs_uint len)
	{
		if(!TVPImportFuncPtr8)
		{
			static char funcname[] = "tTJSVariant::tTJSVariant(const tjs_uint8 *,tjs_uint)";
			TVPImportFuncPtr8 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, const tjs_uint8 *, tjs_uint);
		((__functype)(TVPImportFuncPtr8))(this, ref, len);
	}

	tTJSVariant(bool ref)
	{
		if(!TVPImportFuncPtr9)
		{
			static char funcname[] = "tTJSVariant::tTJSVariant(bool)";
			TVPImportFuncPtr9 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, bool);
		((__functype)(TVPImportFuncPtr9))(this, ref);
	}

	tTJSVariant(tjs_int32 ref)
	{
		if(!TVPImportFuncPtr10)
		{
			static char funcname[] = "tTJSVariant::tTJSVariant(tjs_int32)";
			TVPImportFuncPtr10 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, tjs_int32);
		((__functype)(TVPImportFuncPtr10))(this, ref);
	}

	tTJSVariant(tjs_int64 ref)
	{
		if(!TVPImportFuncPtr11)
		{
			static char funcname[] = "tTJSVariant::tTJSVariant(tjs_int64)";
			TVPImportFuncPtr11 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, tjs_int64);
		((__functype)(TVPImportFuncPtr11))(this, ref);
	}

	tTJSVariant(tjs_real ref)
	{
		if(!TVPImportFuncPtr12)
		{
			static char funcname[] = "tTJSVariant::tTJSVariant(tjs_real)";
			TVPImportFuncPtr12 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, tjs_real);
		((__functype)(TVPImportFuncPtr12))(this, ref);
	}

	tTJSVariant(const tjs_uint8 * * src)
	{
		if(!TVPImportFuncPtr13)
		{
			static char funcname[] = "tTJSVariant::tTJSVariant(const tjs_uint8 * *)";
			TVPImportFuncPtr13 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, const tjs_uint8 * *);
		((__functype)(TVPImportFuncPtr13))(this, src);
	}

	~ tTJSVariant()
	{
		if(!TVPImportFuncPtr14)
		{
			static char funcname[] = "tTJSVariant::~ tTJSVariant()";
			TVPImportFuncPtr14 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *);
		((__functype)(TVPImportFuncPtr14))(this);
	}

	tTJSVariantType Type()
	{
		if(!TVPImportFuncPtr15)
		{
			static char funcname[] = "tTJSVariantType tTJSVariant::Type()";
			TVPImportFuncPtr15 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariantType(__stdcall * __functype)(tTJSVariant *);
		return ((__functype)(TVPImportFuncPtr15))(this);
	}

	void Clear()
	{
		if(!TVPImportFuncPtr16)
		{
			static char funcname[] = "void tTJSVariant::Clear()";
			TVPImportFuncPtr16 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *);
		((__functype)(TVPImportFuncPtr16))(this);
	}

	tTJSVariantClosure & AsObjectClosure()
	{
		if(!TVPImportFuncPtr17)
		{
			static char funcname[] = "tTJSVariantClosure & tTJSVariant::AsObjectClosure()";
			TVPImportFuncPtr17 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariantClosure &(__stdcall * __functype)(tTJSVariant *);
		return ((__functype)(TVPImportFuncPtr17))(this);
	}

	void ToObject()
	{
		if(!TVPImportFuncPtr18)
		{
			static char funcname[] = "void tTJSVariant::ToObject()";
			TVPImportFuncPtr18 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *);
		((__functype)(TVPImportFuncPtr18))(this);
	}

	operator iTJSDispatch2 *()
	{
		if(!TVPImportFuncPtr19)
		{
			static char funcname[] = "tTJSVariant::operator iTJSDispatch2 *()";
			TVPImportFuncPtr19 = TVPGetImportFuncPtr(funcname);
		}
		typedef iTJSDispatch2 *(__stdcall * __functype)(tTJSVariant *);
		return ((__functype)(TVPImportFuncPtr19))(this);
	}

	void ToString()
	{
		if(!TVPImportFuncPtr20)
		{
			static char funcname[] = "void tTJSVariant::ToString()";
			TVPImportFuncPtr20 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *);
		((__functype)(TVPImportFuncPtr20))(this);
	}

	tjs_uint32 * GetHint()
	{
		if(!TVPImportFuncPtr21)
		{
			static char funcname[] = "tjs_uint32 * tTJSVariant::GetHint()";
			TVPImportFuncPtr21 = TVPGetImportFuncPtr(funcname);
		}
		typedef tjs_uint32 *(__stdcall * __functype)(tTJSVariant *);
		return ((__functype)(TVPImportFuncPtr21))(this);
	}

	void ToOctet()
	{
		if(!TVPImportFuncPtr22)
		{
			static char funcname[] = "void tTJSVariant::ToOctet()";
			TVPImportFuncPtr22 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *);
		((__functype)(TVPImportFuncPtr22))(this);
	}

	void ToInteger()
	{
		if(!TVPImportFuncPtr23)
		{
			static char funcname[] = "void tTJSVariant::ToInteger()";
			TVPImportFuncPtr23 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *);
		((__functype)(TVPImportFuncPtr23))(this);
	}

	void ToReal()
	{
		if(!TVPImportFuncPtr24)
		{
			static char funcname[] = "void tTJSVariant::ToReal()";
			TVPImportFuncPtr24 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *);
		((__functype)(TVPImportFuncPtr24))(this);
	}

	tTJSVariant & operator =(const tTJSVariant & ref)
	{
		if(!TVPImportFuncPtr25)
		{
			static char funcname[] = "tTJSVariant & tTJSVariant::operator =(const tTJSVariant &)";
			TVPImportFuncPtr25 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant &(__stdcall * __functype)(tTJSVariant *, const tTJSVariant &);
		return ((__functype)(TVPImportFuncPtr25))(this, ref);
	}

	void CopyRef(const tTJSVariant & ref)
	{
		if(!TVPImportFuncPtr26)
		{
			static char funcname[] = "void tTJSVariant::CopyRef(const tTJSVariant &)";
			TVPImportFuncPtr26 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, const tTJSVariant &);
		((__functype)(TVPImportFuncPtr26))(this, ref);
	}

	tTJSVariant & operator =(iTJSDispatch2 * ref)
	{
		if(!TVPImportFuncPtr27)
		{
			static char funcname[] = "tTJSVariant & tTJSVariant::operator =(iTJSDispatch2 *)";
			TVPImportFuncPtr27 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant &(__stdcall * __functype)(tTJSVariant *, iTJSDispatch2 *);
		return ((__functype)(TVPImportFuncPtr27))(this, ref);
	}

	tTJSVariant & SetObject(iTJSDispatch2 * ref)
	{
		if(!TVPImportFuncPtr28)
		{
			static char funcname[] = "tTJSVariant & tTJSVariant::SetObject(iTJSDispatch2 *)";
			TVPImportFuncPtr28 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant &(__stdcall * __functype)(tTJSVariant *, iTJSDispatch2 *);
		return ((__functype)(TVPImportFuncPtr28))(this, ref);
	}

	tTJSVariant & SetObject(iTJSDispatch2 * object , iTJSDispatch2 * objthis)
	{
		if(!TVPImportFuncPtr29)
		{
			static char funcname[] = "tTJSVariant & tTJSVariant::SetObject(iTJSDispatch2 *,iTJSDispatch2 *)";
			TVPImportFuncPtr29 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant &(__stdcall * __functype)(tTJSVariant *, iTJSDispatch2 *, iTJSDispatch2 *);
		return ((__functype)(TVPImportFuncPtr29))(this, object, objthis);
	}

	tTJSVariant & operator =(tTJSVariantClosure ref)
	{
		if(!TVPImportFuncPtr30)
		{
			static char funcname[] = "tTJSVariant & tTJSVariant::operator =(tTJSVariantClosure)";
			TVPImportFuncPtr30 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant &(__stdcall * __functype)(tTJSVariant *, tTJSVariantClosure);
		return ((__functype)(TVPImportFuncPtr30))(this, ref);
	}

	tTJSVariant & operator =(tTJSVariantString * ref)
	{
		if(!TVPImportFuncPtr31)
		{
			static char funcname[] = "tTJSVariant & tTJSVariant::operator =(tTJSVariantString *)";
			TVPImportFuncPtr31 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant &(__stdcall * __functype)(tTJSVariant *, tTJSVariantString *);
		return ((__functype)(TVPImportFuncPtr31))(this, ref);
	}

	tTJSVariant & operator =(tTJSVariantOctet * ref)
	{
		if(!TVPImportFuncPtr32)
		{
			static char funcname[] = "tTJSVariant & tTJSVariant::operator =(tTJSVariantOctet *)";
			TVPImportFuncPtr32 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant &(__stdcall * __functype)(tTJSVariant *, tTJSVariantOctet *);
		return ((__functype)(TVPImportFuncPtr32))(this, ref);
	}

	tTJSVariant & operator =(const tTJSString & ref)
	{
		if(!TVPImportFuncPtr33)
		{
			static char funcname[] = "tTJSVariant & tTJSVariant::operator =(const tTJSString &)";
			TVPImportFuncPtr33 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant &(__stdcall * __functype)(tTJSVariant *, const tTJSString &);
		return ((__functype)(TVPImportFuncPtr33))(this, ref);
	}

	tTJSVariant & operator =(const tjs_char * ref)
	{
		if(!TVPImportFuncPtr34)
		{
			static char funcname[] = "tTJSVariant & tTJSVariant::operator =(const tjs_char *)";
			TVPImportFuncPtr34 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant &(__stdcall * __functype)(tTJSVariant *, const tjs_char *);
		return ((__functype)(TVPImportFuncPtr34))(this, ref);
	}

	tTJSVariant & operator =(const tjs_nchar * ref)
	{
		if(!TVPImportFuncPtr35)
		{
			static char funcname[] = "tTJSVariant & tTJSVariant::operator =(const tjs_nchar *)";
			TVPImportFuncPtr35 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant &(__stdcall * __functype)(tTJSVariant *, const tjs_nchar *);
		return ((__functype)(TVPImportFuncPtr35))(this, ref);
	}

	tTJSVariant & operator =(bool ref)
	{
		if(!TVPImportFuncPtr36)
		{
			static char funcname[] = "tTJSVariant & tTJSVariant::operator =(bool)";
			TVPImportFuncPtr36 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant &(__stdcall * __functype)(tTJSVariant *, bool);
		return ((__functype)(TVPImportFuncPtr36))(this, ref);
	}

	tTJSVariant & operator =(tjs_int32 ref)
	{
		if(!TVPImportFuncPtr37)
		{
			static char funcname[] = "tTJSVariant & tTJSVariant::operator =(tjs_int32)";
			TVPImportFuncPtr37 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant &(__stdcall * __functype)(tTJSVariant *, tjs_int32);
		return ((__functype)(TVPImportFuncPtr37))(this, ref);
	}

	tTJSVariant & operator =(const tTVInteger ref)
	{
		if(!TVPImportFuncPtr38)
		{
			static char funcname[] = "tTJSVariant & tTJSVariant::operator =(const tTVInteger)";
			TVPImportFuncPtr38 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant &(__stdcall * __functype)(tTJSVariant *, const tTVInteger);
		return ((__functype)(TVPImportFuncPtr38))(this, ref);
	}

	tTJSVariant & operator =(tjs_real ref)
	{
		if(!TVPImportFuncPtr39)
		{
			static char funcname[] = "tTJSVariant & tTJSVariant::operator =(tjs_real)";
			TVPImportFuncPtr39 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant &(__stdcall * __functype)(tTJSVariant *, tjs_real);
		return ((__functype)(TVPImportFuncPtr39))(this, ref);
	}

	void logicalorequal(const tTJSVariant & rhs)
	{
		if(!TVPImportFuncPtr40)
		{
			static char funcname[] = "void tTJSVariant::logicalorequal(const tTJSVariant &)";
			TVPImportFuncPtr40 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, const tTJSVariant &);
		((__functype)(TVPImportFuncPtr40))(this, rhs);
	}

	void logicalandequal(const tTJSVariant & rhs)
	{
		if(!TVPImportFuncPtr41)
		{
			static char funcname[] = "void tTJSVariant::logicalandequal(const tTJSVariant &)";
			TVPImportFuncPtr41 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, const tTJSVariant &);
		((__functype)(TVPImportFuncPtr41))(this, rhs);
	}

	void operator |=(const tTJSVariant & rhs)
	{
		if(!TVPImportFuncPtr42)
		{
			static char funcname[] = "void tTJSVariant::operator |=(const tTJSVariant &)";
			TVPImportFuncPtr42 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, const tTJSVariant &);
		((__functype)(TVPImportFuncPtr42))(this, rhs);
	}

	void increment()
	{
		if(!TVPImportFuncPtr43)
		{
			static char funcname[] = "void tTJSVariant::increment()";
			TVPImportFuncPtr43 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *);
		((__functype)(TVPImportFuncPtr43))(this);
	}

	void decrement()
	{
		if(!TVPImportFuncPtr44)
		{
			static char funcname[] = "void tTJSVariant::decrement()";
			TVPImportFuncPtr44 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *);
		((__functype)(TVPImportFuncPtr44))(this);
	}

	void operator ^=(const tTJSVariant & rhs)
	{
		if(!TVPImportFuncPtr45)
		{
			static char funcname[] = "void tTJSVariant::operator ^=(const tTJSVariant &)";
			TVPImportFuncPtr45 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, const tTJSVariant &);
		((__functype)(TVPImportFuncPtr45))(this, rhs);
	}

	void operator &=(const tTJSVariant & rhs)
	{
		if(!TVPImportFuncPtr46)
		{
			static char funcname[] = "void tTJSVariant::operator &=(const tTJSVariant &)";
			TVPImportFuncPtr46 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, const tTJSVariant &);
		((__functype)(TVPImportFuncPtr46))(this, rhs);
	}

	void operator >>=(const tTJSVariant & rhs)
	{
		if(!TVPImportFuncPtr47)
		{
			static char funcname[] = "void tTJSVariant::operator >>=(const tTJSVariant &)";
			TVPImportFuncPtr47 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, const tTJSVariant &);
		((__functype)(TVPImportFuncPtr47))(this, rhs);
	}

	void rbitshiftequal(const tTJSVariant & rhs)
	{
		if(!TVPImportFuncPtr48)
		{
			static char funcname[] = "void tTJSVariant::rbitshiftequal(const tTJSVariant &)";
			TVPImportFuncPtr48 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, const tTJSVariant &);
		((__functype)(TVPImportFuncPtr48))(this, rhs);
	}

	void operator <<=(const tTJSVariant & rhs)
	{
		if(!TVPImportFuncPtr49)
		{
			static char funcname[] = "void tTJSVariant::operator <<=(const tTJSVariant &)";
			TVPImportFuncPtr49 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, const tTJSVariant &);
		((__functype)(TVPImportFuncPtr49))(this, rhs);
	}

	void operator %=(const tTJSVariant & rhs)
	{
		if(!TVPImportFuncPtr50)
		{
			static char funcname[] = "void tTJSVariant::operator %=(const tTJSVariant &)";
			TVPImportFuncPtr50 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, const tTJSVariant &);
		((__functype)(TVPImportFuncPtr50))(this, rhs);
	}

	void operator /=(const tTJSVariant & rhs)
	{
		if(!TVPImportFuncPtr51)
		{
			static char funcname[] = "void tTJSVariant::operator /=(const tTJSVariant &)";
			TVPImportFuncPtr51 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, const tTJSVariant &);
		((__functype)(TVPImportFuncPtr51))(this, rhs);
	}

	void idivequal(const tTJSVariant & rhs)
	{
		if(!TVPImportFuncPtr52)
		{
			static char funcname[] = "void tTJSVariant::idivequal(const tTJSVariant &)";
			TVPImportFuncPtr52 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, const tTJSVariant &);
		((__functype)(TVPImportFuncPtr52))(this, rhs);
	}

	void operator *=(const tTJSVariant & rhs)
	{
		if(!TVPImportFuncPtr53)
		{
			static char funcname[] = "void tTJSVariant::operator *=(const tTJSVariant &)";
			TVPImportFuncPtr53 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, const tTJSVariant &);
		((__functype)(TVPImportFuncPtr53))(this, rhs);
	}

	void logicalnot()
	{
		if(!TVPImportFuncPtr54)
		{
			static char funcname[] = "void tTJSVariant::logicalnot()";
			TVPImportFuncPtr54 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *);
		((__functype)(TVPImportFuncPtr54))(this);
	}

	void bitnot()
	{
		if(!TVPImportFuncPtr55)
		{
			static char funcname[] = "void tTJSVariant::bitnot()";
			TVPImportFuncPtr55 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *);
		((__functype)(TVPImportFuncPtr55))(this);
	}

	void tonumber()
	{
		if(!TVPImportFuncPtr56)
		{
			static char funcname[] = "void tTJSVariant::tonumber()";
			TVPImportFuncPtr56 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *);
		((__functype)(TVPImportFuncPtr56))(this);
	}

	void changesign()
	{
		if(!TVPImportFuncPtr57)
		{
			static char funcname[] = "void tTJSVariant::changesign()";
			TVPImportFuncPtr57 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *);
		((__functype)(TVPImportFuncPtr57))(this);
	}

	void operator -=(const tTJSVariant & rhs)
	{
		if(!TVPImportFuncPtr58)
		{
			static char funcname[] = "void tTJSVariant::operator -=(const tTJSVariant &)";
			TVPImportFuncPtr58 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, const tTJSVariant &);
		((__functype)(TVPImportFuncPtr58))(this, rhs);
	}

	void operator +=(const tTJSVariant & rhs)
	{
		if(!TVPImportFuncPtr59)
		{
			static char funcname[] = "void tTJSVariant::operator +=(const tTJSVariant &)";
			TVPImportFuncPtr59 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSVariant *, const tTJSVariant &);
		((__functype)(TVPImportFuncPtr59))(this, rhs);
	}

	bool NormalCompare(const tTJSVariant & val2) const
	{
		if(!TVPImportFuncPtr60)
		{
			static char funcname[] = "bool tTJSVariant::NormalCompare(const tTJSVariant &) const";
			TVPImportFuncPtr60 = TVPGetImportFuncPtr(funcname);
		}
		typedef bool(__stdcall * __functype)(const tTJSVariant *, const tTJSVariant &);
		return ((__functype)(TVPImportFuncPtr60))(this, val2);
	}

	bool DiscernCompare(const tTJSVariant & val2) const
	{
		if(!TVPImportFuncPtr61)
		{
			static char funcname[] = "bool tTJSVariant::DiscernCompare(const tTJSVariant &) const";
			TVPImportFuncPtr61 = TVPGetImportFuncPtr(funcname);
		}
		typedef bool(__stdcall * __functype)(const tTJSVariant *, const tTJSVariant &);
		return ((__functype)(TVPImportFuncPtr61))(this, val2);
	}

	bool DiscernCompareStrictReal(const tTJSVariant & val2) const
	{
		if(!TVPImportFuncPtr62)
		{
			static char funcname[] = "bool tTJSVariant::DiscernCompareStrictReal(const tTJSVariant &) const";
			TVPImportFuncPtr62 = TVPGetImportFuncPtr(funcname);
		}
		typedef bool(__stdcall * __functype)(const tTJSVariant *, const tTJSVariant &);
		return ((__functype)(TVPImportFuncPtr62))(this, val2);
	}

	bool GreaterThan(const tTJSVariant & val2) const
	{
		if(!TVPImportFuncPtr63)
		{
			static char funcname[] = "bool tTJSVariant::GreaterThan(const tTJSVariant &) const";
			TVPImportFuncPtr63 = TVPGetImportFuncPtr(funcname);
		}
		typedef bool(__stdcall * __functype)(const tTJSVariant *, const tTJSVariant &);
		return ((__functype)(TVPImportFuncPtr63))(this, val2);
	}

	bool LittlerThan(const tTJSVariant & val2) const
	{
		if(!TVPImportFuncPtr64)
		{
			static char funcname[] = "bool tTJSVariant::LittlerThan(const tTJSVariant &) const";
			TVPImportFuncPtr64 = TVPGetImportFuncPtr(funcname);
		}
		typedef bool(__stdcall * __functype)(const tTJSVariant *, const tTJSVariant &);
		return ((__functype)(TVPImportFuncPtr64))(this, val2);
	}

	bool IsInstanceOf(const tjs_char * classname) const
	{
		if(!TVPImportFuncPtr65)
		{
			static char funcname[] = "bool tTJSVariant::IsInstanceOf(const tjs_char *) const";
			TVPImportFuncPtr65 = TVPGetImportFuncPtr(funcname);
		}
		typedef bool(__stdcall * __functype)(const tTJSVariant *, const tjs_char *);
		return ((__functype)(TVPImportFuncPtr65))(this, classname);
	}

	iTJSDispatch2 * AsObject() const
	{
		if(!TVPImportFuncPtr66)
		{
			static char funcname[] = "iTJSDispatch2 * tTJSVariant::AsObject() const";
			TVPImportFuncPtr66 = TVPGetImportFuncPtr(funcname);
		}
		typedef iTJSDispatch2 *(__stdcall * __functype)(const tTJSVariant *);
		return ((__functype)(TVPImportFuncPtr66))(this);
	}

	iTJSDispatch2 * AsObjectNoAddRef() const
	{
		if(!TVPImportFuncPtr67)
		{
			static char funcname[] = "iTJSDispatch2 * tTJSVariant::AsObjectNoAddRef() const";
			TVPImportFuncPtr67 = TVPGetImportFuncPtr(funcname);
		}
		typedef iTJSDispatch2 *(__stdcall * __functype)(const tTJSVariant *);
		return ((__functype)(TVPImportFuncPtr67))(this);
	}

	iTJSDispatch2 * AsObjectThis() const
	{
		if(!TVPImportFuncPtr68)
		{
			static char funcname[] = "iTJSDispatch2 * tTJSVariant::AsObjectThis() const";
			TVPImportFuncPtr68 = TVPGetImportFuncPtr(funcname);
		}
		typedef iTJSDispatch2 *(__stdcall * __functype)(const tTJSVariant *);
		return ((__functype)(TVPImportFuncPtr68))(this);
	}

	tTJSVariantClosure & AsObjectClosureNoAddRef() const
	{
		if(!TVPImportFuncPtr69)
		{
			static char funcname[] = "tTJSVariantClosure & tTJSVariant::AsObjectClosureNoAddRef() const";
			TVPImportFuncPtr69 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariantClosure &(__stdcall * __functype)(const tTJSVariant *);
		return ((__functype)(TVPImportFuncPtr69))(this);
	}

	tTJSVariantString * AsString() const
	{
		if(!TVPImportFuncPtr70)
		{
			static char funcname[] = "tTJSVariantString * tTJSVariant::AsString() const";
			TVPImportFuncPtr70 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariantString *(__stdcall * __functype)(const tTJSVariant *);
		return ((__functype)(TVPImportFuncPtr70))(this);
	}

	tTJSVariantString * AsStringNoAddRef() const
	{
		if(!TVPImportFuncPtr71)
		{
			static char funcname[] = "tTJSVariantString * tTJSVariant::AsStringNoAddRef() const";
			TVPImportFuncPtr71 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariantString *(__stdcall * __functype)(const tTJSVariant *);
		return ((__functype)(TVPImportFuncPtr71))(this);
	}

	const tjs_char * GetString() const
	{
		if(!TVPImportFuncPtr72)
		{
			static char funcname[] = "const tjs_char * tTJSVariant::GetString() const";
			TVPImportFuncPtr72 = TVPGetImportFuncPtr(funcname);
		}
		typedef const tjs_char *(__stdcall * __functype)(const tTJSVariant *);
		return ((__functype)(TVPImportFuncPtr72))(this);
	}

	tTJSVariantOctet * AsOctet() const
	{
		if(!TVPImportFuncPtr73)
		{
			static char funcname[] = "tTJSVariantOctet * tTJSVariant::AsOctet() const";
			TVPImportFuncPtr73 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariantOctet *(__stdcall * __functype)(const tTJSVariant *);
		return ((__functype)(TVPImportFuncPtr73))(this);
	}

	tTJSVariantOctet * AsOctetNoAddRef() const
	{
		if(!TVPImportFuncPtr74)
		{
			static char funcname[] = "tTJSVariantOctet * tTJSVariant::AsOctetNoAddRef() const";
			TVPImportFuncPtr74 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariantOctet *(__stdcall * __functype)(const tTJSVariant *);
		return ((__functype)(TVPImportFuncPtr74))(this);
	}

	tTVInteger AsInteger() const
	{
		if(!TVPImportFuncPtr75)
		{
			static char funcname[] = "tTVInteger tTJSVariant::AsInteger() const";
			TVPImportFuncPtr75 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTVInteger(__stdcall * __functype)(const tTJSVariant *);
		return ((__functype)(TVPImportFuncPtr75))(this);
	}

	void AsNumber(tTJSVariant & targ) const
	{
		if(!TVPImportFuncPtr76)
		{
			static char funcname[] = "void tTJSVariant::AsNumber(tTJSVariant &) const";
			TVPImportFuncPtr76 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(const tTJSVariant *, tTJSVariant &);
		((__functype)(TVPImportFuncPtr76))(this, targ);
	}

	operator tTVInteger() const
	{
		if(!TVPImportFuncPtr77)
		{
			static char funcname[] = "tTJSVariant::operator tTVInteger() const";
			TVPImportFuncPtr77 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTVInteger(__stdcall * __functype)(const tTJSVariant *);
		return ((__functype)(TVPImportFuncPtr77))(this);
	}

	operator bool() const
	{
		if(!TVPImportFuncPtr78)
		{
			static char funcname[] = "tTJSVariant::operator bool() const";
			TVPImportFuncPtr78 = TVPGetImportFuncPtr(funcname);
		}
		typedef bool(__stdcall * __functype)(const tTJSVariant *);
		return ((__functype)(TVPImportFuncPtr78))(this);
	}

	operator tjs_int() const
	{
		if(!TVPImportFuncPtr79)
		{
			static char funcname[] = "tTJSVariant::operator tjs_int() const";
			TVPImportFuncPtr79 = TVPGetImportFuncPtr(funcname);
		}
		typedef tjs_int(__stdcall * __functype)(const tTJSVariant *);
		return ((__functype)(TVPImportFuncPtr79))(this);
	}

	tTVReal AsReal() const
	{
		if(!TVPImportFuncPtr80)
		{
			static char funcname[] = "tTVReal tTJSVariant::AsReal() const";
			TVPImportFuncPtr80 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTVReal(__stdcall * __functype)(const tTJSVariant *);
		return ((__functype)(TVPImportFuncPtr80))(this);
	}

	operator tTVReal() const
	{
		if(!TVPImportFuncPtr81)
		{
			static char funcname[] = "tTJSVariant::operator tTVReal() const";
			TVPImportFuncPtr81 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTVReal(__stdcall * __functype)(const tTJSVariant *);
		return ((__functype)(TVPImportFuncPtr81))(this);
	}

	tTJSVariant operator ||(const tTJSVariant & rhs) const
	{
		if(!TVPImportFuncPtr82)
		{
			static char funcname[] = "tTJSVariant tTJSVariant::operator ||(const tTJSVariant &) const";
			TVPImportFuncPtr82 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant(__stdcall * __functype)(const tTJSVariant *, const tTJSVariant &);
		return ((__functype)(TVPImportFuncPtr82))(this, rhs);
	}

	tTJSVariant operator &&(const tTJSVariant & rhs) const
	{
		if(!TVPImportFuncPtr83)
		{
			static char funcname[] = "tTJSVariant tTJSVariant::operator &&(const tTJSVariant &) const";
			TVPImportFuncPtr83 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant(__stdcall * __functype)(const tTJSVariant *, const tTJSVariant &);
		return ((__functype)(TVPImportFuncPtr83))(this, rhs);
	}

	tTJSVariant operator |(const tTJSVariant & rhs) const
	{
		if(!TVPImportFuncPtr84)
		{
			static char funcname[] = "tTJSVariant tTJSVariant::operator |(const tTJSVariant &) const";
			TVPImportFuncPtr84 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant(__stdcall * __functype)(const tTJSVariant *, const tTJSVariant &);
		return ((__functype)(TVPImportFuncPtr84))(this, rhs);
	}

	tTJSVariant operator ^(const tTJSVariant & rhs) const
	{
		if(!TVPImportFuncPtr85)
		{
			static char funcname[] = "tTJSVariant tTJSVariant::operator ^(const tTJSVariant &) const";
			TVPImportFuncPtr85 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant(__stdcall * __functype)(const tTJSVariant *, const tTJSVariant &);
		return ((__functype)(TVPImportFuncPtr85))(this, rhs);
	}

	tTJSVariant operator &(const tTJSVariant & rhs) const
	{
		if(!TVPImportFuncPtr86)
		{
			static char funcname[] = "tTJSVariant tTJSVariant::operator &(const tTJSVariant &) const";
			TVPImportFuncPtr86 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant(__stdcall * __functype)(const tTJSVariant *, const tTJSVariant &);
		return ((__functype)(TVPImportFuncPtr86))(this, rhs);
	}

	tTJSVariant operator !=(const tTJSVariant & rhs) const
	{
		if(!TVPImportFuncPtr87)
		{
			static char funcname[] = "tTJSVariant tTJSVariant::operator !=(const tTJSVariant &) const";
			TVPImportFuncPtr87 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant(__stdcall * __functype)(const tTJSVariant *, const tTJSVariant &);
		return ((__functype)(TVPImportFuncPtr87))(this, rhs);
	}

	tTJSVariant operator ==(const tTJSVariant & rhs) const
	{
		if(!TVPImportFuncPtr88)
		{
			static char funcname[] = "tTJSVariant tTJSVariant::operator ==(const tTJSVariant &) const";
			TVPImportFuncPtr88 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant(__stdcall * __functype)(const tTJSVariant *, const tTJSVariant &);
		return ((__functype)(TVPImportFuncPtr88))(this, rhs);
	}

	tTJSVariant operator <(const tTJSVariant & rhs) const
	{
		if(!TVPImportFuncPtr89)
		{
			static char funcname[] = "tTJSVariant tTJSVariant::operator <(const tTJSVariant &) const";
			TVPImportFuncPtr89 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant(__stdcall * __functype)(const tTJSVariant *, const tTJSVariant &);
		return ((__functype)(TVPImportFuncPtr89))(this, rhs);
	}

	tTJSVariant operator >(const tTJSVariant & rhs) const
	{
		if(!TVPImportFuncPtr90)
		{
			static char funcname[] = "tTJSVariant tTJSVariant::operator >(const tTJSVariant &) const";
			TVPImportFuncPtr90 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant(__stdcall * __functype)(const tTJSVariant *, const tTJSVariant &);
		return ((__functype)(TVPImportFuncPtr90))(this, rhs);
	}

	tTJSVariant operator <=(const tTJSVariant & rhs) const
	{
		if(!TVPImportFuncPtr91)
		{
			static char funcname[] = "tTJSVariant tTJSVariant::operator <=(const tTJSVariant &) const";
			TVPImportFuncPtr91 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant(__stdcall * __functype)(const tTJSVariant *, const tTJSVariant &);
		return ((__functype)(TVPImportFuncPtr91))(this, rhs);
	}

	tTJSVariant operator >=(const tTJSVariant & rhs) const
	{
		if(!TVPImportFuncPtr92)
		{
			static char funcname[] = "tTJSVariant tTJSVariant::operator >=(const tTJSVariant &) const";
			TVPImportFuncPtr92 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant(__stdcall * __functype)(const tTJSVariant *, const tTJSVariant &);
		return ((__functype)(TVPImportFuncPtr92))(this, rhs);
	}

	tTJSVariant operator >>(const tTJSVariant & rhs) const
	{
		if(!TVPImportFuncPtr93)
		{
			static char funcname[] = "tTJSVariant tTJSVariant::operator >>(const tTJSVariant &) const";
			TVPImportFuncPtr93 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant(__stdcall * __functype)(const tTJSVariant *, const tTJSVariant &);
		return ((__functype)(TVPImportFuncPtr93))(this, rhs);
	}

	tTJSVariant rbitshift(tjs_int count) const
	{
		if(!TVPImportFuncPtr94)
		{
			static char funcname[] = "tTJSVariant tTJSVariant::rbitshift(tjs_int) const";
			TVPImportFuncPtr94 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant(__stdcall * __functype)(const tTJSVariant *, tjs_int);
		return ((__functype)(TVPImportFuncPtr94))(this, count);
	}

	tTJSVariant operator <<(const tTJSVariant & rhs) const
	{
		if(!TVPImportFuncPtr95)
		{
			static char funcname[] = "tTJSVariant tTJSVariant::operator <<(const tTJSVariant &) const";
			TVPImportFuncPtr95 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant(__stdcall * __functype)(const tTJSVariant *, const tTJSVariant &);
		return ((__functype)(TVPImportFuncPtr95))(this, rhs);
	}

	tTJSVariant operator %(const tTJSVariant & rhs) const
	{
		if(!TVPImportFuncPtr96)
		{
			static char funcname[] = "tTJSVariant tTJSVariant::operator %(const tTJSVariant &) const";
			TVPImportFuncPtr96 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant(__stdcall * __functype)(const tTJSVariant *, const tTJSVariant &);
		return ((__functype)(TVPImportFuncPtr96))(this, rhs);
	}

	tTJSVariant operator /(const tTJSVariant & rhs) const
	{
		if(!TVPImportFuncPtr97)
		{
			static char funcname[] = "tTJSVariant tTJSVariant::operator /(const tTJSVariant &) const";
			TVPImportFuncPtr97 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant(__stdcall * __functype)(const tTJSVariant *, const tTJSVariant &);
		return ((__functype)(TVPImportFuncPtr97))(this, rhs);
	}

	tTJSVariant idiv(const tTJSVariant & rhs) const
	{
		if(!TVPImportFuncPtr98)
		{
			static char funcname[] = "tTJSVariant tTJSVariant::idiv(const tTJSVariant &) const";
			TVPImportFuncPtr98 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant(__stdcall * __functype)(const tTJSVariant *, const tTJSVariant &);
		return ((__functype)(TVPImportFuncPtr98))(this, rhs);
	}

	tTJSVariant operator *(const tTJSVariant & rhs) const
	{
		if(!TVPImportFuncPtr99)
		{
			static char funcname[] = "tTJSVariant tTJSVariant::operator *(const tTJSVariant &) const";
			TVPImportFuncPtr99 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant(__stdcall * __functype)(const tTJSVariant *, const tTJSVariant &);
		return ((__functype)(TVPImportFuncPtr99))(this, rhs);
	}

	tTJSVariant operator !() const
	{
		if(!TVPImportFuncPtr100)
		{
			static char funcname[] = "tTJSVariant tTJSVariant::operator !() const";
			TVPImportFuncPtr100 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant(__stdcall * __functype)(const tTJSVariant *);
		return ((__functype)(TVPImportFuncPtr100))(this);
	}

	tTJSVariant operator ~() const
	{
		if(!TVPImportFuncPtr101)
		{
			static char funcname[] = "tTJSVariant tTJSVariant::operator ~() const";
			TVPImportFuncPtr101 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant(__stdcall * __functype)(const tTJSVariant *);
		return ((__functype)(TVPImportFuncPtr101))(this);
	}

	tTJSVariant operator -(const tTJSVariant & rhs) const
	{
		if(!TVPImportFuncPtr102)
		{
			static char funcname[] = "tTJSVariant tTJSVariant::operator -(const tTJSVariant &) const";
			TVPImportFuncPtr102 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant(__stdcall * __functype)(const tTJSVariant *, const tTJSVariant &);
		return ((__functype)(TVPImportFuncPtr102))(this, rhs);
	}

	tTJSVariant operator +() const
	{
		if(!TVPImportFuncPtr103)
		{
			static char funcname[] = "tTJSVariant tTJSVariant::operator +() const";
			TVPImportFuncPtr103 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant(__stdcall * __functype)(const tTJSVariant *);
		return ((__functype)(TVPImportFuncPtr103))(this);
	}

	tTJSVariant operator -() const
	{
		if(!TVPImportFuncPtr104)
		{
			static char funcname[] = "tTJSVariant tTJSVariant::operator -() const";
			TVPImportFuncPtr104 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant(__stdcall * __functype)(const tTJSVariant *);
		return ((__functype)(TVPImportFuncPtr104))(this);
	}

	tTJSVariant operator +(const tTJSVariant & rhs) const
	{
		if(!TVPImportFuncPtr105)
		{
			static char funcname[] = "tTJSVariant tTJSVariant::operator +(const tTJSVariant &) const";
			TVPImportFuncPtr105 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariant(__stdcall * __functype)(const tTJSVariant *, const tTJSVariant &);
		return ((__functype)(TVPImportFuncPtr105))(this, rhs);
	}

	static void * operator new(size_t size)
	{
		if(!TVPImportFuncPtr106)
		{
			static char funcname[] = "void * tTJSVariant::operator new(size_t)";
			TVPImportFuncPtr106 = TVPGetImportFuncPtr(funcname);
		}
		typedef void *(__stdcall * __functype)(size_t);
		return ((__functype)(TVPImportFuncPtr106))(size);
	}

	static void operator delete(void * p)
	{
		if(!TVPImportFuncPtr107)
		{
			static char funcname[] = "void tTJSVariant::operator delete(void *)";
			TVPImportFuncPtr107 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(void *);
		((__functype)(TVPImportFuncPtr107))(p);
	}

	static void * operator new [](size_t size)
	{
		if(!TVPImportFuncPtr108)
		{
			static char funcname[] = "void * tTJSVariant::operator new [](size_t)";
			TVPImportFuncPtr108 = TVPGetImportFuncPtr(funcname);
		}
		typedef void *(__stdcall * __functype)(size_t);
		return ((__functype)(TVPImportFuncPtr108))(size);
	}

	static void operator delete [](void * p)
	{
		if(!TVPImportFuncPtr109)
		{
			static char funcname[] = "void tTJSVariant::operator delete [](void *)";
			TVPImportFuncPtr109 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(void *);
		((__functype)(TVPImportFuncPtr109))(p);
	}

	static void * operator new(size_t size , void * buf)
	{
		if(!TVPImportFuncPtr110)
		{
			static char funcname[] = "void * tTJSVariant::operator new(size_t,void *)";
			TVPImportFuncPtr110 = TVPGetImportFuncPtr(funcname);
		}
		typedef void *(__stdcall * __functype)(size_t , void *);
		return ((__functype)(TVPImportFuncPtr110))(size, buf);
	}

};
//---------------------------------------------------------------------------
// tTJSString
//---------------------------------------------------------------------------

class tTJSString : protected tTJSString_S
{

public:
	tTJSString()
	{
		if(!TVPImportFuncPtr119)
		{
			static char funcname[] = "tTJSString::tTJSString()";
			TVPImportFuncPtr119 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSString *);
		((__functype)(TVPImportFuncPtr119))(this);
	}

	tTJSString(const tTJSString & rhs)
	{
		if(!TVPImportFuncPtr120)
		{
			static char funcname[] = "tTJSString::tTJSString(const tTJSString &)";
			TVPImportFuncPtr120 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSString *, const tTJSString &);
		((__functype)(TVPImportFuncPtr120))(this, rhs);
	}

	tTJSString(tTJSVariantString * vstr)
	{
		if(!TVPImportFuncPtr121)
		{
			static char funcname[] = "tTJSString::tTJSString(tTJSVariantString *)";
			TVPImportFuncPtr121 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSString *, tTJSVariantString *);
		((__functype)(TVPImportFuncPtr121))(this, vstr);
	}

	tTJSString(const tjs_char * str)
	{
		if(!TVPImportFuncPtr122)
		{
			static char funcname[] = "tTJSString::tTJSString(const tjs_char *)";
			TVPImportFuncPtr122 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSString *, const tjs_char *);
		((__functype)(TVPImportFuncPtr122))(this, str);
	}

	tTJSString(const tjs_nchar * str)
	{
		if(!TVPImportFuncPtr123)
		{
			static char funcname[] = "tTJSString::tTJSString(const tjs_nchar *)";
			TVPImportFuncPtr123 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSString *, const tjs_nchar *);
		((__functype)(TVPImportFuncPtr123))(this, str);
	}

	tTJSString(const tTJSStringBufferLength len)
	{
		if(!TVPImportFuncPtr124)
		{
			static char funcname[] = "tTJSString::tTJSString(const tTJSStringBufferLength)";
			TVPImportFuncPtr124 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSString *, const tTJSStringBufferLength);
		((__functype)(TVPImportFuncPtr124))(this, len);
	}

	tTJSString(tjs_char rch)
	{
		if(!TVPImportFuncPtr125)
		{
			static char funcname[] = "tTJSString::tTJSString(tjs_char)";
			TVPImportFuncPtr125 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSString *, tjs_char);
		((__functype)(TVPImportFuncPtr125))(this, rch);
	}

	tTJSString(const tTJSVariant & val)
	{
		if(!TVPImportFuncPtr126)
		{
			static char funcname[] = "tTJSString::tTJSString(const tTJSVariant &)";
			TVPImportFuncPtr126 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSString *, const tTJSVariant &);
		((__functype)(TVPImportFuncPtr126))(this, val);
	}

	tTJSString(const tTJSString & str , int n)
	{
		if(!TVPImportFuncPtr127)
		{
			static char funcname[] = "tTJSString::tTJSString(const tTJSString &,int)";
			TVPImportFuncPtr127 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSString *, const tTJSString &, int);
		((__functype)(TVPImportFuncPtr127))(this, str, n);
	}

	tTJSString(const tjs_char * str , int n)
	{
		if(!TVPImportFuncPtr128)
		{
			static char funcname[] = "tTJSString::tTJSString(const tjs_char *,int)";
			TVPImportFuncPtr128 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSString *, const tjs_char *, int);
		((__functype)(TVPImportFuncPtr128))(this, str, n);
	}

	tTJSString(tjs_int n)
	{
		if(!TVPImportFuncPtr129)
		{
			static char funcname[] = "tTJSString::tTJSString(tjs_int)";
			TVPImportFuncPtr129 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSString *, tjs_int);
		((__functype)(TVPImportFuncPtr129))(this, n);
	}

	~ tTJSString()
	{
		if(!TVPImportFuncPtr130)
		{
			static char funcname[] = "tTJSString::~ tTJSString()";
			TVPImportFuncPtr130 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSString *);
		((__functype)(TVPImportFuncPtr130))(this);
	}

	tTJSString & operator =(const tTJSString & rhs)
	{
		if(!TVPImportFuncPtr131)
		{
			static char funcname[] = "tTJSString & tTJSString::operator =(const tTJSString &)";
			TVPImportFuncPtr131 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSString &(__stdcall * __functype)(tTJSString *, const tTJSString &);
		return ((__functype)(TVPImportFuncPtr131))(this, rhs);
	}

	tTJSString & operator =(const tjs_char * rhs)
	{
		if(!TVPImportFuncPtr132)
		{
			static char funcname[] = "tTJSString & tTJSString::operator =(const tjs_char *)";
			TVPImportFuncPtr132 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSString &(__stdcall * __functype)(tTJSString *, const tjs_char *);
		return ((__functype)(TVPImportFuncPtr132))(this, rhs);
	}

	tTJSString & operator =(const tjs_nchar * rhs)
	{
		if(!TVPImportFuncPtr133)
		{
			static char funcname[] = "tTJSString & tTJSString::operator =(const tjs_nchar *)";
			TVPImportFuncPtr133 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSString &(__stdcall * __functype)(tTJSString *, const tjs_nchar *);
		return ((__functype)(TVPImportFuncPtr133))(this, rhs);
	}

	void operator +=(const tTJSString & ref)
	{
		if(!TVPImportFuncPtr134)
		{
			static char funcname[] = "void tTJSString::operator +=(const tTJSString &)";
			TVPImportFuncPtr134 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSString *, const tTJSString &);
		((__functype)(TVPImportFuncPtr134))(this, ref);
	}

	void operator +=(const tTJSVariantString * ref)
	{
		if(!TVPImportFuncPtr135)
		{
			static char funcname[] = "void tTJSString::operator +=(const tTJSVariantString *)";
			TVPImportFuncPtr135 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSString *, const tTJSVariantString *);
		((__functype)(TVPImportFuncPtr135))(this, ref);
	}

	void operator +=(const tjs_char * ref)
	{
		if(!TVPImportFuncPtr136)
		{
			static char funcname[] = "void tTJSString::operator +=(const tjs_char *)";
			TVPImportFuncPtr136 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSString *, const tjs_char *);
		((__functype)(TVPImportFuncPtr136))(this, ref);
	}

	void operator +=(tjs_char rch)
	{
		if(!TVPImportFuncPtr137)
		{
			static char funcname[] = "void tTJSString::operator +=(tjs_char)";
			TVPImportFuncPtr137 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSString *, tjs_char);
		((__functype)(TVPImportFuncPtr137))(this, rch);
	}

	void Clear()
	{
		if(!TVPImportFuncPtr138)
		{
			static char funcname[] = "void tTJSString::Clear()";
			TVPImportFuncPtr138 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSString *);
		((__functype)(TVPImportFuncPtr138))(this);
	}

	tjs_char * AllocBuffer(tjs_uint len)
	{
		if(!TVPImportFuncPtr139)
		{
			static char funcname[] = "tjs_char * tTJSString::AllocBuffer(tjs_uint)";
			TVPImportFuncPtr139 = TVPGetImportFuncPtr(funcname);
		}
		typedef tjs_char *(__stdcall * __functype)(tTJSString *, tjs_uint);
		return ((__functype)(TVPImportFuncPtr139))(this, len);
	}

	tjs_char * AppendBuffer(tjs_uint len)
	{
		if(!TVPImportFuncPtr140)
		{
			static char funcname[] = "tjs_char * tTJSString::AppendBuffer(tjs_uint)";
			TVPImportFuncPtr140 = TVPGetImportFuncPtr(funcname);
		}
		typedef tjs_char *(__stdcall * __functype)(tTJSString *, tjs_uint);
		return ((__functype)(TVPImportFuncPtr140))(this, len);
	}

	void FixLen()
	{
		if(!TVPImportFuncPtr141)
		{
			static char funcname[] = "void tTJSString::FixLen()";
			TVPImportFuncPtr141 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSString *);
		((__functype)(TVPImportFuncPtr141))(this);
	}

	void Replace(const tTJSString & from , const tTJSString & to , bool forall = true)
	{
		if(!TVPImportFuncPtr142)
		{
			static char funcname[] = "void tTJSString::Replace(const tTJSString &,const tTJSString &,bool)";
			TVPImportFuncPtr142 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSString *, const tTJSString &, const tTJSString &, bool);
		((__functype)(TVPImportFuncPtr142))(this, from, to, forall);
	}

	void ToLowerCase()
	{
		if(!TVPImportFuncPtr143)
		{
			static char funcname[] = "void tTJSString::ToLowerCase()";
			TVPImportFuncPtr143 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSString *);
		((__functype)(TVPImportFuncPtr143))(this);
	}

	void ToUppserCase()
	{
		if(!TVPImportFuncPtr144)
		{
			static char funcname[] = "void tTJSString::ToUppserCase()";
			TVPImportFuncPtr144 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(tTJSString *);
		((__functype)(TVPImportFuncPtr144))(this);
	}

	tjs_uint32 * GetHint()
	{
		if(!TVPImportFuncPtr145)
		{
			static char funcname[] = "tjs_uint32 * tTJSString::GetHint()";
			TVPImportFuncPtr145 = TVPGetImportFuncPtr(funcname);
		}
		typedef tjs_uint32 *(__stdcall * __functype)(tTJSString *);
		return ((__functype)(TVPImportFuncPtr145))(this);
	}

	tjs_char * Independ()
	{
		if(!TVPImportFuncPtr146)
		{
			static char funcname[] = "tjs_char * tTJSString::Independ()";
			TVPImportFuncPtr146 = TVPGetImportFuncPtr(funcname);
		}
		typedef tjs_char *(__stdcall * __functype)(tTJSString *);
		return ((__functype)(TVPImportFuncPtr146))(this);
	}

	const tjs_char * c_str() const
	{
		if(!TVPImportFuncPtr147)
		{
			static char funcname[] = "const tjs_char * tTJSString::c_str() const";
			TVPImportFuncPtr147 = TVPGetImportFuncPtr(funcname);
		}
		typedef const tjs_char *(__stdcall * __functype)(const tTJSString *);
		return ((__functype)(TVPImportFuncPtr147))(this);
	}

	tTJSVariantString * AsVariantStringNoAddRef() const
	{
		if(!TVPImportFuncPtr148)
		{
			static char funcname[] = "tTJSVariantString * tTJSString::AsVariantStringNoAddRef() const";
			TVPImportFuncPtr148 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSVariantString *(__stdcall * __functype)(const tTJSString *);
		return ((__functype)(TVPImportFuncPtr148))(this);
	}

	tjs_int64 AsInteger() const
	{
		if(!TVPImportFuncPtr149)
		{
			static char funcname[] = "tjs_int64 tTJSString::AsInteger() const";
			TVPImportFuncPtr149 = TVPGetImportFuncPtr(funcname);
		}
		typedef tjs_int64(__stdcall * __functype)(const tTJSString *);
		return ((__functype)(TVPImportFuncPtr149))(this);
	}

	bool operator ==(const tTJSString & ref) const
	{
		if(!TVPImportFuncPtr150)
		{
			static char funcname[] = "bool tTJSString::operator ==(const tTJSString &) const";
			TVPImportFuncPtr150 = TVPGetImportFuncPtr(funcname);
		}
		typedef bool(__stdcall * __functype)(const tTJSString *, const tTJSString &);
		return ((__functype)(TVPImportFuncPtr150))(this, ref);
	}

	bool operator !=(const tTJSString & ref) const
	{
		if(!TVPImportFuncPtr151)
		{
			static char funcname[] = "bool tTJSString::operator !=(const tTJSString &) const";
			TVPImportFuncPtr151 = TVPGetImportFuncPtr(funcname);
		}
		typedef bool(__stdcall * __functype)(const tTJSString *, const tTJSString &);
		return ((__functype)(TVPImportFuncPtr151))(this, ref);
	}

	tjs_int CompareIC(const tTJSString & ref) const
	{
		if(!TVPImportFuncPtr152)
		{
			static char funcname[] = "tjs_int tTJSString::CompareIC(const tTJSString &) const";
			TVPImportFuncPtr152 = TVPGetImportFuncPtr(funcname);
		}
		typedef tjs_int(__stdcall * __functype)(const tTJSString *, const tTJSString &);
		return ((__functype)(TVPImportFuncPtr152))(this, ref);
	}

	bool operator ==(const tjs_char * ref) const
	{
		if(!TVPImportFuncPtr153)
		{
			static char funcname[] = "bool tTJSString::operator ==(const tjs_char *) const";
			TVPImportFuncPtr153 = TVPGetImportFuncPtr(funcname);
		}
		typedef bool(__stdcall * __functype)(const tTJSString *, const tjs_char *);
		return ((__functype)(TVPImportFuncPtr153))(this, ref);
	}

	bool operator !=(const tjs_char * ref) const
	{
		if(!TVPImportFuncPtr154)
		{
			static char funcname[] = "bool tTJSString::operator !=(const tjs_char *) const";
			TVPImportFuncPtr154 = TVPGetImportFuncPtr(funcname);
		}
		typedef bool(__stdcall * __functype)(const tTJSString *, const tjs_char *);
		return ((__functype)(TVPImportFuncPtr154))(this, ref);
	}

	tjs_int CompareIC(const tjs_char * ref) const
	{
		if(!TVPImportFuncPtr155)
		{
			static char funcname[] = "tjs_int tTJSString::CompareIC(const tjs_char *) const";
			TVPImportFuncPtr155 = TVPGetImportFuncPtr(funcname);
		}
		typedef tjs_int(__stdcall * __functype)(const tTJSString *, const tjs_char *);
		return ((__functype)(TVPImportFuncPtr155))(this, ref);
	}

	bool operator <(const tTJSString & ref) const
	{
		if(!TVPImportFuncPtr156)
		{
			static char funcname[] = "bool tTJSString::operator <(const tTJSString &) const";
			TVPImportFuncPtr156 = TVPGetImportFuncPtr(funcname);
		}
		typedef bool(__stdcall * __functype)(const tTJSString *, const tTJSString &);
		return ((__functype)(TVPImportFuncPtr156))(this, ref);
	}

	bool operator >(const tTJSString & ref) const
	{
		if(!TVPImportFuncPtr157)
		{
			static char funcname[] = "bool tTJSString::operator >(const tTJSString &) const";
			TVPImportFuncPtr157 = TVPGetImportFuncPtr(funcname);
		}
		typedef bool(__stdcall * __functype)(const tTJSString *, const tTJSString &);
		return ((__functype)(TVPImportFuncPtr157))(this, ref);
	}

	tTJSString operator +(const tTJSString & ref) const
	{
		if(!TVPImportFuncPtr158)
		{
			static char funcname[] = "tTJSString tTJSString::operator +(const tTJSString &) const";
			TVPImportFuncPtr158 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSString(__stdcall * __functype)(const tTJSString *, const tTJSString &);
		return ((__functype)(TVPImportFuncPtr158))(this, ref);
	}

	tTJSString operator +(const tjs_char * ref) const
	{
		if(!TVPImportFuncPtr159)
		{
			static char funcname[] = "tTJSString tTJSString::operator +(const tjs_char *) const";
			TVPImportFuncPtr159 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSString(__stdcall * __functype)(const tTJSString *, const tjs_char *);
		return ((__functype)(TVPImportFuncPtr159))(this, ref);
	}

	tTJSString operator +(tjs_char rch) const
	{
		if(!TVPImportFuncPtr160)
		{
			static char funcname[] = "tTJSString tTJSString::operator +(tjs_char) const";
			TVPImportFuncPtr160 = TVPGetImportFuncPtr(funcname);
		}
		typedef tTJSString(__stdcall * __functype)(const tTJSString *, tjs_char);
		return ((__functype)(TVPImportFuncPtr160))(this, rch);
	}

	tjs_char operator [](tjs_uint i) const
	{
		if(!TVPImportFuncPtr161)
		{
			static char funcname[] = "tjs_char tTJSString::operator [](tjs_uint) const";
			TVPImportFuncPtr161 = TVPGetImportFuncPtr(funcname);
		}
		typedef tjs_char(__stdcall * __functype)(const tTJSString *, tjs_uint);
		return ((__functype)(TVPImportFuncPtr161))(this, i);
	}

	void AsLowerCase(tTJSString & dest) const
	{
		if(!TVPImportFuncPtr162)
		{
			static char funcname[] = "void tTJSString::AsLowerCase(tTJSString &) const";
			TVPImportFuncPtr162 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(const tTJSString *, tTJSString &);
		((__functype)(TVPImportFuncPtr162))(this, dest);
	}

	void AsUpperCase(tTJSString & dest) const
	{
		if(!TVPImportFuncPtr163)
		{
			static char funcname[] = "void tTJSString::AsUpperCase(tTJSString &) const";
			TVPImportFuncPtr163 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(const tTJSString *, tTJSString &);
		((__functype)(TVPImportFuncPtr163))(this, dest);
	}

	void EscapeC(tTJSString & dest) const
	{
		if(!TVPImportFuncPtr164)
		{
			static char funcname[] = "void tTJSString::EscapeC(tTJSString &) const";
			TVPImportFuncPtr164 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(const tTJSString *, tTJSString &);
		((__functype)(TVPImportFuncPtr164))(this, dest);
	}

	void UnescapeC(tTJSString & dest) const
	{
		if(!TVPImportFuncPtr165)
		{
			static char funcname[] = "void tTJSString::UnescapeC(tTJSString &) const";
			TVPImportFuncPtr165 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(const tTJSString *, tTJSString &);
		((__functype)(TVPImportFuncPtr165))(this, dest);
	}

	bool StartsWith(const tjs_char * string) const
	{
		if(!TVPImportFuncPtr166)
		{
			static char funcname[] = "bool tTJSString::StartsWith(const tjs_char *) const";
			TVPImportFuncPtr166 = TVPGetImportFuncPtr(funcname);
		}
		typedef bool(__stdcall * __functype)(const tTJSString *, const tjs_char *);
		return ((__functype)(TVPImportFuncPtr166))(this, string);
	}

	bool StartsWith(const tTJSString & string) const
	{
		if(!TVPImportFuncPtr167)
		{
			static char funcname[] = "bool tTJSString::StartsWith(const tTJSString &) const";
			TVPImportFuncPtr167 = TVPGetImportFuncPtr(funcname);
		}
		typedef bool(__stdcall * __functype)(const tTJSString *, const tTJSString &);
		return ((__functype)(TVPImportFuncPtr167))(this, string);
	}

	tjs_int GetNarrowStrLen() const
	{
		if(!TVPImportFuncPtr168)
		{
			static char funcname[] = "tjs_int tTJSString::GetNarrowStrLen() const";
			TVPImportFuncPtr168 = TVPGetImportFuncPtr(funcname);
		}
		typedef tjs_int(__stdcall * __functype)(const tTJSString *);
		return ((__functype)(TVPImportFuncPtr168))(this);
	}

	void ToNarrowStr(tjs_nchar * dest , tjs_int destmaxlen) const
	{
		if(!TVPImportFuncPtr169)
		{
			static char funcname[] = "void tTJSString::ToNarrowStr(tjs_nchar *,tjs_int) const";
			TVPImportFuncPtr169 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(const tTJSString *, tjs_nchar *, tjs_int);
		((__functype)(TVPImportFuncPtr169))(this, dest, destmaxlen);
	}

	bool IsEmpty() const
	{
		if(!TVPImportFuncPtr170)
		{
			static char funcname[] = "bool tTJSString::IsEmpty() const";
			TVPImportFuncPtr170 = TVPGetImportFuncPtr(funcname);
		}
		typedef bool(__stdcall * __functype)(const tTJSString *);
		return ((__functype)(TVPImportFuncPtr170))(this);
	}

	tjs_int GetLen() const
	{
		if(!TVPImportFuncPtr171)
		{
			static char funcname[] = "tjs_int tTJSString::GetLen() const";
			TVPImportFuncPtr171 = TVPGetImportFuncPtr(funcname);
		}
		typedef tjs_int(__stdcall * __functype)(const tTJSString *);
		return ((__functype)(TVPImportFuncPtr171))(this);
	}

	tjs_int length() const
	{
		if(!TVPImportFuncPtr172)
		{
			static char funcname[] = "tjs_int tTJSString::length() const";
			TVPImportFuncPtr172 = TVPGetImportFuncPtr(funcname);
		}
		typedef tjs_int(__stdcall * __functype)(const tTJSString *);
		return ((__functype)(TVPImportFuncPtr172))(this);
	}

	tjs_char GetLastChar() const
	{
		if(!TVPImportFuncPtr173)
		{
			static char funcname[] = "tjs_char tTJSString::GetLastChar() const";
			TVPImportFuncPtr173 = TVPGetImportFuncPtr(funcname);
		}
		typedef tjs_char(__stdcall * __functype)(const tTJSString *);
		return ((__functype)(TVPImportFuncPtr173))(this);
	}

	static void * operator new(size_t size)
	{
		if(!TVPImportFuncPtr174)
		{
			static char funcname[] = "void * tTJSString::operator new(size_t)";
			TVPImportFuncPtr174 = TVPGetImportFuncPtr(funcname);
		}
		typedef void *(__stdcall * __functype)(size_t);
		return ((__functype)(TVPImportFuncPtr174))(size);
	}

	static void operator delete(void * p)
	{
		if(!TVPImportFuncPtr175)
		{
			static char funcname[] = "void tTJSString::operator delete(void *)";
			TVPImportFuncPtr175 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(void *);
		((__functype)(TVPImportFuncPtr175))(p);
	}

	static void * operator new [](size_t size)
	{
		if(!TVPImportFuncPtr176)
		{
			static char funcname[] = "void * tTJSString::operator new [](size_t)";
			TVPImportFuncPtr176 = TVPGetImportFuncPtr(funcname);
		}
		typedef void *(__stdcall * __functype)(size_t);
		return ((__functype)(TVPImportFuncPtr176))(size);
	}

	static void operator delete [](void * p)
	{
		if(!TVPImportFuncPtr177)
		{
			static char funcname[] = "void tTJSString::operator delete [](void *)";
			TVPImportFuncPtr177 = TVPGetImportFuncPtr(funcname);
		}
		typedef void(__stdcall * __functype)(void *);
		((__functype)(TVPImportFuncPtr177))(p);
	}

	static void * operator new(size_t size , void * buf)
	{
		if(!TVPImportFuncPtr178)
		{
			static char funcname[] = "void * tTJSString::operator new(size_t,void *)";
			TVPImportFuncPtr178 = TVPGetImportFuncPtr(funcname);
		}
		typedef void *(__stdcall * __functype)(size_t , void *);
		return ((__functype)(TVPImportFuncPtr178))(size, buf);
	}

	
	friend tTJSString operator + (const tjs_char *lhs, const tTJSString &rhs);
	

};

//---------------------------------------------------------------------------
// stubs
//---------------------------------------------------------------------------

inline tjs_int TJS_atoi(const tjs_char * s)
{
	if(!TVPImportFuncPtr196)
	{
		static char funcname[] = "tjs_int ::TJS_atoi(const tjs_char *)";
		TVPImportFuncPtr196 = TVPGetImportFuncPtr(funcname);
	}
	typedef tjs_int (__stdcall * __functype)(const tjs_char *);
	return ((__functype)(TVPImportFuncPtr196))(s);
}
inline tjs_char * TJS_int_to_str(tjs_int value , tjs_char * string)
{
	if(!TVPImportFuncPtr197)
	{
		static char funcname[] = "tjs_char * ::TJS_int_to_str(tjs_int,tjs_char *)";
		TVPImportFuncPtr197 = TVPGetImportFuncPtr(funcname);
	}
	typedef tjs_char * (__stdcall * __functype)(tjs_int , tjs_char *);
	return ((__functype)(TVPImportFuncPtr197))(value, string);
}
inline tjs_char * TJS_tTVInt_to_str(tjs_int64 value , tjs_char * string)
{
	if(!TVPImportFuncPtr198)
	{
		static char funcname[] = "tjs_char * ::TJS_tTVInt_to_str(tjs_int64,tjs_char *)";
		TVPImportFuncPtr198 = TVPGetImportFuncPtr(funcname);
	}
	typedef tjs_char * (__stdcall * __functype)(tjs_int64 , tjs_char *);
	return ((__functype)(TVPImportFuncPtr198))(value, string);
}
inline tjs_int TJS_strnicmp(const tjs_char * s1 , const tjs_char * s2 , size_t maxlen)
{
	if(!TVPImportFuncPtr199)
	{
		static char funcname[] = "tjs_int ::TJS_strnicmp(const tjs_char *,const tjs_char *,size_t)";
		TVPImportFuncPtr199 = TVPGetImportFuncPtr(funcname);
	}
	typedef tjs_int (__stdcall * __functype)(const tjs_char *, const tjs_char *, size_t);
	return ((__functype)(TVPImportFuncPtr199))(s1, s2, maxlen);
}
inline tjs_int TJS_stricmp(const tjs_char * s1 , const tjs_char * s2)
{
	if(!TVPImportFuncPtr200)
	{
		static char funcname[] = "tjs_int ::TJS_stricmp(const tjs_char *,const tjs_char *)";
		TVPImportFuncPtr200 = TVPGetImportFuncPtr(funcname);
	}
	typedef tjs_int (__stdcall * __functype)(const tjs_char *, const tjs_char *);
	return ((__functype)(TVPImportFuncPtr200))(s1, s2);
}
inline void TJS_strcpy_maxlen(tjs_char * d , const tjs_char * s , size_t len)
{
	if(!TVPImportFuncPtr201)
	{
		static char funcname[] = "void ::TJS_strcpy_maxlen(tjs_char *,const tjs_char *,size_t)";
		TVPImportFuncPtr201 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_char *, const tjs_char *, size_t);
	((__functype)(TVPImportFuncPtr201))(d, s, len);
}
inline void TJS_strcpy(tjs_char * d , const tjs_char * s)
{
	if(!TVPImportFuncPtr202)
	{
		static char funcname[] = "void ::TJS_strcpy(tjs_char *,const tjs_char *)";
		TVPImportFuncPtr202 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_char *, const tjs_char *);
	((__functype)(TVPImportFuncPtr202))(d, s);
}
inline size_t TJS_strlen(const tjs_char * d)
{
	if(!TVPImportFuncPtr203)
	{
		static char funcname[] = "size_t ::TJS_strlen(const tjs_char *)";
		TVPImportFuncPtr203 = TVPGetImportFuncPtr(funcname);
	}
	typedef size_t (__stdcall * __functype)(const tjs_char *);
	return ((__functype)(TVPImportFuncPtr203))(d);
}
inline tjs_char * TJSVS_malloc(tjs_uint len)
{
	if(!TVPImportFuncPtr204)
	{
		static char funcname[] = "tjs_char * ::TJSVS_malloc(tjs_uint)";
		TVPImportFuncPtr204 = TVPGetImportFuncPtr(funcname);
	}
	typedef tjs_char * (__stdcall * __functype)(tjs_uint);
	return ((__functype)(TVPImportFuncPtr204))(len);
}
inline tjs_char * TJSVS_realloc(tjs_char * buf , tjs_uint len)
{
	if(!TVPImportFuncPtr205)
	{
		static char funcname[] = "tjs_char * ::TJSVS_realloc(tjs_char *,tjs_uint)";
		TVPImportFuncPtr205 = TVPGetImportFuncPtr(funcname);
	}
	typedef tjs_char * (__stdcall * __functype)(tjs_char *, tjs_uint);
	return ((__functype)(TVPImportFuncPtr205))(buf, len);
}
inline void TJSVS_free(tjs_char * buf)
{
	if(!TVPImportFuncPtr206)
	{
		static char funcname[] = "void ::TJSVS_free(tjs_char *)";
		TVPImportFuncPtr206 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_char *);
	((__functype)(TVPImportFuncPtr206))(buf);
}
inline tTJSVariantString * TJSAllocVariantString(const tjs_char * ref1 , const tjs_char * ref2)
{
	if(!TVPImportFuncPtr207)
	{
		static char funcname[] = "tTJSVariantString * ::TJSAllocVariantString(const tjs_char *,const tjs_char *)";
		TVPImportFuncPtr207 = TVPGetImportFuncPtr(funcname);
	}
	typedef tTJSVariantString * (__stdcall * __functype)(const tjs_char *, const tjs_char *);
	return ((__functype)(TVPImportFuncPtr207))(ref1, ref2);
}
inline tTJSVariantString * TJSAllocVariantString(const tjs_char * ref , tjs_int n)
{
	if(!TVPImportFuncPtr208)
	{
		static char funcname[] = "tTJSVariantString * ::TJSAllocVariantString(const tjs_char *,tjs_int)";
		TVPImportFuncPtr208 = TVPGetImportFuncPtr(funcname);
	}
	typedef tTJSVariantString * (__stdcall * __functype)(const tjs_char *, tjs_int);
	return ((__functype)(TVPImportFuncPtr208))(ref, n);
}
inline tTJSVariantString * TJSAllocVariantString(const tjs_char * ref)
{
	if(!TVPImportFuncPtr209)
	{
		static char funcname[] = "tTJSVariantString * ::TJSAllocVariantString(const tjs_char *)";
		TVPImportFuncPtr209 = TVPGetImportFuncPtr(funcname);
	}
	typedef tTJSVariantString * (__stdcall * __functype)(const tjs_char *);
	return ((__functype)(TVPImportFuncPtr209))(ref);
}
inline tTJSVariantString * TJSAllocVariantString(const tjs_nchar * ref)
{
	if(!TVPImportFuncPtr210)
	{
		static char funcname[] = "tTJSVariantString * ::TJSAllocVariantString(const tjs_nchar *)";
		TVPImportFuncPtr210 = TVPGetImportFuncPtr(funcname);
	}
	typedef tTJSVariantString * (__stdcall * __functype)(const tjs_nchar *);
	return ((__functype)(TVPImportFuncPtr210))(ref);
}
inline tTJSVariantString * TJSAllocVariantString(const tjs_uint8 * * src)
{
	if(!TVPImportFuncPtr211)
	{
		static char funcname[] = "tTJSVariantString * ::TJSAllocVariantString(const tjs_uint8 * *)";
		TVPImportFuncPtr211 = TVPGetImportFuncPtr(funcname);
	}
	typedef tTJSVariantString * (__stdcall * __functype)(const tjs_uint8 * *);
	return ((__functype)(TVPImportFuncPtr211))(src);
}
inline tTJSVariantString * TJSAllocVariantStringBuffer(tjs_uint len)
{
	if(!TVPImportFuncPtr212)
	{
		static char funcname[] = "tTJSVariantString * ::TJSAllocVariantStringBuffer(tjs_uint)";
		TVPImportFuncPtr212 = TVPGetImportFuncPtr(funcname);
	}
	typedef tTJSVariantString * (__stdcall * __functype)(tjs_uint);
	return ((__functype)(TVPImportFuncPtr212))(len);
}
inline tTJSVariantString * TJSAppendVariantString(tTJSVariantString * str , const tjs_char * app)
{
	if(!TVPImportFuncPtr213)
	{
		static char funcname[] = "tTJSVariantString * ::TJSAppendVariantString(tTJSVariantString *,const tjs_char *)";
		TVPImportFuncPtr213 = TVPGetImportFuncPtr(funcname);
	}
	typedef tTJSVariantString * (__stdcall * __functype)(tTJSVariantString *, const tjs_char *);
	return ((__functype)(TVPImportFuncPtr213))(str, app);
}
inline tTJSVariantString * TJSAppendVariantString(tTJSVariantString * str , const tTJSVariantString * app)
{
	if(!TVPImportFuncPtr214)
	{
		static char funcname[] = "tTJSVariantString * ::TJSAppendVariantString(tTJSVariantString *,const tTJSVariantString *)";
		TVPImportFuncPtr214 = TVPGetImportFuncPtr(funcname);
	}
	typedef tTJSVariantString * (__stdcall * __functype)(tTJSVariantString *, const tTJSVariantString *);
	return ((__functype)(TVPImportFuncPtr214))(str, app);
}
inline tTJSVariantString * TJSFormatString(const tjs_char * format , tjs_uint numparams , tTJSVariant * * params)
{
	if(!TVPImportFuncPtr215)
	{
		static char funcname[] = "tTJSVariantString * ::TJSFormatString(const tjs_char *,tjs_uint,tTJSVariant * *)";
		TVPImportFuncPtr215 = TVPGetImportFuncPtr(funcname);
	}
	typedef tTJSVariantString * (__stdcall * __functype)(const tjs_char *, tjs_uint , tTJSVariant * *);
	return ((__functype)(TVPImportFuncPtr215))(format, numparams, params);
}
inline const tjs_char * TJSVariantTypeToTypeString(tTJSVariantType type)
{
	if(!TVPImportFuncPtr216)
	{
		static char funcname[] = "const tjs_char * ::TJSVariantTypeToTypeString(tTJSVariantType)";
		TVPImportFuncPtr216 = TVPGetImportFuncPtr(funcname);
	}
	typedef const tjs_char * (__stdcall * __functype)(tTJSVariantType);
	return ((__functype)(TVPImportFuncPtr216))(type);
}
inline tTJSString TJSVariantToReadableString(const tTJSVariant & val , tjs_int maxlen = 512)
{
	if(!TVPImportFuncPtr217)
	{
		static char funcname[] = "tTJSString ::TJSVariantToReadableString(const tTJSVariant &,tjs_int)";
		TVPImportFuncPtr217 = TVPGetImportFuncPtr(funcname);
	}
	typedef tTJSString (__stdcall * __functype)(const tTJSVariant &, tjs_int);
	return ((__functype)(TVPImportFuncPtr217))(val, maxlen);
}
inline tTJSString TJSVariantToExpressionString(const tTJSVariant & val)
{
	if(!TVPImportFuncPtr218)
	{
		static char funcname[] = "tTJSString ::TJSVariantToExpressionString(const tTJSVariant &)";
		TVPImportFuncPtr218 = TVPGetImportFuncPtr(funcname);
	}
	typedef tTJSString (__stdcall * __functype)(const tTJSVariant &);
	return ((__functype)(TVPImportFuncPtr218))(val);
}
inline void * TJSAlignedAlloc(tjs_uint bytes , tjs_uint align_bits)
{
	if(!TVPImportFuncPtr219)
	{
		static char funcname[] = "void * ::TJSAlignedAlloc(tjs_uint,tjs_uint)";
		TVPImportFuncPtr219 = TVPGetImportFuncPtr(funcname);
	}
	typedef void * (__stdcall * __functype)(tjs_uint , tjs_uint);
	return ((__functype)(TVPImportFuncPtr219))(bytes, align_bits);
}
inline void TJSAlignedDealloc(void * ptr)
{
	if(!TVPImportFuncPtr220)
	{
		static char funcname[] = "void ::TJSAlignedDealloc(void *)";
		TVPImportFuncPtr220 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(void *);
	((__functype)(TVPImportFuncPtr220))(ptr);
}
inline tjs_uint32 TJSGetFPClass(tjs_real r)
{
	if(!TVPImportFuncPtr221)
	{
		static char funcname[] = "tjs_uint32 ::TJSGetFPClass(tjs_real)";
		TVPImportFuncPtr221 = TVPGetImportFuncPtr(funcname);
	}
	typedef tjs_uint32 (__stdcall * __functype)(tjs_real);
	return ((__functype)(TVPImportFuncPtr221))(r);
}
inline tTJSString operator +(const tjs_char * lhs , const tTJSString & rhs)
{
	if(!TVPImportFuncPtr222)
	{
		static char funcname[] = "tTJSString ::operator +(const tjs_char *,const tTJSString &)";
		TVPImportFuncPtr222 = TVPGetImportFuncPtr(funcname);
	}
	typedef tTJSString (__stdcall * __functype)(const tjs_char *, const tTJSString &);
	return ((__functype)(TVPImportFuncPtr222))(lhs, rhs);
}
inline tTJSString TJSInt32ToHex(tjs_uint32 num , int zeropad = 8)
{
	if(!TVPImportFuncPtr223)
	{
		static char funcname[] = "tTJSString ::TJSInt32ToHex(tjs_uint32,int)";
		TVPImportFuncPtr223 = TVPGetImportFuncPtr(funcname);
	}
	typedef tTJSString (__stdcall * __functype)(tjs_uint32 , int);
	return ((__functype)(TVPImportFuncPtr223))(num, zeropad);
}
inline tjs_int32 TJSRegisterNativeClass(const tjs_char * name)
{
	if(!TVPImportFuncPtr224)
	{
		static char funcname[] = "tjs_int32 ::TJSRegisterNativeClass(const tjs_char *)";
		TVPImportFuncPtr224 = TVPGetImportFuncPtr(funcname);
	}
	typedef tjs_int32 (__stdcall * __functype)(const tjs_char *);
	return ((__functype)(TVPImportFuncPtr224))(name);
}
inline tjs_int32 TJSFindNativeClassID(const tjs_char * name)
{
	if(!TVPImportFuncPtr225)
	{
		static char funcname[] = "tjs_int32 ::TJSFindNativeClassID(const tjs_char *)";
		TVPImportFuncPtr225 = TVPGetImportFuncPtr(funcname);
	}
	typedef tjs_int32 (__stdcall * __functype)(const tjs_char *);
	return ((__functype)(TVPImportFuncPtr225))(name);
}
inline const tjs_char * TJSFindNativeClassName(tjs_int32 id)
{
	if(!TVPImportFuncPtr226)
	{
		static char funcname[] = "const tjs_char * ::TJSFindNativeClassName(tjs_int32)";
		TVPImportFuncPtr226 = TVPGetImportFuncPtr(funcname);
	}
	typedef const tjs_char * (__stdcall * __functype)(tjs_int32);
	return ((__functype)(TVPImportFuncPtr226))(id);
}
inline void TJSThrowNullAccess()
{
	if(!TVPImportFuncPtr227)
	{
		static char funcname[] = "void ::TJSThrowNullAccess()";
		TVPImportFuncPtr227 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)();
	((__functype)(TVPImportFuncPtr227))();
}
inline void TJSThrowDivideByZero()
{
	if(!TVPImportFuncPtr228)
	{
		static char funcname[] = "void ::TJSThrowDivideByZero()";
		TVPImportFuncPtr228 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)();
	((__functype)(TVPImportFuncPtr228))();
}
inline tTJSVariantOctet * TJSAllocVariantOctet(const tjs_uint8 * data , tjs_uint length)
{
	if(!TVPImportFuncPtr229)
	{
		static char funcname[] = "tTJSVariantOctet * ::TJSAllocVariantOctet(const tjs_uint8 *,tjs_uint)";
		TVPImportFuncPtr229 = TVPGetImportFuncPtr(funcname);
	}
	typedef tTJSVariantOctet * (__stdcall * __functype)(const tjs_uint8 *, tjs_uint);
	return ((__functype)(TVPImportFuncPtr229))(data, length);
}
inline tTJSVariantOctet * TJSAllocVariantOctet(const tjs_uint8 * data1 , tjs_uint len1 , const tjs_uint8 * data2 , tjs_uint len2)
{
	if(!TVPImportFuncPtr230)
	{
		static char funcname[] = "tTJSVariantOctet * ::TJSAllocVariantOctet(const tjs_uint8 *,tjs_uint,const tjs_uint8 *,tjs_uint)";
		TVPImportFuncPtr230 = TVPGetImportFuncPtr(funcname);
	}
	typedef tTJSVariantOctet * (__stdcall * __functype)(const tjs_uint8 *, tjs_uint , const tjs_uint8 *, tjs_uint);
	return ((__functype)(TVPImportFuncPtr230))(data1, len1, data2, len2);
}
inline tTJSVariantOctet * TJSAllocVariantOctet(const tTJSVariantOctet * o1 , const tTJSVariantOctet * o2)
{
	if(!TVPImportFuncPtr231)
	{
		static char funcname[] = "tTJSVariantOctet * ::TJSAllocVariantOctet(const tTJSVariantOctet *,const tTJSVariantOctet *)";
		TVPImportFuncPtr231 = TVPGetImportFuncPtr(funcname);
	}
	typedef tTJSVariantOctet * (__stdcall * __functype)(const tTJSVariantOctet *, const tTJSVariantOctet *);
	return ((__functype)(TVPImportFuncPtr231))(o1, o2);
}
inline tTJSVariantOctet * TJSAllocVariantOctet(const tjs_uint8 * * src)
{
	if(!TVPImportFuncPtr232)
	{
		static char funcname[] = "tTJSVariantOctet * ::TJSAllocVariantOctet(const tjs_uint8 * *)";
		TVPImportFuncPtr232 = TVPGetImportFuncPtr(funcname);
	}
	typedef tTJSVariantOctet * (__stdcall * __functype)(const tjs_uint8 * *);
	return ((__functype)(TVPImportFuncPtr232))(src);
}
inline void TJSDeallocVariantOctet(tTJSVariantOctet * o)
{
	if(!TVPImportFuncPtr233)
	{
		static char funcname[] = "void ::TJSDeallocVariantOctet(tTJSVariantOctet *)";
		TVPImportFuncPtr233 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tTJSVariantOctet *);
	((__functype)(TVPImportFuncPtr233))(o);
}
inline tTJSVariantString * TJSOctetToListString(const tTJSVariantOctet * oct)
{
	if(!TVPImportFuncPtr234)
	{
		static char funcname[] = "tTJSVariantString * ::TJSOctetToListString(const tTJSVariantOctet *)";
		TVPImportFuncPtr234 = TVPGetImportFuncPtr(funcname);
	}
	typedef tTJSVariantString * (__stdcall * __functype)(const tTJSVariantOctet *);
	return ((__functype)(TVPImportFuncPtr234))(oct);
}
inline tTJSVariantString * TJSObjectToString(const tTJSVariantClosure & dsp)
{
	if(!TVPImportFuncPtr235)
	{
		static char funcname[] = "tTJSVariantString * ::TJSObjectToString(const tTJSVariantClosure &)";
		TVPImportFuncPtr235 = TVPGetImportFuncPtr(funcname);
	}
	typedef tTJSVariantString * (__stdcall * __functype)(const tTJSVariantClosure &);
	return ((__functype)(TVPImportFuncPtr235))(dsp);
}
inline tTJSVariantString * TJSIntegerToString(tjs_int64 i)
{
	if(!TVPImportFuncPtr236)
	{
		static char funcname[] = "tTJSVariantString * ::TJSIntegerToString(tjs_int64)";
		TVPImportFuncPtr236 = TVPGetImportFuncPtr(funcname);
	}
	typedef tTJSVariantString * (__stdcall * __functype)(tjs_int64);
	return ((__functype)(TVPImportFuncPtr236))(i);
}
inline tTJSVariantString * TJSRealToString(tjs_real r)
{
	if(!TVPImportFuncPtr237)
	{
		static char funcname[] = "tTJSVariantString * ::TJSRealToString(tjs_real)";
		TVPImportFuncPtr237 = TVPGetImportFuncPtr(funcname);
	}
	typedef tTJSVariantString * (__stdcall * __functype)(tjs_real);
	return ((__functype)(TVPImportFuncPtr237))(r);
}
inline tTJSVariantString * TJSRealToHexString(tjs_real r)
{
	if(!TVPImportFuncPtr238)
	{
		static char funcname[] = "tTJSVariantString * ::TJSRealToHexString(tjs_real)";
		TVPImportFuncPtr238 = TVPGetImportFuncPtr(funcname);
	}
	typedef tTJSVariantString * (__stdcall * __functype)(tjs_real);
	return ((__functype)(TVPImportFuncPtr238))(r);
}
inline tTVInteger TJSStringToInteger(const tjs_char * str)
{
	if(!TVPImportFuncPtr239)
	{
		static char funcname[] = "tTVInteger ::TJSStringToInteger(const tjs_char *)";
		TVPImportFuncPtr239 = TVPGetImportFuncPtr(funcname);
	}
	typedef tTVInteger (__stdcall * __functype)(const tjs_char *);
	return ((__functype)(TVPImportFuncPtr239))(str);
}
inline tTVReal TJSStringToReal(const tjs_char * str)
{
	if(!TVPImportFuncPtr240)
	{
		static char funcname[] = "tTVReal ::TJSStringToReal(const tjs_char *)";
		TVPImportFuncPtr240 = TVPGetImportFuncPtr(funcname);
	}
	typedef tTVReal (__stdcall * __functype)(const tjs_char *);
	return ((__functype)(TVPImportFuncPtr240))(str);
}
inline ttstr TVPGetTemporaryName()
{
	if(!TVPImportFuncPtr241)
	{
		static char funcname[] = "ttstr ::TVPGetTemporaryName()";
		TVPImportFuncPtr241 = TVPGetImportFuncPtr(funcname);
	}
	typedef ttstr (__stdcall * __functype)();
	return ((__functype)(TVPImportFuncPtr241))();
}
inline ttstr TVPGetAppPath()
{
	if(!TVPImportFuncPtr242)
	{
		static char funcname[] = "ttstr ::TVPGetAppPath()";
		TVPImportFuncPtr242 = TVPGetImportFuncPtr(funcname);
	}
	typedef ttstr (__stdcall * __functype)();
	return ((__functype)(TVPImportFuncPtr242))();
}
inline void TVPRegisterStorageMedia(iTVPStorageMedia * media)
{
	if(!TVPImportFuncPtr243)
	{
		static char funcname[] = "void ::TVPRegisterStorageMedia(iTVPStorageMedia *)";
		TVPImportFuncPtr243 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(iTVPStorageMedia *);
	((__functype)(TVPImportFuncPtr243))(media);
}
inline void TVPUnregisterStorageMedia(iTVPStorageMedia * media)
{
	if(!TVPImportFuncPtr244)
	{
		static char funcname[] = "void ::TVPUnregisterStorageMedia(iTVPStorageMedia *)";
		TVPImportFuncPtr244 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(iTVPStorageMedia *);
	((__functype)(TVPImportFuncPtr244))(media);
}
inline bool TVPIsExistentStorageNoSearch(const ttstr & name)
{
	if(!TVPImportFuncPtr245)
	{
		static char funcname[] = "bool ::TVPIsExistentStorageNoSearch(const ttstr &)";
		TVPImportFuncPtr245 = TVPGetImportFuncPtr(funcname);
	}
	typedef bool (__stdcall * __functype)(const ttstr &);
	return ((__functype)(TVPImportFuncPtr245))(name);
}
inline bool TVPIsExistentStorageNoSearchNoNormalize(const ttstr & name)
{
	if(!TVPImportFuncPtr246)
	{
		static char funcname[] = "bool ::TVPIsExistentStorageNoSearchNoNormalize(const ttstr &)";
		TVPImportFuncPtr246 = TVPGetImportFuncPtr(funcname);
	}
	typedef bool (__stdcall * __functype)(const ttstr &);
	return ((__functype)(TVPImportFuncPtr246))(name);
}
inline ttstr TVPNormalizeStorageName(const ttstr & name)
{
	if(!TVPImportFuncPtr247)
	{
		static char funcname[] = "ttstr ::TVPNormalizeStorageName(const ttstr &)";
		TVPImportFuncPtr247 = TVPGetImportFuncPtr(funcname);
	}
	typedef ttstr (__stdcall * __functype)(const ttstr &);
	return ((__functype)(TVPImportFuncPtr247))(name);
}
inline void TVPSetCurrentDirectory(const ttstr & name)
{
	if(!TVPImportFuncPtr248)
	{
		static char funcname[] = "void ::TVPSetCurrentDirectory(const ttstr &)";
		TVPImportFuncPtr248 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(const ttstr &);
	((__functype)(TVPImportFuncPtr248))(name);
}
inline void TVPGetLocalName(ttstr & name)
{
	if(!TVPImportFuncPtr249)
	{
		static char funcname[] = "void ::TVPGetLocalName(ttstr &)";
		TVPImportFuncPtr249 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(ttstr &);
	((__functype)(TVPImportFuncPtr249))(name);
}
inline ttstr TVPExtractStorageExt(const ttstr & name)
{
	if(!TVPImportFuncPtr250)
	{
		static char funcname[] = "ttstr ::TVPExtractStorageExt(const ttstr &)";
		TVPImportFuncPtr250 = TVPGetImportFuncPtr(funcname);
	}
	typedef ttstr (__stdcall * __functype)(const ttstr &);
	return ((__functype)(TVPImportFuncPtr250))(name);
}
inline ttstr TVPExtractStorageName(const ttstr & name)
{
	if(!TVPImportFuncPtr251)
	{
		static char funcname[] = "ttstr ::TVPExtractStorageName(const ttstr &)";
		TVPImportFuncPtr251 = TVPGetImportFuncPtr(funcname);
	}
	typedef ttstr (__stdcall * __functype)(const ttstr &);
	return ((__functype)(TVPImportFuncPtr251))(name);
}
inline ttstr TVPExtractStoragePath(const ttstr & name)
{
	if(!TVPImportFuncPtr252)
	{
		static char funcname[] = "ttstr ::TVPExtractStoragePath(const ttstr &)";
		TVPImportFuncPtr252 = TVPGetImportFuncPtr(funcname);
	}
	typedef ttstr (__stdcall * __functype)(const ttstr &);
	return ((__functype)(TVPImportFuncPtr252))(name);
}
inline ttstr TVPChopStorageExt(const ttstr & name)
{
	if(!TVPImportFuncPtr253)
	{
		static char funcname[] = "ttstr ::TVPChopStorageExt(const ttstr &)";
		TVPImportFuncPtr253 = TVPGetImportFuncPtr(funcname);
	}
	typedef ttstr (__stdcall * __functype)(const ttstr &);
	return ((__functype)(TVPImportFuncPtr253))(name);
}
inline void TVPAddAutoPath(const ttstr & name)
{
	if(!TVPImportFuncPtr254)
	{
		static char funcname[] = "void ::TVPAddAutoPath(const ttstr &)";
		TVPImportFuncPtr254 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(const ttstr &);
	((__functype)(TVPImportFuncPtr254))(name);
}
inline void TVPRemoveAutoPath(const ttstr & name)
{
	if(!TVPImportFuncPtr255)
	{
		static char funcname[] = "void ::TVPRemoveAutoPath(const ttstr &)";
		TVPImportFuncPtr255 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(const ttstr &);
	((__functype)(TVPImportFuncPtr255))(name);
}
inline ttstr TVPGetPlacedPath(const ttstr & name)
{
	if(!TVPImportFuncPtr256)
	{
		static char funcname[] = "ttstr ::TVPGetPlacedPath(const ttstr &)";
		TVPImportFuncPtr256 = TVPGetImportFuncPtr(funcname);
	}
	typedef ttstr (__stdcall * __functype)(const ttstr &);
	return ((__functype)(TVPImportFuncPtr256))(name);
}
inline bool TVPIsExistentStorage(const ttstr & name)
{
	if(!TVPImportFuncPtr257)
	{
		static char funcname[] = "bool ::TVPIsExistentStorage(const ttstr &)";
		TVPImportFuncPtr257 = TVPGetImportFuncPtr(funcname);
	}
	typedef bool (__stdcall * __functype)(const ttstr &);
	return ((__functype)(TVPImportFuncPtr257))(name);
}
inline void TVPClearStorageCaches()
{
	if(!TVPImportFuncPtr258)
	{
		static char funcname[] = "void ::TVPClearStorageCaches()";
		TVPImportFuncPtr258 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)();
	((__functype)(TVPImportFuncPtr258))();
}
inline void TVPSetXP3ArchiveExtractionFilter(tTVPXP3ArchiveExtractionFilter filter)
{
	if(!TVPImportFuncPtr259)
	{
		static char funcname[] = "void ::TVPSetXP3ArchiveExtractionFilter(tTVPXP3ArchiveExtractionFilter)";
		TVPImportFuncPtr259 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tTVPXP3ArchiveExtractionFilter);
	((__functype)(TVPImportFuncPtr259))(filter);
}
inline void TVPBreathe()
{
	if(!TVPImportFuncPtr260)
	{
		static char funcname[] = "void ::TVPBreathe()";
		TVPImportFuncPtr260 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)();
	((__functype)(TVPImportFuncPtr260))();
}
inline bool TVPGetBreathing()
{
	if(!TVPImportFuncPtr261)
	{
		static char funcname[] = "bool ::TVPGetBreathing()";
		TVPImportFuncPtr261 = TVPGetImportFuncPtr(funcname);
	}
	typedef bool (__stdcall * __functype)();
	return ((__functype)(TVPImportFuncPtr261))();
}
inline void TVPSetSystemEventDisabledState(bool en)
{
	if(!TVPImportFuncPtr262)
	{
		static char funcname[] = "void ::TVPSetSystemEventDisabledState(bool)";
		TVPImportFuncPtr262 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(bool);
	((__functype)(TVPImportFuncPtr262))(en);
}
inline bool TVPGetSystemEventDisabledState()
{
	if(!TVPImportFuncPtr263)
	{
		static char funcname[] = "bool ::TVPGetSystemEventDisabledState()";
		TVPImportFuncPtr263 = TVPGetImportFuncPtr(funcname);
	}
	typedef bool (__stdcall * __functype)();
	return ((__functype)(TVPImportFuncPtr263))();
}
inline void TVPPostEvent(iTJSDispatch2 * source , iTJSDispatch2 * target , ttstr & eventname , tjs_uint32 tag , tjs_uint32 flag , tjs_uint numargs , tTJSVariant * args)
{
	if(!TVPImportFuncPtr264)
	{
		static char funcname[] = "void ::TVPPostEvent(iTJSDispatch2 *,iTJSDispatch2 *,ttstr &,tjs_uint32,tjs_uint32,tjs_uint,tTJSVariant *)";
		TVPImportFuncPtr264 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(iTJSDispatch2 *, iTJSDispatch2 *, ttstr &, tjs_uint32 , tjs_uint32 , tjs_uint , tTJSVariant *);
	((__functype)(TVPImportFuncPtr264))(source, target, eventname, tag, flag, numargs, args);
}
inline tjs_int TVPCancelEvents(iTJSDispatch2 * source , iTJSDispatch2 * target , const ttstr & eventname , tjs_uint32 tag = 0)
{
	if(!TVPImportFuncPtr265)
	{
		static char funcname[] = "tjs_int ::TVPCancelEvents(iTJSDispatch2 *,iTJSDispatch2 *,const ttstr &,tjs_uint32)";
		TVPImportFuncPtr265 = TVPGetImportFuncPtr(funcname);
	}
	typedef tjs_int (__stdcall * __functype)(iTJSDispatch2 *, iTJSDispatch2 *, const ttstr &, tjs_uint32);
	return ((__functype)(TVPImportFuncPtr265))(source, target, eventname, tag);
}
inline bool TVPAreEventsInQueue(iTJSDispatch2 * source , iTJSDispatch2 * target , const ttstr & eventname , tjs_uint32 tag)
{
	if(!TVPImportFuncPtr266)
	{
		static char funcname[] = "bool ::TVPAreEventsInQueue(iTJSDispatch2 *,iTJSDispatch2 *,const ttstr &,tjs_uint32)";
		TVPImportFuncPtr266 = TVPGetImportFuncPtr(funcname);
	}
	typedef bool (__stdcall * __functype)(iTJSDispatch2 *, iTJSDispatch2 *, const ttstr &, tjs_uint32);
	return ((__functype)(TVPImportFuncPtr266))(source, target, eventname, tag);
}
inline tjs_int TVPCountEventsInQueue(iTJSDispatch2 * source , iTJSDispatch2 * target , const ttstr & eventname , tjs_uint32 tag)
{
	if(!TVPImportFuncPtr267)
	{
		static char funcname[] = "tjs_int ::TVPCountEventsInQueue(iTJSDispatch2 *,iTJSDispatch2 *,const ttstr &,tjs_uint32)";
		TVPImportFuncPtr267 = TVPGetImportFuncPtr(funcname);
	}
	typedef tjs_int (__stdcall * __functype)(iTJSDispatch2 *, iTJSDispatch2 *, const ttstr &, tjs_uint32);
	return ((__functype)(TVPImportFuncPtr267))(source, target, eventname, tag);
}
inline void TVPCancelEventsByTag(iTJSDispatch2 * source , iTJSDispatch2 * target , tjs_uint32 tag = 0)
{
	if(!TVPImportFuncPtr268)
	{
		static char funcname[] = "void ::TVPCancelEventsByTag(iTJSDispatch2 *,iTJSDispatch2 *,tjs_uint32)";
		TVPImportFuncPtr268 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(iTJSDispatch2 *, iTJSDispatch2 *, tjs_uint32);
	((__functype)(TVPImportFuncPtr268))(source, target, tag);
}
inline void TVPCancelSourceEvents(iTJSDispatch2 * source)
{
	if(!TVPImportFuncPtr269)
	{
		static char funcname[] = "void ::TVPCancelSourceEvents(iTJSDispatch2 *)";
		TVPImportFuncPtr269 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(iTJSDispatch2 *);
	((__functype)(TVPImportFuncPtr269))(source);
}
inline iTJSDispatch2 * TVPCreateEventObject(const tjs_char * type , iTJSDispatch2 * targthis , iTJSDispatch2 * targ)
{
	if(!TVPImportFuncPtr270)
	{
		static char funcname[] = "iTJSDispatch2 * ::TVPCreateEventObject(const tjs_char *,iTJSDispatch2 *,iTJSDispatch2 *)";
		TVPImportFuncPtr270 = TVPGetImportFuncPtr(funcname);
	}
	typedef iTJSDispatch2 * (__stdcall * __functype)(const tjs_char *, iTJSDispatch2 *, iTJSDispatch2 *);
	return ((__functype)(TVPImportFuncPtr270))(type, targthis, targ);
}
inline void TVPAddContinuousEventHook(tTVPContinuousEventCallbackIntf * cb)
{
	if(!TVPImportFuncPtr271)
	{
		static char funcname[] = "void ::TVPAddContinuousEventHook(tTVPContinuousEventCallbackIntf *)";
		TVPImportFuncPtr271 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tTVPContinuousEventCallbackIntf *);
	((__functype)(TVPImportFuncPtr271))(cb);
}
inline void TVPRemoveContinuousEventHook(tTVPContinuousEventCallbackIntf * cb)
{
	if(!TVPImportFuncPtr272)
	{
		static char funcname[] = "void ::TVPRemoveContinuousEventHook(tTVPContinuousEventCallbackIntf *)";
		TVPImportFuncPtr272 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tTVPContinuousEventCallbackIntf *);
	((__functype)(TVPImportFuncPtr272))(cb);
}
inline void TVPAddCompactEventHook(tTVPCompactEventCallbackIntf * cb)
{
	if(!TVPImportFuncPtr273)
	{
		static char funcname[] = "void ::TVPAddCompactEventHook(tTVPCompactEventCallbackIntf *)";
		TVPImportFuncPtr273 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tTVPCompactEventCallbackIntf *);
	((__functype)(TVPImportFuncPtr273))(cb);
}
inline void TVPRemoveCompactEventHook(tTVPCompactEventCallbackIntf * cb)
{
	if(!TVPImportFuncPtr274)
	{
		static char funcname[] = "void ::TVPRemoveCompactEventHook(tTVPCompactEventCallbackIntf *)";
		TVPImportFuncPtr274 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tTVPCompactEventCallbackIntf *);
	((__functype)(TVPImportFuncPtr274))(cb);
}
inline ttstr TVPGetPlatformName()
{
	if(!TVPImportFuncPtr275)
	{
		static char funcname[] = "ttstr ::TVPGetPlatformName()";
		TVPImportFuncPtr275 = TVPGetImportFuncPtr(funcname);
	}
	typedef ttstr (__stdcall * __functype)();
	return ((__functype)(TVPImportFuncPtr275))();
}
inline ttstr TVPGetOSName()
{
	if(!TVPImportFuncPtr276)
	{
		static char funcname[] = "ttstr ::TVPGetOSName()";
		TVPImportFuncPtr276 = TVPGetImportFuncPtr(funcname);
	}
	typedef ttstr (__stdcall * __functype)();
	return ((__functype)(TVPImportFuncPtr276))();
}
inline bool TVPGetAsyncKeyState(tjs_uint keycode , bool getcurrent = true)
{
	if(!TVPImportFuncPtr277)
	{
		static char funcname[] = "bool ::TVPGetAsyncKeyState(tjs_uint,bool)";
		TVPImportFuncPtr277 = TVPGetImportFuncPtr(funcname);
	}
	typedef bool (__stdcall * __functype)(tjs_uint , bool);
	return ((__functype)(TVPImportFuncPtr277))(keycode, getcurrent);
}
inline iTJSDispatch2 * TVPGetScriptDispatch()
{
	if(!TVPImportFuncPtr278)
	{
		static char funcname[] = "iTJSDispatch2 * ::TVPGetScriptDispatch()";
		TVPImportFuncPtr278 = TVPGetImportFuncPtr(funcname);
	}
	typedef iTJSDispatch2 * (__stdcall * __functype)();
	return ((__functype)(TVPImportFuncPtr278))();
}
inline void TVPExecuteScript(const ttstr & content , tTJSVariant * result = NULL)
{
	if(!TVPImportFuncPtr279)
	{
		static char funcname[] = "void ::TVPExecuteScript(const ttstr &,tTJSVariant *)";
		TVPImportFuncPtr279 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(const ttstr &, tTJSVariant *);
	((__functype)(TVPImportFuncPtr279))(content, result);
}
inline void TVPExecuteExpression(const ttstr & content , tTJSVariant * result = NULL)
{
	if(!TVPImportFuncPtr280)
	{
		static char funcname[] = "void ::TVPExecuteExpression(const ttstr &,tTJSVariant *)";
		TVPImportFuncPtr280 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(const ttstr &, tTJSVariant *);
	((__functype)(TVPImportFuncPtr280))(content, result);
}
inline void TVPExecuteScript(const ttstr & content , const ttstr & name , tjs_int lineofs , tTJSVariant * result = NULL)
{
	if(!TVPImportFuncPtr281)
	{
		static char funcname[] = "void ::TVPExecuteScript(const ttstr &,const ttstr &,tjs_int,tTJSVariant *)";
		TVPImportFuncPtr281 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(const ttstr &, const ttstr &, tjs_int , tTJSVariant *);
	((__functype)(TVPImportFuncPtr281))(content, name, lineofs, result);
}
inline void TVPExecuteExpression(const ttstr & content , const ttstr & name , tjs_int lineofs , tTJSVariant * result = NULL)
{
	if(!TVPImportFuncPtr282)
	{
		static char funcname[] = "void ::TVPExecuteExpression(const ttstr &,const ttstr &,tjs_int,tTJSVariant *)";
		TVPImportFuncPtr282 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(const ttstr &, const ttstr &, tjs_int , tTJSVariant *);
	((__functype)(TVPImportFuncPtr282))(content, name, lineofs, result);
}
inline void TVPExecuteStorage(const ttstr & name , tTJSVariant * result = NULL , bool isexpression = false , const tjs_char * modestr = NULL)
{
	if(!TVPImportFuncPtr283)
	{
		static char funcname[] = "void ::TVPExecuteStorage(const ttstr &,tTJSVariant *,bool,const tjs_char *)";
		TVPImportFuncPtr283 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(const ttstr &, tTJSVariant *, bool , const tjs_char *);
	((__functype)(TVPImportFuncPtr283))(name, result, isexpression, modestr);
}
inline void TVPDumpScriptEngine()
{
	if(!TVPImportFuncPtr284)
	{
		static char funcname[] = "void ::TVPDumpScriptEngine()";
		TVPImportFuncPtr284 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)();
	((__functype)(TVPImportFuncPtr284))();
}
inline void TVPCreateMessageMapFile(const ttstr & filename)
{
	if(!TVPImportFuncPtr285)
	{
		static char funcname[] = "void ::TVPCreateMessageMapFile(const ttstr &)";
		TVPImportFuncPtr285 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(const ttstr &);
	((__functype)(TVPImportFuncPtr285))(filename);
}
inline IStream * TVPCreateIStream(const ttstr & name , tjs_uint32 flags)
{
	if(!TVPImportFuncPtr286)
	{
		static char funcname[] = "IStream * ::TVPCreateIStream(const ttstr &,tjs_uint32)";
		TVPImportFuncPtr286 = TVPGetImportFuncPtr(funcname);
	}
	typedef IStream * (__stdcall * __functype)(const ttstr &, tjs_uint32);
	return ((__functype)(TVPImportFuncPtr286))(name, flags);
}
inline tTJSBinaryStream * TVPCreateBinaryStreamAdapter(IStream * refstream)
{
	if(!TVPImportFuncPtr287)
	{
		static char funcname[] = "tTJSBinaryStream * ::TVPCreateBinaryStreamAdapter(IStream *)";
		TVPImportFuncPtr287 = TVPGetImportFuncPtr(funcname);
	}
	typedef tTJSBinaryStream * (__stdcall * __functype)(IStream *);
	return ((__functype)(TVPImportFuncPtr287))(refstream);
}
inline void TVPThrowPluginUnboundFunctionError(const char * funcname)
{
	if(!TVPImportFuncPtr288)
	{
		static char funcname[] = "void ::TVPThrowPluginUnboundFunctionError(const char *)";
		TVPImportFuncPtr288 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(const char *);
	((__functype)(TVPImportFuncPtr288))(funcname);
}
inline void TVPThrowPluginUnboundFunctionError(const tjs_char * funcname)
{
	if(!TVPImportFuncPtr289)
	{
		static char funcname[] = "void ::TVPThrowPluginUnboundFunctionError(const tjs_char *)";
		TVPImportFuncPtr289 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(const tjs_char *);
	((__functype)(TVPImportFuncPtr289))(funcname);
}
inline void * TVP_malloc(size_t size)
{
	if(!TVPImportFuncPtr290)
	{
		static char funcname[] = "void * ::TVP_malloc(size_t)";
		TVPImportFuncPtr290 = TVPGetImportFuncPtr(funcname);
	}
	typedef void * (__stdcall * __functype)(size_t);
	return ((__functype)(TVPImportFuncPtr290))(size);
}
inline void * TVP_realloc(void * pp , size_t size)
{
	if(!TVPImportFuncPtr291)
	{
		static char funcname[] = "void * ::TVP_realloc(void *,size_t)";
		TVPImportFuncPtr291 = TVPGetImportFuncPtr(funcname);
	}
	typedef void * (__stdcall * __functype)(void *, size_t);
	return ((__functype)(TVPImportFuncPtr291))(pp, size);
}
inline void TVP_free(void * pp)
{
	if(!TVPImportFuncPtr292)
	{
		static char funcname[] = "void ::TVP_free(void *)";
		TVPImportFuncPtr292 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(void *);
	((__functype)(TVPImportFuncPtr292))(pp);
}
inline tjs_int TVPGetAutoLoadPluginCount()
{
	if(!TVPImportFuncPtr293)
	{
		static char funcname[] = "tjs_int ::TVPGetAutoLoadPluginCount()";
		TVPImportFuncPtr293 = TVPGetImportFuncPtr(funcname);
	}
	typedef tjs_int (__stdcall * __functype)();
	return ((__functype)(TVPImportFuncPtr293))();
}
inline int ZLIB_uncompress(unsigned char * dest , unsigned long * destlen , const unsigned char * source , unsigned long sourcelen)
{
	if(!TVPImportFuncPtr294)
	{
		static char funcname[] = "int ::ZLIB_uncompress(unsigned char *,unsigned long *,const unsigned char *,unsigned long)";
		TVPImportFuncPtr294 = TVPGetImportFuncPtr(funcname);
	}
	typedef int (__stdcall * __functype)(unsigned char *, unsigned long *, const unsigned char *, unsigned long);
	return ((__functype)(TVPImportFuncPtr294))(dest, destlen, source, sourcelen);
}
inline int ZLIB_compress(unsigned char * dest , unsigned long * destlen , const unsigned char * source , unsigned long sourcelen)
{
	if(!TVPImportFuncPtr295)
	{
		static char funcname[] = "int ::ZLIB_compress(unsigned char *,unsigned long *,const unsigned char *,unsigned long)";
		TVPImportFuncPtr295 = TVPGetImportFuncPtr(funcname);
	}
	typedef int (__stdcall * __functype)(unsigned char *, unsigned long *, const unsigned char *, unsigned long);
	return ((__functype)(TVPImportFuncPtr295))(dest, destlen, source, sourcelen);
}
inline int ZLIB_compress2(unsigned char * dest , unsigned long * destlen , const unsigned char * source , unsigned long sourcelen , int level)
{
	if(!TVPImportFuncPtr296)
	{
		static char funcname[] = "int ::ZLIB_compress2(unsigned char *,unsigned long *,const unsigned char *,unsigned long,int)";
		TVPImportFuncPtr296 = TVPGetImportFuncPtr(funcname);
	}
	typedef int (__stdcall * __functype)(unsigned char *, unsigned long *, const unsigned char *, unsigned long , int);
	return ((__functype)(TVPImportFuncPtr296))(dest, destlen, source, sourcelen, level);
}
inline void TVP_md5_init(TVP_md5_state_t * pms)
{
	if(!TVPImportFuncPtr297)
	{
		static char funcname[] = "void ::TVP_md5_init(TVP_md5_state_t *)";
		TVPImportFuncPtr297 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(TVP_md5_state_t *);
	((__functype)(TVPImportFuncPtr297))(pms);
}
inline void TVP_md5_append(TVP_md5_state_t * pms , const tjs_uint8 * data , int nbytes)
{
	if(!TVPImportFuncPtr298)
	{
		static char funcname[] = "void ::TVP_md5_append(TVP_md5_state_t *,const tjs_uint8 *,int)";
		TVPImportFuncPtr298 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(TVP_md5_state_t *, const tjs_uint8 *, int);
	((__functype)(TVPImportFuncPtr298))(pms, data, nbytes);
}
inline void TVP_md5_finish(TVP_md5_state_t * pms , tjs_uint8 * digest)
{
	if(!TVPImportFuncPtr299)
	{
		static char funcname[] = "void ::TVP_md5_finish(TVP_md5_state_t *,tjs_uint8 *)";
		TVPImportFuncPtr299 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(TVP_md5_state_t *, tjs_uint8 *);
	((__functype)(TVPImportFuncPtr299))(pms, digest);
}
inline HWND TVPGetApplicationWindowHandle()
{
	if(!TVPImportFuncPtr300)
	{
		static char funcname[] = "HWND ::TVPGetApplicationWindowHandle()";
		TVPImportFuncPtr300 = TVPGetImportFuncPtr(funcname);
	}
	typedef HWND (__stdcall * __functype)();
	return ((__functype)(TVPImportFuncPtr300))();
}
inline void TVPProcessApplicationMessages()
{
	if(!TVPImportFuncPtr301)
	{
		static char funcname[] = "void ::TVPProcessApplicationMessages()";
		TVPImportFuncPtr301 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)();
	((__functype)(TVPImportFuncPtr301))();
}
inline void TVPHandleApplicationMessage()
{
	if(!TVPImportFuncPtr302)
	{
		static char funcname[] = "void ::TVPHandleApplicationMessage()";
		TVPImportFuncPtr302 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)();
	((__functype)(TVPImportFuncPtr302))();
}
inline bool TVPRegisterGlobalObject(const tjs_char * name , iTJSDispatch2 * dsp)
{
	if(!TVPImportFuncPtr303)
	{
		static char funcname[] = "bool ::TVPRegisterGlobalObject(const tjs_char *,iTJSDispatch2 *)";
		TVPImportFuncPtr303 = TVPGetImportFuncPtr(funcname);
	}
	typedef bool (__stdcall * __functype)(const tjs_char *, iTJSDispatch2 *);
	return ((__functype)(TVPImportFuncPtr303))(name, dsp);
}
inline bool TVPRemoveGlobalObject(const tjs_char * name)
{
	if(!TVPImportFuncPtr304)
	{
		static char funcname[] = "bool ::TVPRemoveGlobalObject(const tjs_char *)";
		TVPImportFuncPtr304 = TVPGetImportFuncPtr(funcname);
	}
	typedef bool (__stdcall * __functype)(const tjs_char *);
	return ((__functype)(TVPImportFuncPtr304))(name);
}
inline bool TVPGetFileVersionOf(const char * module_filename , tjs_int & major , tjs_int & minor , tjs_int & release , tjs_int & build)
{
	if(!TVPImportFuncPtr305)
	{
		static char funcname[] = "bool ::TVPGetFileVersionOf(const char *,tjs_int &,tjs_int &,tjs_int &,tjs_int &)";
		TVPImportFuncPtr305 = TVPGetImportFuncPtr(funcname);
	}
	typedef bool (__stdcall * __functype)(const char *, tjs_int &, tjs_int &, tjs_int &, tjs_int &);
	return ((__functype)(TVPImportFuncPtr305))(module_filename, major, minor, release, build);
}
inline bool TVPGetCommandLine(const tjs_char * name , tTJSVariant * value = NULL)
{
	if(!TVPImportFuncPtr306)
	{
		static char funcname[] = "bool ::TVPGetCommandLine(const tjs_char *,tTJSVariant *)";
		TVPImportFuncPtr306 = TVPGetImportFuncPtr(funcname);
	}
	typedef bool (__stdcall * __functype)(const tjs_char *, tTJSVariant *);
	return ((__functype)(TVPImportFuncPtr306))(name, value);
}
inline tjs_uint32 TVPGetCPUType()
{
	if(!TVPImportFuncPtr307)
	{
		static char funcname[] = "tjs_uint32 ::TVPGetCPUType()";
		TVPImportFuncPtr307 = TVPGetImportFuncPtr(funcname);
	}
	typedef tjs_uint32 (__stdcall * __functype)();
	return ((__functype)(TVPImportFuncPtr307))();
}
inline iTJSDispatch2 * TJSCreateArrayObject(iTJSDispatch2 * * classout = NULL)
{
	if(!TVPImportFuncPtr308)
	{
		static char funcname[] = "iTJSDispatch2 * ::TJSCreateArrayObject(iTJSDispatch2 * *)";
		TVPImportFuncPtr308 = TVPGetImportFuncPtr(funcname);
	}
	typedef iTJSDispatch2 * (__stdcall * __functype)(iTJSDispatch2 * *);
	return ((__functype)(TVPImportFuncPtr308))(classout);
}
inline iTJSDispatch2 * TJSCreateDictionaryObject(iTJSDispatch2 * * classout = NULL)
{
	if(!TVPImportFuncPtr309)
	{
		static char funcname[] = "iTJSDispatch2 * ::TJSCreateDictionaryObject(iTJSDispatch2 * *)";
		TVPImportFuncPtr309 = TVPGetImportFuncPtr(funcname);
	}
	typedef iTJSDispatch2 * (__stdcall * __functype)(iTJSDispatch2 * *);
	return ((__functype)(TVPImportFuncPtr309))(classout);
}
inline void TJSDoVariantOperation(tjs_int op , tTJSVariant & target , const tTJSVariant * param)
{
	if(!TVPImportFuncPtr310)
	{
		static char funcname[] = "void ::TJSDoVariantOperation(tjs_int,tTJSVariant &,const tTJSVariant *)";
		TVPImportFuncPtr310 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_int , tTJSVariant &, const tTJSVariant *);
	((__functype)(TVPImportFuncPtr310))(op, target, param);
}
inline void TJSDoRehash()
{
	if(!TVPImportFuncPtr311)
	{
		static char funcname[] = "void ::TJSDoRehash()";
		TVPImportFuncPtr311 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)();
	((__functype)(TVPImportFuncPtr311))();
}
inline void TVPAddLog(const ttstr & line)
{
	if(!TVPImportFuncPtr312)
	{
		static char funcname[] = "void ::TVPAddLog(const ttstr &)";
		TVPImportFuncPtr312 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(const ttstr &);
	((__functype)(TVPImportFuncPtr312))(line);
}
inline void TVPAddImportantLog(const ttstr & line)
{
	if(!TVPImportFuncPtr313)
	{
		static char funcname[] = "void ::TVPAddImportantLog(const ttstr &)";
		TVPImportFuncPtr313 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(const ttstr &);
	((__functype)(TVPImportFuncPtr313))(line);
}
inline void TVPPushEnvironNoise(const void * buf , tjs_int bufsize)
{
	if(!TVPImportFuncPtr314)
	{
		static char funcname[] = "void ::TVPPushEnvironNoise(const void *,tjs_int)";
		TVPImportFuncPtr314 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(const void *, tjs_int);
	((__functype)(TVPImportFuncPtr314))(buf, bufsize);
}
inline void TVPGetRandomBits128(void * dest)
{
	if(!TVPImportFuncPtr315)
	{
		static char funcname[] = "void ::TVPGetRandomBits128(void *)";
		TVPImportFuncPtr315 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(void *);
	((__functype)(TVPImportFuncPtr315))(dest);
}
inline tjs_uint64 TVPGetTickCount()
{
	if(!TVPImportFuncPtr316)
	{
		static char funcname[] = "tjs_uint64 ::TVPGetTickCount()";
		TVPImportFuncPtr316 = TVPGetImportFuncPtr(funcname);
	}
	typedef tjs_uint64 (__stdcall * __functype)();
	return ((__functype)(TVPImportFuncPtr316))();
}
inline ttstr TVPFormatMessage(const tjs_char * msg , const ttstr & p1)
{
	if(!TVPImportFuncPtr317)
	{
		static char funcname[] = "ttstr ::TVPFormatMessage(const tjs_char *,const ttstr &)";
		TVPImportFuncPtr317 = TVPGetImportFuncPtr(funcname);
	}
	typedef ttstr (__stdcall * __functype)(const tjs_char *, const ttstr &);
	return ((__functype)(TVPImportFuncPtr317))(msg, p1);
}
inline ttstr TVPFormatMessage(const tjs_char * msg , const ttstr & p1 , const ttstr & p2)
{
	if(!TVPImportFuncPtr318)
	{
		static char funcname[] = "ttstr ::TVPFormatMessage(const tjs_char *,const ttstr &,const ttstr &)";
		TVPImportFuncPtr318 = TVPGetImportFuncPtr(funcname);
	}
	typedef ttstr (__stdcall * __functype)(const tjs_char *, const ttstr &, const ttstr &);
	return ((__functype)(TVPImportFuncPtr318))(msg, p1, p2);
}
inline void TVPThrowExceptionMessage(const tjs_char * msg)
{
	if(!TVPImportFuncPtr319)
	{
		static char funcname[] = "void ::TVPThrowExceptionMessage(const tjs_char *)";
		TVPImportFuncPtr319 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(const tjs_char *);
	((__functype)(TVPImportFuncPtr319))(msg);
}
inline void TVPThrowExceptionMessage(const tjs_char * msg , const ttstr & p1 , tjs_int num)
{
	if(!TVPImportFuncPtr320)
	{
		static char funcname[] = "void ::TVPThrowExceptionMessage(const tjs_char *,const ttstr &,tjs_int)";
		TVPImportFuncPtr320 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(const tjs_char *, const ttstr &, tjs_int);
	((__functype)(TVPImportFuncPtr320))(msg, p1, num);
}
inline void TVPThrowExceptionMessage(const tjs_char * msg , const ttstr & p1)
{
	if(!TVPImportFuncPtr321)
	{
		static char funcname[] = "void ::TVPThrowExceptionMessage(const tjs_char *,const ttstr &)";
		TVPImportFuncPtr321 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(const tjs_char *, const ttstr &);
	((__functype)(TVPImportFuncPtr321))(msg, p1);
}
inline void TVPThrowExceptionMessage(const tjs_char * msg , const ttstr & p1 , const ttstr & p2)
{
	if(!TVPImportFuncPtr322)
	{
		static char funcname[] = "void ::TVPThrowExceptionMessage(const tjs_char *,const ttstr &,const ttstr &)";
		TVPImportFuncPtr322 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(const tjs_char *, const ttstr &, const ttstr &);
	((__functype)(TVPImportFuncPtr322))(msg, p1, p2);
}
inline ttstr TVPGetAboutString()
{
	if(!TVPImportFuncPtr323)
	{
		static char funcname[] = "ttstr ::TVPGetAboutString()";
		TVPImportFuncPtr323 = TVPGetImportFuncPtr(funcname);
	}
	typedef ttstr (__stdcall * __functype)();
	return ((__functype)(TVPImportFuncPtr323))();
}
inline ttstr TVPGetVersionInformation()
{
	if(!TVPImportFuncPtr324)
	{
		static char funcname[] = "ttstr ::TVPGetVersionInformation()";
		TVPImportFuncPtr324 = TVPGetImportFuncPtr(funcname);
	}
	typedef ttstr (__stdcall * __functype)();
	return ((__functype)(TVPImportFuncPtr324))();
}
inline ttstr TVPGetVersionString()
{
	if(!TVPImportFuncPtr325)
	{
		static char funcname[] = "ttstr ::TVPGetVersionString()";
		TVPImportFuncPtr325 = TVPGetImportFuncPtr(funcname);
	}
	typedef ttstr (__stdcall * __functype)();
	return ((__functype)(TVPImportFuncPtr325))();
}
inline void TVPGetSystemVersion(tjs_int & major , tjs_int & minor , tjs_int & release , tjs_int & build)
{
	if(!TVPImportFuncPtr326)
	{
		static char funcname[] = "void ::TVPGetSystemVersion(tjs_int &,tjs_int &,tjs_int &,tjs_int &)";
		TVPImportFuncPtr326 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_int &, tjs_int &, tjs_int &, tjs_int &);
	((__functype)(TVPImportFuncPtr326))(major, minor, release, build);
}
inline void TVPGetTJSVersion(tjs_int & major , tjs_int & minor , tjs_int & release)
{
	if(!TVPImportFuncPtr327)
	{
		static char funcname[] = "void ::TVPGetTJSVersion(tjs_int &,tjs_int &,tjs_int &)";
		TVPImportFuncPtr327 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_int &, tjs_int &, tjs_int &);
	((__functype)(TVPImportFuncPtr327))(major, minor, release);
}
inline void TVPReleaseDirectSound()
{
	if(!TVPImportFuncPtr328)
	{
		static char funcname[] = "void ::TVPReleaseDirectSound()";
		TVPImportFuncPtr328 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)();
	((__functype)(TVPImportFuncPtr328))();
}
inline IDirectSound * TVPGetDirectSound()
{
	if(!TVPImportFuncPtr329)
	{
		static char funcname[] = "IDirectSound * ::TVPGetDirectSound()";
		TVPImportFuncPtr329 = TVPGetImportFuncPtr(funcname);
	}
	typedef IDirectSound * (__stdcall * __functype)();
	return ((__functype)(TVPImportFuncPtr329))();
}
inline void TVPMIDIOutData(const tjs_uint8 * data , int len)
{
	if(!TVPImportFuncPtr330)
	{
		static char funcname[] = "void ::TVPMIDIOutData(const tjs_uint8 *,int)";
		TVPImportFuncPtr330 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(const tjs_uint8 *, int);
	((__functype)(TVPImportFuncPtr330))(data, len);
}
inline void TVPClearGraphicCache()
{
	if(!TVPImportFuncPtr331)
	{
		static char funcname[] = "void ::TVPClearGraphicCache()";
		TVPImportFuncPtr331 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)();
	((__functype)(TVPImportFuncPtr331))();
}
inline tjs_uint32 TVPToActualColor(tjs_uint32 col)
{
	if(!TVPImportFuncPtr332)
	{
		static char funcname[] = "tjs_uint32 ::TVPToActualColor(tjs_uint32)";
		TVPImportFuncPtr332 = TVPGetImportFuncPtr(funcname);
	}
	typedef tjs_uint32 (__stdcall * __functype)(tjs_uint32);
	return ((__functype)(TVPImportFuncPtr332))(col);
}
inline tjs_uint32 TVPFromActualColor(tjs_uint32 col)
{
	if(!TVPImportFuncPtr333)
	{
		static char funcname[] = "tjs_uint32 ::TVPFromActualColor(tjs_uint32)";
		TVPImportFuncPtr333 = TVPGetImportFuncPtr(funcname);
	}
	typedef tjs_uint32 (__stdcall * __functype)(tjs_uint32);
	return ((__functype)(TVPImportFuncPtr333))(col);
}
inline iTVPScanLineProvider * TVPSLPLoadImage(const ttstr & name , tjs_int bpp , tjs_uint32 key , tjs_uint w , tjs_uint h)
{
	if(!TVPImportFuncPtr334)
	{
		static char funcname[] = "iTVPScanLineProvider * ::TVPSLPLoadImage(const ttstr &,tjs_int,tjs_uint32,tjs_uint,tjs_uint)";
		TVPImportFuncPtr334 = TVPGetImportFuncPtr(funcname);
	}
	typedef iTVPScanLineProvider * (__stdcall * __functype)(const ttstr &, tjs_int , tjs_uint32 , tjs_uint , tjs_uint);
	return ((__functype)(TVPImportFuncPtr334))(name, bpp, key, w, h);
}
inline void TVPAddTransHandlerProvider(iTVPTransHandlerProvider * pro)
{
	if(!TVPImportFuncPtr335)
	{
		static char funcname[] = "void ::TVPAddTransHandlerProvider(iTVPTransHandlerProvider *)";
		TVPImportFuncPtr335 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(iTVPTransHandlerProvider *);
	((__functype)(TVPImportFuncPtr335))(pro);
}
inline void TVPRemoveTransHandlerProvider(iTVPTransHandlerProvider * pro)
{
	if(!TVPImportFuncPtr336)
	{
		static char funcname[] = "void ::TVPRemoveTransHandlerProvider(iTVPTransHandlerProvider *)";
		TVPImportFuncPtr336 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(iTVPTransHandlerProvider *);
	((__functype)(TVPImportFuncPtr336))(pro);
}
inline void TVPAlphaBlend(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	if(!TVPImportFuncPtr337)
	{
		static char funcname[] = "void ::TVPAlphaBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr337 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr337))(dest, src, len);
}
inline void TVPAlphaBlend_HDA(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	if(!TVPImportFuncPtr338)
	{
		static char funcname[] = "void ::TVPAlphaBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr338 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr338))(dest, src, len);
}
inline void TVPAlphaBlend_o(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr339)
	{
		static char funcname[] = "void ::TVPAlphaBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr339 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr339))(dest, src, len, opa);
}
inline void TVPAlphaBlend_HDA_o(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr340)
	{
		static char funcname[] = "void ::TVPAlphaBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr340 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr340))(dest, src, len, opa);
}
inline void TVPAlphaBlend_d(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	if(!TVPImportFuncPtr341)
	{
		static char funcname[] = "void ::TVPAlphaBlend_d(tjs_uint32 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr341 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr341))(dest, src, len);
}
inline void TVPAlphaBlend_a(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	if(!TVPImportFuncPtr342)
	{
		static char funcname[] = "void ::TVPAlphaBlend_a(tjs_uint32 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr342 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr342))(dest, src, len);
}
inline void TVPAlphaBlend_do(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr343)
	{
		static char funcname[] = "void ::TVPAlphaBlend_do(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr343 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr343))(dest, src, len, opa);
}
inline void TVPAlphaBlend_ao(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr344)
	{
		static char funcname[] = "void ::TVPAlphaBlend_ao(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr344 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr344))(dest, src, len, opa);
}
inline void TVPAdditiveAlphaBlend(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	if(!TVPImportFuncPtr345)
	{
		static char funcname[] = "void ::TVPAdditiveAlphaBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr345 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr345))(dest, src, len);
}
inline void TVPAdditiveAlphaBlend_HDA(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	if(!TVPImportFuncPtr346)
	{
		static char funcname[] = "void ::TVPAdditiveAlphaBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr346 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr346))(dest, src, len);
}
inline void TVPAdditiveAlphaBlend_o(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr347)
	{
		static char funcname[] = "void ::TVPAdditiveAlphaBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr347 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr347))(dest, src, len, opa);
}
inline void TVPAdditiveAlphaBlend_HDA_o(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr348)
	{
		static char funcname[] = "void ::TVPAdditiveAlphaBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr348 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr348))(dest, src, len, opa);
}
inline void TVPAdditiveAlphaBlend_a(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	if(!TVPImportFuncPtr349)
	{
		static char funcname[] = "void ::TVPAdditiveAlphaBlend_a(tjs_uint32 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr349 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr349))(dest, src, len);
}
inline void TVPAdditiveAlphaBlend_ao(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr350)
	{
		static char funcname[] = "void ::TVPAdditiveAlphaBlend_ao(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr350 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr350))(dest, src, len, opa);
}
inline void TVPConvertAdditiveAlphaToAlpha(tjs_uint32 * buf , tjs_int len)
{
	if(!TVPImportFuncPtr351)
	{
		static char funcname[] = "void ::TVPConvertAdditiveAlphaToAlpha(tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr351 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr351))(buf, len);
}
inline void TVPConvertAlphaToAdditiveAlpha(tjs_uint32 * buf , tjs_int len)
{
	if(!TVPImportFuncPtr352)
	{
		static char funcname[] = "void ::TVPConvertAlphaToAdditiveAlpha(tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr352 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr352))(buf, len);
}
inline void TVPStretchAlphaBlend(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep)
{
	if(!TVPImportFuncPtr353)
	{
		static char funcname[] = "void ::TVPStretchAlphaBlend(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr353 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr353))(dest, len, src, srcstart, srcstep);
}
inline void TVPStretchAlphaBlend_HDA(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep)
{
	if(!TVPImportFuncPtr354)
	{
		static char funcname[] = "void ::TVPStretchAlphaBlend_HDA(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr354 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr354))(dest, len, src, srcstart, srcstep);
}
inline void TVPStretchAlphaBlend_o(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep , tjs_int opa)
{
	if(!TVPImportFuncPtr355)
	{
		static char funcname[] = "void ::TVPStretchAlphaBlend_o(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr355 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr355))(dest, len, src, srcstart, srcstep, opa);
}
inline void TVPStretchAlphaBlend_HDA_o(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep , tjs_int opa)
{
	if(!TVPImportFuncPtr356)
	{
		static char funcname[] = "void ::TVPStretchAlphaBlend_HDA_o(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr356 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr356))(dest, len, src, srcstart, srcstep, opa);
}
inline void TVPStretchAlphaBlend_d(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep)
{
	if(!TVPImportFuncPtr357)
	{
		static char funcname[] = "void ::TVPStretchAlphaBlend_d(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr357 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr357))(dest, len, src, srcstart, srcstep);
}
inline void TVPStretchAlphaBlend_a(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep)
{
	if(!TVPImportFuncPtr358)
	{
		static char funcname[] = "void ::TVPStretchAlphaBlend_a(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr358 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr358))(dest, len, src, srcstart, srcstep);
}
inline void TVPStretchAlphaBlend_do(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep , tjs_int opa)
{
	if(!TVPImportFuncPtr359)
	{
		static char funcname[] = "void ::TVPStretchAlphaBlend_do(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr359 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr359))(dest, len, src, srcstart, srcstep, opa);
}
inline void TVPStretchAlphaBlend_ao(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep , tjs_int opa)
{
	if(!TVPImportFuncPtr360)
	{
		static char funcname[] = "void ::TVPStretchAlphaBlend_ao(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr360 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr360))(dest, len, src, srcstart, srcstep, opa);
}
inline void TVPStretchAdditiveAlphaBlend(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep)
{
	if(!TVPImportFuncPtr361)
	{
		static char funcname[] = "void ::TVPStretchAdditiveAlphaBlend(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr361 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr361))(dest, len, src, srcstart, srcstep);
}
inline void TVPStretchAdditiveAlphaBlend_HDA(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep)
{
	if(!TVPImportFuncPtr362)
	{
		static char funcname[] = "void ::TVPStretchAdditiveAlphaBlend_HDA(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr362 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr362))(dest, len, src, srcstart, srcstep);
}
inline void TVPStretchAdditiveAlphaBlend_o(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep , tjs_int opa)
{
	if(!TVPImportFuncPtr363)
	{
		static char funcname[] = "void ::TVPStretchAdditiveAlphaBlend_o(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr363 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr363))(dest, len, src, srcstart, srcstep, opa);
}
inline void TVPStretchAdditiveAlphaBlend_HDA_o(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep , tjs_int opa)
{
	if(!TVPImportFuncPtr364)
	{
		static char funcname[] = "void ::TVPStretchAdditiveAlphaBlend_HDA_o(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr364 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr364))(dest, len, src, srcstart, srcstep, opa);
}
inline void TVPStretchAdditiveAlphaBlend_a(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep)
{
	if(!TVPImportFuncPtr365)
	{
		static char funcname[] = "void ::TVPStretchAdditiveAlphaBlend_a(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr365 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr365))(dest, len, src, srcstart, srcstep);
}
inline void TVPStretchAdditiveAlphaBlend_ao(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep , tjs_int opa)
{
	if(!TVPImportFuncPtr366)
	{
		static char funcname[] = "void ::TVPStretchAdditiveAlphaBlend_ao(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr366 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr366))(dest, len, src, srcstart, srcstep, opa);
}
inline void TVPLinTransAlphaBlend(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch)
{
	if(!TVPImportFuncPtr367)
	{
		static char funcname[] = "void ::TVPLinTransAlphaBlend(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr367 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr367))(dest, len, src, sx, sy, stepx, stepy, srcpitch);
}
inline void TVPLinTransAlphaBlend_HDA(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch)
{
	if(!TVPImportFuncPtr368)
	{
		static char funcname[] = "void ::TVPLinTransAlphaBlend_HDA(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr368 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr368))(dest, len, src, sx, sy, stepx, stepy, srcpitch);
}
inline void TVPLinTransAlphaBlend_o(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch , tjs_int opa)
{
	if(!TVPImportFuncPtr369)
	{
		static char funcname[] = "void ::TVPLinTransAlphaBlend_o(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr369 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int , tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr369))(dest, len, src, sx, sy, stepx, stepy, srcpitch, opa);
}
inline void TVPLinTransAlphaBlend_HDA_o(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch , tjs_int opa)
{
	if(!TVPImportFuncPtr370)
	{
		static char funcname[] = "void ::TVPLinTransAlphaBlend_HDA_o(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr370 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int , tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr370))(dest, len, src, sx, sy, stepx, stepy, srcpitch, opa);
}
inline void TVPLinTransAlphaBlend_d(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch)
{
	if(!TVPImportFuncPtr371)
	{
		static char funcname[] = "void ::TVPLinTransAlphaBlend_d(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr371 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr371))(dest, len, src, sx, sy, stepx, stepy, srcpitch);
}
inline void TVPLinTransAlphaBlend_a(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch)
{
	if(!TVPImportFuncPtr372)
	{
		static char funcname[] = "void ::TVPLinTransAlphaBlend_a(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr372 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr372))(dest, len, src, sx, sy, stepx, stepy, srcpitch);
}
inline void TVPLinTransAlphaBlend_do(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch , tjs_int opa)
{
	if(!TVPImportFuncPtr373)
	{
		static char funcname[] = "void ::TVPLinTransAlphaBlend_do(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr373 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int , tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr373))(dest, len, src, sx, sy, stepx, stepy, srcpitch, opa);
}
inline void TVPLinTransAlphaBlend_ao(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch , tjs_int opa)
{
	if(!TVPImportFuncPtr374)
	{
		static char funcname[] = "void ::TVPLinTransAlphaBlend_ao(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr374 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int , tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr374))(dest, len, src, sx, sy, stepx, stepy, srcpitch, opa);
}
inline void TVPLinTransAdditiveAlphaBlend(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch)
{
	if(!TVPImportFuncPtr375)
	{
		static char funcname[] = "void ::TVPLinTransAdditiveAlphaBlend(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr375 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr375))(dest, len, src, sx, sy, stepx, stepy, srcpitch);
}
inline void TVPLinTransAdditiveAlphaBlend_HDA(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch)
{
	if(!TVPImportFuncPtr376)
	{
		static char funcname[] = "void ::TVPLinTransAdditiveAlphaBlend_HDA(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr376 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr376))(dest, len, src, sx, sy, stepx, stepy, srcpitch);
}
inline void TVPLinTransAdditiveAlphaBlend_o(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch , tjs_int opa)
{
	if(!TVPImportFuncPtr377)
	{
		static char funcname[] = "void ::TVPLinTransAdditiveAlphaBlend_o(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr377 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int , tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr377))(dest, len, src, sx, sy, stepx, stepy, srcpitch, opa);
}
inline void TVPLinTransAdditiveAlphaBlend_HDA_o(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch , tjs_int opa)
{
	if(!TVPImportFuncPtr378)
	{
		static char funcname[] = "void ::TVPLinTransAdditiveAlphaBlend_HDA_o(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr378 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int , tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr378))(dest, len, src, sx, sy, stepx, stepy, srcpitch, opa);
}
inline void TVPLinTransAdditiveAlphaBlend_a(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch)
{
	if(!TVPImportFuncPtr379)
	{
		static char funcname[] = "void ::TVPLinTransAdditiveAlphaBlend_a(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr379 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr379))(dest, len, src, sx, sy, stepx, stepy, srcpitch);
}
inline void TVPLinTransAdditiveAlphaBlend_ao(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch , tjs_int opa)
{
	if(!TVPImportFuncPtr380)
	{
		static char funcname[] = "void ::TVPLinTransAdditiveAlphaBlend_ao(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr380 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int , tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr380))(dest, len, src, sx, sy, stepx, stepy, srcpitch, opa);
}
inline void TVPCopyOpaqueImage(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	if(!TVPImportFuncPtr381)
	{
		static char funcname[] = "void ::TVPCopyOpaqueImage(tjs_uint32 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr381 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr381))(dest, src, len);
}
inline void TVPConstAlphaBlend(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr382)
	{
		static char funcname[] = "void ::TVPConstAlphaBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr382 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr382))(dest, src, len, opa);
}
inline void TVPConstAlphaBlend_HDA(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr383)
	{
		static char funcname[] = "void ::TVPConstAlphaBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr383 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr383))(dest, src, len, opa);
}
inline void TVPConstAlphaBlend_d(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr384)
	{
		static char funcname[] = "void ::TVPConstAlphaBlend_d(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr384 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr384))(dest, src, len, opa);
}
inline void TVPConstAlphaBlend_a(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr385)
	{
		static char funcname[] = "void ::TVPConstAlphaBlend_a(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr385 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr385))(dest, src, len, opa);
}
inline void TVPStretchCopyOpaqueImage(tjs_uint32 * dest , tjs_int destlen , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep)
{
	if(!TVPImportFuncPtr386)
	{
		static char funcname[] = "void ::TVPStretchCopyOpaqueImage(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr386 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr386))(dest, destlen, src, srcstart, srcstep);
}
inline void TVPStretchConstAlphaBlend(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep , tjs_int opa)
{
	if(!TVPImportFuncPtr387)
	{
		static char funcname[] = "void ::TVPStretchConstAlphaBlend(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr387 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr387))(dest, len, src, srcstart, srcstep, opa);
}
inline void TVPStretchConstAlphaBlend_HDA(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep , tjs_int opa)
{
	if(!TVPImportFuncPtr388)
	{
		static char funcname[] = "void ::TVPStretchConstAlphaBlend_HDA(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr388 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr388))(dest, len, src, srcstart, srcstep, opa);
}
inline void TVPStretchConstAlphaBlend_d(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep , tjs_int opa)
{
	if(!TVPImportFuncPtr389)
	{
		static char funcname[] = "void ::TVPStretchConstAlphaBlend_d(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr389 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr389))(dest, len, src, srcstart, srcstep, opa);
}
inline void TVPStretchConstAlphaBlend_a(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep , tjs_int opa)
{
	if(!TVPImportFuncPtr390)
	{
		static char funcname[] = "void ::TVPStretchConstAlphaBlend_a(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr390 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr390))(dest, len, src, srcstart, srcstep, opa);
}
inline void TVPLinTransCopyOpaqueImage(tjs_uint32 * dest , tjs_int destlen , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch)
{
	if(!TVPImportFuncPtr391)
	{
		static char funcname[] = "void ::TVPLinTransCopyOpaqueImage(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr391 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr391))(dest, destlen, src, sx, sy, stepx, stepy, srcpitch);
}
inline void TVPLinTransConstAlphaBlend(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch , tjs_int opa)
{
	if(!TVPImportFuncPtr392)
	{
		static char funcname[] = "void ::TVPLinTransConstAlphaBlend(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr392 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int , tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr392))(dest, len, src, sx, sy, stepx, stepy, srcpitch, opa);
}
inline void TVPLinTransConstAlphaBlend_HDA(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch , tjs_int opa)
{
	if(!TVPImportFuncPtr393)
	{
		static char funcname[] = "void ::TVPLinTransConstAlphaBlend_HDA(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr393 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int , tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr393))(dest, len, src, sx, sy, stepx, stepy, srcpitch, opa);
}
inline void TVPLinTransConstAlphaBlend_d(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch , tjs_int opa)
{
	if(!TVPImportFuncPtr394)
	{
		static char funcname[] = "void ::TVPLinTransConstAlphaBlend_d(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr394 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int , tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr394))(dest, len, src, sx, sy, stepx, stepy, srcpitch, opa);
}
inline void TVPLinTransConstAlphaBlend_a(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch , tjs_int opa)
{
	if(!TVPImportFuncPtr395)
	{
		static char funcname[] = "void ::TVPLinTransConstAlphaBlend_a(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr395 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int , tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr395))(dest, len, src, sx, sy, stepx, stepy, srcpitch, opa);
}
inline void TVPConstAlphaBlend_SD(tjs_uint32 * dest , const tjs_uint32 * src1 , const tjs_uint32 * src2 , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr396)
	{
		static char funcname[] = "void ::TVPConstAlphaBlend_SD(tjs_uint32 *,const tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr396 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr396))(dest, src1, src2, len, opa);
}
inline void TVPConstAlphaBlend_SD_a(tjs_uint32 * dest , const tjs_uint32 * src1 , const tjs_uint32 * src2 , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr397)
	{
		static char funcname[] = "void ::TVPConstAlphaBlend_SD_a(tjs_uint32 *,const tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr397 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr397))(dest, src1, src2, len, opa);
}
inline void TVPConstAlphaBlend_SD_d(tjs_uint32 * dest , const tjs_uint32 * src1 , const tjs_uint32 * src2 , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr398)
	{
		static char funcname[] = "void ::TVPConstAlphaBlend_SD_d(tjs_uint32 *,const tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr398 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr398))(dest, src1, src2, len, opa);
}
inline void TVPInitUnivTransBlendTable(tjs_uint32 * table , tjs_int phase , tjs_int vague)
{
	if(!TVPImportFuncPtr399)
	{
		static char funcname[] = "void ::TVPInitUnivTransBlendTable(tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr399 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr399))(table, phase, vague);
}
inline void TVPInitUnivTransBlendTable_d(tjs_uint32 * table , tjs_int phase , tjs_int vague)
{
	if(!TVPImportFuncPtr400)
	{
		static char funcname[] = "void ::TVPInitUnivTransBlendTable_d(tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr400 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr400))(table, phase, vague);
}
inline void TVPInitUnivTransBlendTable_a(tjs_uint32 * table , tjs_int phase , tjs_int vague)
{
	if(!TVPImportFuncPtr401)
	{
		static char funcname[] = "void ::TVPInitUnivTransBlendTable_a(tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr401 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr401))(table, phase, vague);
}
inline void TVPUnivTransBlend(tjs_uint32 * dest , const tjs_uint32 * src1 , const tjs_uint32 * src2 , const tjs_uint8 * rule , const tjs_uint32 * table , tjs_int len)
{
	if(!TVPImportFuncPtr402)
	{
		static char funcname[] = "void ::TVPUnivTransBlend(tjs_uint32 *,const tjs_uint32 *,const tjs_uint32 *,const tjs_uint8 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr402 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, const tjs_uint32 *, const tjs_uint8 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr402))(dest, src1, src2, rule, table, len);
}
inline void TVPUnivTransBlend_switch(tjs_uint32 * dest , const tjs_uint32 * src1 , const tjs_uint32 * src2 , const tjs_uint8 * rule , const tjs_uint32 * table , tjs_int len , tjs_int src1lv , tjs_int src2lv)
{
	if(!TVPImportFuncPtr403)
	{
		static char funcname[] = "void ::TVPUnivTransBlend_switch(tjs_uint32 *,const tjs_uint32 *,const tjs_uint32 *,const tjs_uint8 *,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr403 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, const tjs_uint32 *, const tjs_uint8 *, const tjs_uint32 *, tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr403))(dest, src1, src2, rule, table, len, src1lv, src2lv);
}
inline void TVPUnivTransBlend_d(tjs_uint32 * dest , const tjs_uint32 * src1 , const tjs_uint32 * src2 , const tjs_uint8 * rule , const tjs_uint32 * table , tjs_int len)
{
	if(!TVPImportFuncPtr404)
	{
		static char funcname[] = "void ::TVPUnivTransBlend_d(tjs_uint32 *,const tjs_uint32 *,const tjs_uint32 *,const tjs_uint8 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr404 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, const tjs_uint32 *, const tjs_uint8 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr404))(dest, src1, src2, rule, table, len);
}
inline void TVPUnivTransBlend_switch_d(tjs_uint32 * dest , const tjs_uint32 * src1 , const tjs_uint32 * src2 , const tjs_uint8 * rule , const tjs_uint32 * table , tjs_int len , tjs_int src1lv , tjs_int src2lv)
{
	if(!TVPImportFuncPtr405)
	{
		static char funcname[] = "void ::TVPUnivTransBlend_switch_d(tjs_uint32 *,const tjs_uint32 *,const tjs_uint32 *,const tjs_uint8 *,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr405 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, const tjs_uint32 *, const tjs_uint8 *, const tjs_uint32 *, tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr405))(dest, src1, src2, rule, table, len, src1lv, src2lv);
}
inline void TVPUnivTransBlend_a(tjs_uint32 * dest , const tjs_uint32 * src1 , const tjs_uint32 * src2 , const tjs_uint8 * rule , const tjs_uint32 * table , tjs_int len)
{
	if(!TVPImportFuncPtr406)
	{
		static char funcname[] = "void ::TVPUnivTransBlend_a(tjs_uint32 *,const tjs_uint32 *,const tjs_uint32 *,const tjs_uint8 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr406 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, const tjs_uint32 *, const tjs_uint8 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr406))(dest, src1, src2, rule, table, len);
}
inline void TVPUnivTransBlend_switch_a(tjs_uint32 * dest , const tjs_uint32 * src1 , const tjs_uint32 * src2 , const tjs_uint8 * rule , const tjs_uint32 * table , tjs_int len , tjs_int src1lv , tjs_int src2lv)
{
	if(!TVPImportFuncPtr407)
	{
		static char funcname[] = "void ::TVPUnivTransBlend_switch_a(tjs_uint32 *,const tjs_uint32 *,const tjs_uint32 *,const tjs_uint8 *,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr407 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, const tjs_uint32 *, const tjs_uint8 *, const tjs_uint32 *, tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr407))(dest, src1, src2, rule, table, len, src1lv, src2lv);
}
inline void TVPApplyColorMap(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_uint32 color)
{
	if(!TVPImportFuncPtr408)
	{
		static char funcname[] = "void ::TVPApplyColorMap(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32)";
		TVPImportFuncPtr408 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint8 *, tjs_int , tjs_uint32);
	((__functype)(TVPImportFuncPtr408))(dest, src, len, color);
}
inline void TVPApplyColorMap_o(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_uint32 color , tjs_int opa)
{
	if(!TVPImportFuncPtr409)
	{
		static char funcname[] = "void ::TVPApplyColorMap_o(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32,tjs_int)";
		TVPImportFuncPtr409 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint8 *, tjs_int , tjs_uint32 , tjs_int);
	((__functype)(TVPImportFuncPtr409))(dest, src, len, color, opa);
}
inline void TVPApplyColorMap65(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_uint32 color)
{
	if(!TVPImportFuncPtr410)
	{
		static char funcname[] = "void ::TVPApplyColorMap65(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32)";
		TVPImportFuncPtr410 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint8 *, tjs_int , tjs_uint32);
	((__functype)(TVPImportFuncPtr410))(dest, src, len, color);
}
inline void TVPApplyColorMap65_o(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_uint32 color , tjs_int opa)
{
	if(!TVPImportFuncPtr411)
	{
		static char funcname[] = "void ::TVPApplyColorMap65_o(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32,tjs_int)";
		TVPImportFuncPtr411 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint8 *, tjs_int , tjs_uint32 , tjs_int);
	((__functype)(TVPImportFuncPtr411))(dest, src, len, color, opa);
}
inline void TVPApplyColorMap_d(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_uint32 color)
{
	if(!TVPImportFuncPtr412)
	{
		static char funcname[] = "void ::TVPApplyColorMap_d(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32)";
		TVPImportFuncPtr412 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint8 *, tjs_int , tjs_uint32);
	((__functype)(TVPImportFuncPtr412))(dest, src, len, color);
}
inline void TVPApplyColorMap65_d(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_uint32 color)
{
	if(!TVPImportFuncPtr413)
	{
		static char funcname[] = "void ::TVPApplyColorMap65_d(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32)";
		TVPImportFuncPtr413 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint8 *, tjs_int , tjs_uint32);
	((__functype)(TVPImportFuncPtr413))(dest, src, len, color);
}
inline void TVPApplyColorMap_a(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_uint32 color)
{
	if(!TVPImportFuncPtr414)
	{
		static char funcname[] = "void ::TVPApplyColorMap_a(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32)";
		TVPImportFuncPtr414 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint8 *, tjs_int , tjs_uint32);
	((__functype)(TVPImportFuncPtr414))(dest, src, len, color);
}
inline void TVPApplyColorMap65_a(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_uint32 color)
{
	if(!TVPImportFuncPtr415)
	{
		static char funcname[] = "void ::TVPApplyColorMap65_a(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32)";
		TVPImportFuncPtr415 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint8 *, tjs_int , tjs_uint32);
	((__functype)(TVPImportFuncPtr415))(dest, src, len, color);
}
inline void TVPApplyColorMap_do(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_uint32 color , tjs_int opa)
{
	if(!TVPImportFuncPtr416)
	{
		static char funcname[] = "void ::TVPApplyColorMap_do(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32,tjs_int)";
		TVPImportFuncPtr416 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint8 *, tjs_int , tjs_uint32 , tjs_int);
	((__functype)(TVPImportFuncPtr416))(dest, src, len, color, opa);
}
inline void TVPApplyColorMap65_do(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_uint32 color , tjs_int opa)
{
	if(!TVPImportFuncPtr417)
	{
		static char funcname[] = "void ::TVPApplyColorMap65_do(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32,tjs_int)";
		TVPImportFuncPtr417 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint8 *, tjs_int , tjs_uint32 , tjs_int);
	((__functype)(TVPImportFuncPtr417))(dest, src, len, color, opa);
}
inline void TVPApplyColorMap_ao(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_uint32 color , tjs_int opa)
{
	if(!TVPImportFuncPtr418)
	{
		static char funcname[] = "void ::TVPApplyColorMap_ao(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32,tjs_int)";
		TVPImportFuncPtr418 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint8 *, tjs_int , tjs_uint32 , tjs_int);
	((__functype)(TVPImportFuncPtr418))(dest, src, len, color, opa);
}
inline void TVPApplyColorMap65_ao(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_uint32 color , tjs_int opa)
{
	if(!TVPImportFuncPtr419)
	{
		static char funcname[] = "void ::TVPApplyColorMap65_ao(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32,tjs_int)";
		TVPImportFuncPtr419 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint8 *, tjs_int , tjs_uint32 , tjs_int);
	((__functype)(TVPImportFuncPtr419))(dest, src, len, color, opa);
}
inline void TVPConstColorAlphaBlend(tjs_uint32 * dest , tjs_int len , tjs_uint32 color , tjs_int opa)
{
	if(!TVPImportFuncPtr420)
	{
		static char funcname[] = "void ::TVPConstColorAlphaBlend(tjs_uint32 *,tjs_int,tjs_uint32,tjs_int)";
		TVPImportFuncPtr420 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , tjs_uint32 , tjs_int);
	((__functype)(TVPImportFuncPtr420))(dest, len, color, opa);
}
inline void TVPConstColorAlphaBlend_d(tjs_uint32 * dest , tjs_int len , tjs_uint32 color , tjs_int opa)
{
	if(!TVPImportFuncPtr421)
	{
		static char funcname[] = "void ::TVPConstColorAlphaBlend_d(tjs_uint32 *,tjs_int,tjs_uint32,tjs_int)";
		TVPImportFuncPtr421 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , tjs_uint32 , tjs_int);
	((__functype)(TVPImportFuncPtr421))(dest, len, color, opa);
}
inline void TVPConstColorAlphaBlend_a(tjs_uint32 * dest , tjs_int len , tjs_uint32 color , tjs_int opa)
{
	if(!TVPImportFuncPtr422)
	{
		static char funcname[] = "void ::TVPConstColorAlphaBlend_a(tjs_uint32 *,tjs_int,tjs_uint32,tjs_int)";
		TVPImportFuncPtr422 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , tjs_uint32 , tjs_int);
	((__functype)(TVPImportFuncPtr422))(dest, len, color, opa);
}
inline void TVPRemoveConstOpacity(tjs_uint32 * dest , tjs_int len , tjs_int strength)
{
	if(!TVPImportFuncPtr423)
	{
		static char funcname[] = "void ::TVPRemoveConstOpacity(tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr423 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr423))(dest, len, strength);
}
inline void TVPRemoveOpacity(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len)
{
	if(!TVPImportFuncPtr424)
	{
		static char funcname[] = "void ::TVPRemoveOpacity(tjs_uint32 *,const tjs_uint8 *,tjs_int)";
		TVPImportFuncPtr424 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint8 *, tjs_int);
	((__functype)(TVPImportFuncPtr424))(dest, src, len);
}
inline void TVPRemoveOpacity_o(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_int strength)
{
	if(!TVPImportFuncPtr425)
	{
		static char funcname[] = "void ::TVPRemoveOpacity_o(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_int)";
		TVPImportFuncPtr425 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint8 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr425))(dest, src, len, strength);
}
inline void TVPRemoveOpacity65(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len)
{
	if(!TVPImportFuncPtr426)
	{
		static char funcname[] = "void ::TVPRemoveOpacity65(tjs_uint32 *,const tjs_uint8 *,tjs_int)";
		TVPImportFuncPtr426 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint8 *, tjs_int);
	((__functype)(TVPImportFuncPtr426))(dest, src, len);
}
inline void TVPRemoveOpacity65_o(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_int strength)
{
	if(!TVPImportFuncPtr427)
	{
		static char funcname[] = "void ::TVPRemoveOpacity65_o(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_int)";
		TVPImportFuncPtr427 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint8 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr427))(dest, src, len, strength);
}
inline void TVPAddBlend(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	if(!TVPImportFuncPtr428)
	{
		static char funcname[] = "void ::TVPAddBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr428 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr428))(dest, src, len);
}
inline void TVPAddBlend_HDA(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	if(!TVPImportFuncPtr429)
	{
		static char funcname[] = "void ::TVPAddBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr429 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr429))(dest, src, len);
}
inline void TVPAddBlend_o(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr430)
	{
		static char funcname[] = "void ::TVPAddBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr430 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr430))(dest, src, len, opa);
}
inline void TVPAddBlend_HDA_o(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr431)
	{
		static char funcname[] = "void ::TVPAddBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr431 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr431))(dest, src, len, opa);
}
inline void TVPSubBlend(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	if(!TVPImportFuncPtr432)
	{
		static char funcname[] = "void ::TVPSubBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr432 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr432))(dest, src, len);
}
inline void TVPSubBlend_HDA(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	if(!TVPImportFuncPtr433)
	{
		static char funcname[] = "void ::TVPSubBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr433 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr433))(dest, src, len);
}
inline void TVPSubBlend_o(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr434)
	{
		static char funcname[] = "void ::TVPSubBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr434 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr434))(dest, src, len, opa);
}
inline void TVPSubBlend_HDA_o(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr435)
	{
		static char funcname[] = "void ::TVPSubBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr435 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr435))(dest, src, len, opa);
}
inline void TVPMulBlend(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	if(!TVPImportFuncPtr436)
	{
		static char funcname[] = "void ::TVPMulBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr436 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr436))(dest, src, len);
}
inline void TVPMulBlend_HDA(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	if(!TVPImportFuncPtr437)
	{
		static char funcname[] = "void ::TVPMulBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr437 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr437))(dest, src, len);
}
inline void TVPMulBlend_o(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr438)
	{
		static char funcname[] = "void ::TVPMulBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr438 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr438))(dest, src, len, opa);
}
inline void TVPMulBlend_HDA_o(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr439)
	{
		static char funcname[] = "void ::TVPMulBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr439 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr439))(dest, src, len, opa);
}
inline void TVPColorDodgeBlend(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	if(!TVPImportFuncPtr440)
	{
		static char funcname[] = "void ::TVPColorDodgeBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr440 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr440))(dest, src, len);
}
inline void TVPColorDodgeBlend_HDA(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	if(!TVPImportFuncPtr441)
	{
		static char funcname[] = "void ::TVPColorDodgeBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr441 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr441))(dest, src, len);
}
inline void TVPColorDodgeBlend_o(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr442)
	{
		static char funcname[] = "void ::TVPColorDodgeBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr442 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr442))(dest, src, len, opa);
}
inline void TVPColorDodgeBlend_HDA_o(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr443)
	{
		static char funcname[] = "void ::TVPColorDodgeBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr443 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr443))(dest, src, len, opa);
}
inline void TVPDarkenBlend(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	if(!TVPImportFuncPtr444)
	{
		static char funcname[] = "void ::TVPDarkenBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr444 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr444))(dest, src, len);
}
inline void TVPDarkenBlend_HDA(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	if(!TVPImportFuncPtr445)
	{
		static char funcname[] = "void ::TVPDarkenBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr445 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr445))(dest, src, len);
}
inline void TVPDarkenBlend_o(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr446)
	{
		static char funcname[] = "void ::TVPDarkenBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr446 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr446))(dest, src, len, opa);
}
inline void TVPDarkenBlend_HDA_o(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr447)
	{
		static char funcname[] = "void ::TVPDarkenBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr447 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr447))(dest, src, len, opa);
}
inline void TVPLightenBlend(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	if(!TVPImportFuncPtr448)
	{
		static char funcname[] = "void ::TVPLightenBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr448 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr448))(dest, src, len);
}
inline void TVPLightenBlend_HDA(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	if(!TVPImportFuncPtr449)
	{
		static char funcname[] = "void ::TVPLightenBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr449 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr449))(dest, src, len);
}
inline void TVPLightenBlend_o(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr450)
	{
		static char funcname[] = "void ::TVPLightenBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr450 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr450))(dest, src, len, opa);
}
inline void TVPLightenBlend_HDA_o(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr451)
	{
		static char funcname[] = "void ::TVPLightenBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr451 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr451))(dest, src, len, opa);
}
inline void TVPScreenBlend(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	if(!TVPImportFuncPtr452)
	{
		static char funcname[] = "void ::TVPScreenBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr452 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr452))(dest, src, len);
}
inline void TVPScreenBlend_HDA(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	if(!TVPImportFuncPtr453)
	{
		static char funcname[] = "void ::TVPScreenBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr453 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr453))(dest, src, len);
}
inline void TVPScreenBlend_o(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr454)
	{
		static char funcname[] = "void ::TVPScreenBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr454 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr454))(dest, src, len, opa);
}
inline void TVPScreenBlend_HDA_o(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	if(!TVPImportFuncPtr455)
	{
		static char funcname[] = "void ::TVPScreenBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr455 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr455))(dest, src, len, opa);
}
inline void TVPStretchCopy(tjs_uint32 * dest , tjs_int destlen , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep)
{
	if(!TVPImportFuncPtr456)
	{
		static char funcname[] = "void ::TVPStretchCopy(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr456 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr456))(dest, destlen, src, srcstart, srcstep);
}
inline void TVPFastLinearInterpH2F(tjs_uint32 * dest , tjs_int destlen , const tjs_uint32 * src)
{
	if(!TVPImportFuncPtr457)
	{
		static char funcname[] = "void ::TVPFastLinearInterpH2F(tjs_uint32 *,tjs_int,const tjs_uint32 *)";
		TVPImportFuncPtr457 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *);
	((__functype)(TVPImportFuncPtr457))(dest, destlen, src);
}
inline void TVPFastLinearInterpH2B(tjs_uint32 * dest , tjs_int destlen , const tjs_uint32 * src)
{
	if(!TVPImportFuncPtr458)
	{
		static char funcname[] = "void ::TVPFastLinearInterpH2B(tjs_uint32 *,tjs_int,const tjs_uint32 *)";
		TVPImportFuncPtr458 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *);
	((__functype)(TVPImportFuncPtr458))(dest, destlen, src);
}
inline void TVPFastLinearInterpV2(tjs_uint32 * dest , tjs_int destlen , const tjs_uint32 * src0 , const tjs_uint32 * src1)
{
	if(!TVPImportFuncPtr459)
	{
		static char funcname[] = "void ::TVPFastLinearInterpV2(tjs_uint32 *,tjs_int,const tjs_uint32 *,const tjs_uint32 *)";
		TVPImportFuncPtr459 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, const tjs_uint32 *);
	((__functype)(TVPImportFuncPtr459))(dest, destlen, src0, src1);
}
inline void TVPStretchColorCopy(tjs_uint32 * dest , tjs_int destlen , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep)
{
	if(!TVPImportFuncPtr460)
	{
		static char funcname[] = "void ::TVPStretchColorCopy(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int)";
		TVPImportFuncPtr460 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr460))(dest, destlen, src, srcstart, srcstep);
}
inline void TVPLinTransCopy(tjs_uint32 * dest , tjs_int destlen , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch)
{
	if(!TVPImportFuncPtr461)
	{
		static char funcname[] = "void ::TVPLinTransCopy(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr461 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr461))(dest, destlen, src, sx, sy, stepx, stepy, srcpitch);
}
inline void TVPLinTransColorCopy(tjs_uint32 * dest , tjs_int destlen , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch)
{
	if(!TVPImportFuncPtr462)
	{
		static char funcname[] = "void ::TVPLinTransColorCopy(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr462 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , const tjs_uint32 *, tjs_int , tjs_int , tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr462))(dest, destlen, src, sx, sy, stepx, stepy, srcpitch);
}
inline void TVPMakeAlphaFromKey(tjs_uint32 * dest , tjs_int len , tjs_uint32 key)
{
	if(!TVPImportFuncPtr463)
	{
		static char funcname[] = "void ::TVPMakeAlphaFromKey(tjs_uint32 *,tjs_int,tjs_uint32)";
		TVPImportFuncPtr463 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , tjs_uint32);
	((__functype)(TVPImportFuncPtr463))(dest, len, key);
}
inline void TVPCopyMask(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	if(!TVPImportFuncPtr464)
	{
		static char funcname[] = "void ::TVPCopyMask(tjs_uint32 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr464 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr464))(dest, src, len);
}
inline void TVPCopyColor(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	if(!TVPImportFuncPtr465)
	{
		static char funcname[] = "void ::TVPCopyColor(tjs_uint32 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr465 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr465))(dest, src, len);
}
inline void TVPBindMaskToMain(tjs_uint32 * main , const tjs_uint8 * mask , tjs_int len)
{
	if(!TVPImportFuncPtr466)
	{
		static char funcname[] = "void ::TVPBindMaskToMain(tjs_uint32 *,const tjs_uint8 *,tjs_int)";
		TVPImportFuncPtr466 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint8 *, tjs_int);
	((__functype)(TVPImportFuncPtr466))(main, mask, len);
}
inline void TVPFillARGB(tjs_uint32 * dest , tjs_int len , tjs_uint32 value)
{
	if(!TVPImportFuncPtr467)
	{
		static char funcname[] = "void ::TVPFillARGB(tjs_uint32 *,tjs_int,tjs_uint32)";
		TVPImportFuncPtr467 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , tjs_uint32);
	((__functype)(TVPImportFuncPtr467))(dest, len, value);
}
inline void TVPFillARGB_NC(tjs_uint32 * dest , tjs_int len , tjs_uint32 value)
{
	if(!TVPImportFuncPtr468)
	{
		static char funcname[] = "void ::TVPFillARGB_NC(tjs_uint32 *,tjs_int,tjs_uint32)";
		TVPImportFuncPtr468 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , tjs_uint32);
	((__functype)(TVPImportFuncPtr468))(dest, len, value);
}
inline void TVPFillColor(tjs_uint32 * dest , tjs_int len , tjs_uint32 color)
{
	if(!TVPImportFuncPtr469)
	{
		static char funcname[] = "void ::TVPFillColor(tjs_uint32 *,tjs_int,tjs_uint32)";
		TVPImportFuncPtr469 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , tjs_uint32);
	((__functype)(TVPImportFuncPtr469))(dest, len, color);
}
inline void TVPFillMask(tjs_uint32 * dest , tjs_int len , tjs_uint32 mask)
{
	if(!TVPImportFuncPtr470)
	{
		static char funcname[] = "void ::TVPFillMask(tjs_uint32 *,tjs_int,tjs_uint32)";
		TVPImportFuncPtr470 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , tjs_uint32);
	((__functype)(TVPImportFuncPtr470))(dest, len, mask);
}
inline void TVPSwapLine8(tjs_uint8 * line1 , tjs_uint8 * line2 , tjs_int len)
{
	if(!TVPImportFuncPtr471)
	{
		static char funcname[] = "void ::TVPSwapLine8(tjs_uint8 *,tjs_uint8 *,tjs_int)";
		TVPImportFuncPtr471 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint8 *, tjs_uint8 *, tjs_int);
	((__functype)(TVPImportFuncPtr471))(line1, line2, len);
}
inline void TVPSwapLine32(tjs_uint32 * line1 , tjs_uint32 * line2 , tjs_int len)
{
	if(!TVPImportFuncPtr472)
	{
		static char funcname[] = "void ::TVPSwapLine32(tjs_uint32 *,tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr472 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr472))(line1, line2, len);
}
inline void TVPReverse8(tjs_uint8 * pixels , tjs_int len)
{
	if(!TVPImportFuncPtr473)
	{
		static char funcname[] = "void ::TVPReverse8(tjs_uint8 *,tjs_int)";
		TVPImportFuncPtr473 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint8 *, tjs_int);
	((__functype)(TVPImportFuncPtr473))(pixels, len);
}
inline void TVPReverse32(tjs_uint32 * pixels , tjs_int len)
{
	if(!TVPImportFuncPtr474)
	{
		static char funcname[] = "void ::TVPReverse32(tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr474 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr474))(pixels, len);
}
inline void TVPDoGrayScale(tjs_uint32 * dest , tjs_int len)
{
	if(!TVPImportFuncPtr475)
	{
		static char funcname[] = "void ::TVPDoGrayScale(tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr475 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr475))(dest, len);
}
inline void TVPInitGammaAdjustTempData(tTVPGLGammaAdjustTempData * temp , const tTVPGLGammaAdjustData * data)
{
	if(!TVPImportFuncPtr476)
	{
		static char funcname[] = "void ::TVPInitGammaAdjustTempData(tTVPGLGammaAdjustTempData *,const tTVPGLGammaAdjustData *)";
		TVPImportFuncPtr476 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tTVPGLGammaAdjustTempData *, const tTVPGLGammaAdjustData *);
	((__functype)(TVPImportFuncPtr476))(temp, data);
}
inline void TVPUninitGammaAdjustTempData(tTVPGLGammaAdjustTempData * temp)
{
	if(!TVPImportFuncPtr477)
	{
		static char funcname[] = "void ::TVPUninitGammaAdjustTempData(tTVPGLGammaAdjustTempData *)";
		TVPImportFuncPtr477 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tTVPGLGammaAdjustTempData *);
	((__functype)(TVPImportFuncPtr477))(temp);
}
inline void TVPAdjustGamma(tjs_uint32 * dest , tjs_int len , tTVPGLGammaAdjustTempData * temp)
{
	if(!TVPImportFuncPtr478)
	{
		static char funcname[] = "void ::TVPAdjustGamma(tjs_uint32 *,tjs_int,tTVPGLGammaAdjustTempData *)";
		TVPImportFuncPtr478 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_int , tTVPGLGammaAdjustTempData *);
	((__functype)(TVPImportFuncPtr478))(dest, len, temp);
}
inline void TVPChBlurMulCopy65(tjs_uint8 * dest , const tjs_uint8 * src , tjs_int len , tjs_int level)
{
	if(!TVPImportFuncPtr479)
	{
		static char funcname[] = "void ::TVPChBlurMulCopy65(tjs_uint8 *,const tjs_uint8 *,tjs_int,tjs_int)";
		TVPImportFuncPtr479 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint8 *, const tjs_uint8 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr479))(dest, src, len, level);
}
inline void TVPChBlurAddMulCopy65(tjs_uint8 * dest , const tjs_uint8 * src , tjs_int len , tjs_int level)
{
	if(!TVPImportFuncPtr480)
	{
		static char funcname[] = "void ::TVPChBlurAddMulCopy65(tjs_uint8 *,const tjs_uint8 *,tjs_int,tjs_int)";
		TVPImportFuncPtr480 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint8 *, const tjs_uint8 *, tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr480))(dest, src, len, level);
}
inline void TVPChBlurCopy65(tjs_uint8 * dest , tjs_int destpitch , tjs_int destwidth , tjs_int destheight , const tjs_uint8 * src , tjs_int srcpitch , tjs_int srcwidth , tjs_int srcheight , tjs_int blurwidth , tjs_int blurlevel)
{
	if(!TVPImportFuncPtr481)
	{
		static char funcname[] = "void ::TVPChBlurCopy65(tjs_uint8 *,tjs_int,tjs_int,tjs_int,const tjs_uint8 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr481 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint8 *, tjs_int , tjs_int , tjs_int , const tjs_uint8 *, tjs_int , tjs_int , tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr481))(dest, destpitch, destwidth, destheight, src, srcpitch, srcwidth, srcheight, blurwidth, blurlevel);
}
inline void TVPBLExpand1BitTo8BitPal(tjs_uint8 * dest , const tjs_uint8 * buf , tjs_int len , const tjs_uint32 * pal)
{
	if(!TVPImportFuncPtr482)
	{
		static char funcname[] = "void ::TVPBLExpand1BitTo8BitPal(tjs_uint8 *,const tjs_uint8 *,tjs_int,const tjs_uint32 *)";
		TVPImportFuncPtr482 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint8 *, const tjs_uint8 *, tjs_int , const tjs_uint32 *);
	((__functype)(TVPImportFuncPtr482))(dest, buf, len, pal);
}
inline void TVPBLExpand1BitTo32BitPal(tjs_uint32 * dest , const tjs_uint8 * buf , tjs_int len , const tjs_uint32 * pal)
{
	if(!TVPImportFuncPtr483)
	{
		static char funcname[] = "void ::TVPBLExpand1BitTo32BitPal(tjs_uint32 *,const tjs_uint8 *,tjs_int,const tjs_uint32 *)";
		TVPImportFuncPtr483 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint8 *, tjs_int , const tjs_uint32 *);
	((__functype)(TVPImportFuncPtr483))(dest, buf, len, pal);
}
inline void TVPBLExpand4BitTo8BitPal(tjs_uint8 * dest , const tjs_uint8 * buf , tjs_int len , const tjs_uint32 * pal)
{
	if(!TVPImportFuncPtr484)
	{
		static char funcname[] = "void ::TVPBLExpand4BitTo8BitPal(tjs_uint8 *,const tjs_uint8 *,tjs_int,const tjs_uint32 *)";
		TVPImportFuncPtr484 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint8 *, const tjs_uint8 *, tjs_int , const tjs_uint32 *);
	((__functype)(TVPImportFuncPtr484))(dest, buf, len, pal);
}
inline void TVPBLExpand4BitTo32BitPal(tjs_uint32 * dest , const tjs_uint8 * buf , tjs_int len , const tjs_uint32 * pal)
{
	if(!TVPImportFuncPtr485)
	{
		static char funcname[] = "void ::TVPBLExpand4BitTo32BitPal(tjs_uint32 *,const tjs_uint8 *,tjs_int,const tjs_uint32 *)";
		TVPImportFuncPtr485 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint8 *, tjs_int , const tjs_uint32 *);
	((__functype)(TVPImportFuncPtr485))(dest, buf, len, pal);
}
inline void TVPBLExpand8BitTo8BitPal(tjs_uint8 * dest , const tjs_uint8 * buf , tjs_int len , const tjs_uint32 * pal)
{
	if(!TVPImportFuncPtr486)
	{
		static char funcname[] = "void ::TVPBLExpand8BitTo8BitPal(tjs_uint8 *,const tjs_uint8 *,tjs_int,const tjs_uint32 *)";
		TVPImportFuncPtr486 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint8 *, const tjs_uint8 *, tjs_int , const tjs_uint32 *);
	((__functype)(TVPImportFuncPtr486))(dest, buf, len, pal);
}
inline void TVPBLExpand8BitTo32BitPal(tjs_uint32 * dest , const tjs_uint8 * buf , tjs_int len , const tjs_uint32 * pal)
{
	if(!TVPImportFuncPtr487)
	{
		static char funcname[] = "void ::TVPBLExpand8BitTo32BitPal(tjs_uint32 *,const tjs_uint8 *,tjs_int,const tjs_uint32 *)";
		TVPImportFuncPtr487 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint8 *, tjs_int , const tjs_uint32 *);
	((__functype)(TVPImportFuncPtr487))(dest, buf, len, pal);
}
inline void TVPExpand8BitTo32BitGray(tjs_uint32 * dest , const tjs_uint8 * buf , tjs_int len)
{
	if(!TVPImportFuncPtr488)
	{
		static char funcname[] = "void ::TVPExpand8BitTo32BitGray(tjs_uint32 *,const tjs_uint8 *,tjs_int)";
		TVPImportFuncPtr488 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint8 *, tjs_int);
	((__functype)(TVPImportFuncPtr488))(dest, buf, len);
}
inline void TVPBLConvert15BitTo8Bit(tjs_uint8 * dest , const tjs_uint16 * buf , tjs_int len)
{
	if(!TVPImportFuncPtr489)
	{
		static char funcname[] = "void ::TVPBLConvert15BitTo8Bit(tjs_uint8 *,const tjs_uint16 *,tjs_int)";
		TVPImportFuncPtr489 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint8 *, const tjs_uint16 *, tjs_int);
	((__functype)(TVPImportFuncPtr489))(dest, buf, len);
}
inline void TVPBLConvert15BitTo32Bit(tjs_uint32 * dest , const tjs_uint16 * buf , tjs_int len)
{
	if(!TVPImportFuncPtr490)
	{
		static char funcname[] = "void ::TVPBLConvert15BitTo32Bit(tjs_uint32 *,const tjs_uint16 *,tjs_int)";
		TVPImportFuncPtr490 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint16 *, tjs_int);
	((__functype)(TVPImportFuncPtr490))(dest, buf, len);
}
inline void TVPBLConvert24BitTo8Bit(tjs_uint8 * dest , const tjs_uint8 * buf , tjs_int len)
{
	if(!TVPImportFuncPtr491)
	{
		static char funcname[] = "void ::TVPBLConvert24BitTo8Bit(tjs_uint8 *,const tjs_uint8 *,tjs_int)";
		TVPImportFuncPtr491 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint8 *, const tjs_uint8 *, tjs_int);
	((__functype)(TVPImportFuncPtr491))(dest, buf, len);
}
inline void TVPBLConvert24BitTo32Bit(tjs_uint32 * dest , const tjs_uint8 * buf , tjs_int len)
{
	if(!TVPImportFuncPtr492)
	{
		static char funcname[] = "void ::TVPBLConvert24BitTo32Bit(tjs_uint32 *,const tjs_uint8 *,tjs_int)";
		TVPImportFuncPtr492 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint8 *, tjs_int);
	((__functype)(TVPImportFuncPtr492))(dest, buf, len);
}
inline void TVPConvert24BitTo32Bit(tjs_uint32 * dest , const tjs_uint8 * buf , tjs_int len)
{
	if(!TVPImportFuncPtr493)
	{
		static char funcname[] = "void ::TVPConvert24BitTo32Bit(tjs_uint32 *,const tjs_uint8 *,tjs_int)";
		TVPImportFuncPtr493 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint8 *, tjs_int);
	((__functype)(TVPImportFuncPtr493))(dest, buf, len);
}
inline void TVPBLConvert32BitTo8Bit(tjs_uint8 * dest , const tjs_uint32 * buf , tjs_int len)
{
	if(!TVPImportFuncPtr494)
	{
		static char funcname[] = "void ::TVPBLConvert32BitTo8Bit(tjs_uint8 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr494 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint8 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr494))(dest, buf, len);
}
inline void TVPBLConvert32BitTo32Bit_NoneAlpha(tjs_uint32 * dest , const tjs_uint32 * buf , tjs_int len)
{
	if(!TVPImportFuncPtr495)
	{
		static char funcname[] = "void ::TVPBLConvert32BitTo32Bit_NoneAlpha(tjs_uint32 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr495 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr495))(dest, buf, len);
}
inline void TVPBLConvert32BitTo32Bit_MulAddAlpha(tjs_uint32 * dest , const tjs_uint32 * buf , tjs_int len)
{
	if(!TVPImportFuncPtr496)
	{
		static char funcname[] = "void ::TVPBLConvert32BitTo32Bit_MulAddAlpha(tjs_uint32 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr496 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr496))(dest, buf, len);
}
inline void TVPBLConvert32BitTo32Bit_AddAlpha(tjs_uint32 * dest , const tjs_uint32 * buf , tjs_int len)
{
	if(!TVPImportFuncPtr497)
	{
		static char funcname[] = "void ::TVPBLConvert32BitTo32Bit_AddAlpha(tjs_uint32 *,const tjs_uint32 *,tjs_int)";
		TVPImportFuncPtr497 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, const tjs_uint32 *, tjs_int);
	((__functype)(TVPImportFuncPtr497))(dest, buf, len);
}
inline void TVPDither32BitTo16Bit565(tjs_uint16 * dest , const tjs_uint32 * src , tjs_int len , tjs_int xofs , tjs_int yofs)
{
	if(!TVPImportFuncPtr498)
	{
		static char funcname[] = "void ::TVPDither32BitTo16Bit565(tjs_uint16 *,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr498 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint16 *, const tjs_uint32 *, tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr498))(dest, src, len, xofs, yofs);
}
inline void TVPDither32BitTo16Bit555(tjs_uint16 * dest , const tjs_uint32 * src , tjs_int len , tjs_int xofs , tjs_int yofs)
{
	if(!TVPImportFuncPtr499)
	{
		static char funcname[] = "void ::TVPDither32BitTo16Bit555(tjs_uint16 *,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr499 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint16 *, const tjs_uint32 *, tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr499))(dest, src, len, xofs, yofs);
}
inline void TVPDither32BitTo8Bit(tjs_uint8 * dest , const tjs_uint32 * src , tjs_int len , tjs_int xofs , tjs_int yofs)
{
	if(!TVPImportFuncPtr500)
	{
		static char funcname[] = "void ::TVPDither32BitTo8Bit(tjs_uint8 *,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)";
		TVPImportFuncPtr500 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint8 *, const tjs_uint32 *, tjs_int , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr500))(dest, src, len, xofs, yofs);
}
inline void TVPTLG5ComposeColors3To4(tjs_uint8 * outp , const tjs_uint8 * upper , tjs_uint8 * const * buf , tjs_int width)
{
	if(!TVPImportFuncPtr501)
	{
		static char funcname[] = "void ::TVPTLG5ComposeColors3To4(tjs_uint8 *,const tjs_uint8 *,tjs_uint8 * const *,tjs_int)";
		TVPImportFuncPtr501 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint8 *, const tjs_uint8 *, tjs_uint8 * const *, tjs_int);
	((__functype)(TVPImportFuncPtr501))(outp, upper, buf, width);
}
inline void TVPTLG5ComposeColors4To4(tjs_uint8 * outp , const tjs_uint8 * upper , tjs_uint8 * const * buf , tjs_int width)
{
	if(!TVPImportFuncPtr502)
	{
		static char funcname[] = "void ::TVPTLG5ComposeColors4To4(tjs_uint8 *,const tjs_uint8 *,tjs_uint8 * const *,tjs_int)";
		TVPImportFuncPtr502 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint8 *, const tjs_uint8 *, tjs_uint8 * const *, tjs_int);
	((__functype)(TVPImportFuncPtr502))(outp, upper, buf, width);
}
inline tjs_int TVPTLG5DecompressSlide(tjs_uint8 * out , const tjs_uint8 * in , tjs_int insize , tjs_uint8 * text , tjs_int initialr)
{
	if(!TVPImportFuncPtr503)
	{
		static char funcname[] = "tjs_int ::TVPTLG5DecompressSlide(tjs_uint8 *,const tjs_uint8 *,tjs_int,tjs_uint8 *,tjs_int)";
		TVPImportFuncPtr503 = TVPGetImportFuncPtr(funcname);
	}
	typedef tjs_int (__stdcall * __functype)(tjs_uint8 *, const tjs_uint8 *, tjs_int , tjs_uint8 *, tjs_int);
	return ((__functype)(TVPImportFuncPtr503))(out, in, insize, text, initialr);
}
inline void TVPTLG6DecodeGolombValuesForFirst(tjs_int8 * pixelbuf , tjs_int pixel_count , tjs_uint8 * bit_pool)
{
	if(!TVPImportFuncPtr504)
	{
		static char funcname[] = "void ::TVPTLG6DecodeGolombValuesForFirst(tjs_int8 *,tjs_int,tjs_uint8 *)";
		TVPImportFuncPtr504 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_int8 *, tjs_int , tjs_uint8 *);
	((__functype)(TVPImportFuncPtr504))(pixelbuf, pixel_count, bit_pool);
}
inline void TVPTLG6DecodeGolombValues(tjs_int8 * pixelbuf , tjs_int pixel_count , tjs_uint8 * bit_pool)
{
	if(!TVPImportFuncPtr505)
	{
		static char funcname[] = "void ::TVPTLG6DecodeGolombValues(tjs_int8 *,tjs_int,tjs_uint8 *)";
		TVPImportFuncPtr505 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_int8 *, tjs_int , tjs_uint8 *);
	((__functype)(TVPImportFuncPtr505))(pixelbuf, pixel_count, bit_pool);
}
inline void TVPTLG6DecodeLineGeneric(tjs_uint32 * prevline , tjs_uint32 * curline , tjs_int width , tjs_int start_block , tjs_int block_limit , tjs_uint8 * filtertypes , tjs_int skipblockbytes , tjs_uint32 * in , tjs_uint32 initialp , tjs_int oddskip , tjs_int dir)
{
	if(!TVPImportFuncPtr506)
	{
		static char funcname[] = "void ::TVPTLG6DecodeLineGeneric(tjs_uint32 *,tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_uint8 *,tjs_int,tjs_uint32 *,tjs_uint32,tjs_int,tjs_int)";
		TVPImportFuncPtr506 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_uint32 *, tjs_int , tjs_int , tjs_int , tjs_uint8 *, tjs_int , tjs_uint32 *, tjs_uint32 , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr506))(prevline, curline, width, start_block, block_limit, filtertypes, skipblockbytes, in, initialp, oddskip, dir);
}
inline void TVPTLG6DecodeLine(tjs_uint32 * prevline , tjs_uint32 * curline , tjs_int width , tjs_int block_count , tjs_uint8 * filtertypes , tjs_int skipblockbytes , tjs_uint32 * in , tjs_uint32 initialp , tjs_int oddskip , tjs_int dir)
{
	if(!TVPImportFuncPtr507)
	{
		static char funcname[] = "void ::TVPTLG6DecodeLine(tjs_uint32 *,tjs_uint32 *,tjs_int,tjs_int,tjs_uint8 *,tjs_int,tjs_uint32 *,tjs_uint32,tjs_int,tjs_int)";
		TVPImportFuncPtr507 = TVPGetImportFuncPtr(funcname);
	}
	typedef void (__stdcall * __functype)(tjs_uint32 *, tjs_uint32 *, tjs_int , tjs_int , tjs_uint8 *, tjs_int , tjs_uint32 *, tjs_uint32 , tjs_int , tjs_int);
	((__functype)(TVPImportFuncPtr507))(prevline, curline, width, block_count, filtertypes, skipblockbytes, in, initialp, oddskip, dir);
}

#ifdef __BORLANDC__
#pragma warn .8027
#endif

//---------------------------------------------------------------------------
// Stub library setup
//---------------------------------------------------------------------------
extern bool TVPInitImportStub(iTVPFunctionExporter * exporter);
extern void TVPUninitImportStub();
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
// Global reference count
//---------------------------------------------------------------------------
extern tjs_int TVPPluginGlobalRefCount;
//---------------------------------------------------------------------------

#endif

/*

	TVP2 ( T Visual Presenter 2 )  A script authoring tool
	Copyright (C) 2000-2004  W.Dee <dee@kikyou.info>

	See details of license at "license.txt"
*/
/* This file is always generated by makestub.pl . */
/* Modification by hand will be lost. */


#include "tjsCommHead.h"
#pragma hdrstop

#include "tjsVariant.h"
#include "tjsString.h"
#include "PluginImpl.h"

static void __stdcall TVP_Stub_0(tTJSVariant * _this, iTJSDispatch2 * objthis)
{
	return _this->ChangeClosureObjThis(objthis);
}
static void __stdcall TVP_Stub_1(tTJSVariant * _this)
{
	::new (_this) tTJSVariant();
}
static void __stdcall TVP_Stub_2(tTJSVariant * _this, const tTJSVariant & ref)
{
	::new (_this) tTJSVariant(ref);
}
static void __stdcall TVP_Stub_3(tTJSVariant * _this, iTJSDispatch2 * ref)
{
	::new (_this) tTJSVariant(ref);
}
static void __stdcall TVP_Stub_4(tTJSVariant * _this, iTJSDispatch2 * obj , iTJSDispatch2 * objthis)
{
	::new (_this) tTJSVariant(obj, objthis);
}
static void __stdcall TVP_Stub_5(tTJSVariant * _this, const tjs_char * ref)
{
	::new (_this) tTJSVariant(ref);
}
static void __stdcall TVP_Stub_6(tTJSVariant * _this, const tTJSString & ref)
{
	::new (_this) tTJSVariant(ref);
}
static void __stdcall TVP_Stub_7(tTJSVariant * _this, const tjs_nchar * ref)
{
	::new (_this) tTJSVariant(ref);
}
static void __stdcall TVP_Stub_8(tTJSVariant * _this, const tjs_uint8 * ref , tjs_uint len)
{
	::new (_this) tTJSVariant(ref, len);
}
static void __stdcall TVP_Stub_9(tTJSVariant * _this, bool ref)
{
	::new (_this) tTJSVariant(ref);
}
static void __stdcall TVP_Stub_10(tTJSVariant * _this, tjs_int32 ref)
{
	::new (_this) tTJSVariant(ref);
}
static void __stdcall TVP_Stub_11(tTJSVariant * _this, tjs_int64 ref)
{
	::new (_this) tTJSVariant(ref);
}
static void __stdcall TVP_Stub_12(tTJSVariant * _this, tjs_real ref)
{
	::new (_this) tTJSVariant(ref);
}
static void __stdcall TVP_Stub_13(tTJSVariant * _this, const tjs_uint8 * * src)
{
	::new (_this) tTJSVariant(src);
}
static void __stdcall TVP_Stub_14(tTJSVariant * _this)
{
	_this->~tTJSVariant();
}
static tTJSVariantType __stdcall TVP_Stub_15(tTJSVariant * _this)
{
	return _this->Type();
}
static void __stdcall TVP_Stub_16(tTJSVariant * _this)
{
	return _this->Clear();
}
static tTJSVariantClosure & __stdcall TVP_Stub_17(tTJSVariant * _this)
{
	return _this->AsObjectClosure();
}
static void __stdcall TVP_Stub_18(tTJSVariant * _this)
{
	return _this->ToObject();
}
static iTJSDispatch2 * __stdcall TVP_Stub_19(tTJSVariant * _this)
{
	return _this->operator iTJSDispatch2 *();
}
static void __stdcall TVP_Stub_20(tTJSVariant * _this)
{
	return _this->ToString();
}
static tjs_uint32 * __stdcall TVP_Stub_21(tTJSVariant * _this)
{
	return _this->GetHint();
}
static void __stdcall TVP_Stub_22(tTJSVariant * _this)
{
	return _this->ToOctet();
}
static void __stdcall TVP_Stub_23(tTJSVariant * _this)
{
	return _this->ToInteger();
}
static void __stdcall TVP_Stub_24(tTJSVariant * _this)
{
	return _this->ToReal();
}
static tTJSVariant & __stdcall TVP_Stub_25(tTJSVariant * _this, const tTJSVariant & ref)
{
	return _this->operator =(ref);
}
static void __stdcall TVP_Stub_26(tTJSVariant * _this, const tTJSVariant & ref)
{
	return _this->CopyRef(ref);
}
static tTJSVariant & __stdcall TVP_Stub_27(tTJSVariant * _this, iTJSDispatch2 * ref)
{
	return _this->operator =(ref);
}
static tTJSVariant & __stdcall TVP_Stub_28(tTJSVariant * _this, iTJSDispatch2 * ref)
{
	return _this->SetObject(ref);
}
static tTJSVariant & __stdcall TVP_Stub_29(tTJSVariant * _this, iTJSDispatch2 * object , iTJSDispatch2 * objthis)
{
	return _this->SetObject(object, objthis);
}
static tTJSVariant & __stdcall TVP_Stub_30(tTJSVariant * _this, tTJSVariantClosure ref)
{
	return _this->operator =(ref);
}
static tTJSVariant & __stdcall TVP_Stub_31(tTJSVariant * _this, tTJSVariantString * ref)
{
	return _this->operator =(ref);
}
static tTJSVariant & __stdcall TVP_Stub_32(tTJSVariant * _this, tTJSVariantOctet * ref)
{
	return _this->operator =(ref);
}
static tTJSVariant & __stdcall TVP_Stub_33(tTJSVariant * _this, const tTJSString & ref)
{
	return _this->operator =(ref);
}
static tTJSVariant & __stdcall TVP_Stub_34(tTJSVariant * _this, const tjs_char * ref)
{
	return _this->operator =(ref);
}
static tTJSVariant & __stdcall TVP_Stub_35(tTJSVariant * _this, const tjs_nchar * ref)
{
	return _this->operator =(ref);
}
static tTJSVariant & __stdcall TVP_Stub_36(tTJSVariant * _this, bool ref)
{
	return _this->operator =(ref);
}
static tTJSVariant & __stdcall TVP_Stub_37(tTJSVariant * _this, tjs_int32 ref)
{
	return _this->operator =(ref);
}
static tTJSVariant & __stdcall TVP_Stub_38(tTJSVariant * _this, const tTVInteger ref)
{
	return _this->operator =(ref);
}
static tTJSVariant & __stdcall TVP_Stub_39(tTJSVariant * _this, tjs_real ref)
{
	return _this->operator =(ref);
}
static void __stdcall TVP_Stub_40(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->logicalorequal(rhs);
}
static void __stdcall TVP_Stub_41(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->logicalandequal(rhs);
}
static void __stdcall TVP_Stub_42(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator |=(rhs);
}
static void __stdcall TVP_Stub_43(tTJSVariant * _this)
{
	return _this->increment();
}
static void __stdcall TVP_Stub_44(tTJSVariant * _this)
{
	return _this->decrement();
}
static void __stdcall TVP_Stub_45(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator ^=(rhs);
}
static void __stdcall TVP_Stub_46(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator &=(rhs);
}
static void __stdcall TVP_Stub_47(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator >>=(rhs);
}
static void __stdcall TVP_Stub_48(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->rbitshiftequal(rhs);
}
static void __stdcall TVP_Stub_49(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator <<=(rhs);
}
static void __stdcall TVP_Stub_50(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator %=(rhs);
}
static void __stdcall TVP_Stub_51(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator /=(rhs);
}
static void __stdcall TVP_Stub_52(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->idivequal(rhs);
}
static void __stdcall TVP_Stub_53(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator *=(rhs);
}
static void __stdcall TVP_Stub_54(tTJSVariant * _this)
{
	return _this->logicalnot();
}
static void __stdcall TVP_Stub_55(tTJSVariant * _this)
{
	return _this->bitnot();
}
static void __stdcall TVP_Stub_56(tTJSVariant * _this)
{
	return _this->tonumber();
}
static void __stdcall TVP_Stub_57(tTJSVariant * _this)
{
	return _this->changesign();
}
static void __stdcall TVP_Stub_58(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator -=(rhs);
}
static void __stdcall TVP_Stub_59(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator +=(rhs);
}
static bool __stdcall TVP_Stub_60(tTJSVariant * _this, const tTJSVariant & val2)
{
	return _this->NormalCompare(val2);
}
static bool __stdcall TVP_Stub_61(tTJSVariant * _this, const tTJSVariant & val2)
{
	return _this->DiscernCompare(val2);
}
static bool __stdcall TVP_Stub_62(tTJSVariant * _this, const tTJSVariant & val2)
{
	return _this->DiscernCompareStrictReal(val2);
}
static bool __stdcall TVP_Stub_63(tTJSVariant * _this, const tTJSVariant & val2)
{
	return _this->GreaterThan(val2);
}
static bool __stdcall TVP_Stub_64(tTJSVariant * _this, const tTJSVariant & val2)
{
	return _this->LittlerThan(val2);
}
static bool __stdcall TVP_Stub_65(tTJSVariant * _this, const tjs_char * classname)
{
	return _this->IsInstanceOf(classname);
}
static iTJSDispatch2 * __stdcall TVP_Stub_66(tTJSVariant * _this)
{
	return _this->AsObject();
}
static iTJSDispatch2 * __stdcall TVP_Stub_67(tTJSVariant * _this)
{
	return _this->AsObjectNoAddRef();
}
static iTJSDispatch2 * __stdcall TVP_Stub_68(tTJSVariant * _this)
{
	return _this->AsObjectThis();
}
static tTJSVariantClosure & __stdcall TVP_Stub_69(tTJSVariant * _this)
{
	return _this->AsObjectClosureNoAddRef();
}
static tTJSVariantString * __stdcall TVP_Stub_70(tTJSVariant * _this)
{
	return _this->AsString();
}
static tTJSVariantString * __stdcall TVP_Stub_71(tTJSVariant * _this)
{
	return _this->AsStringNoAddRef();
}
static const tjs_char * __stdcall TVP_Stub_72(tTJSVariant * _this)
{
	return _this->GetString();
}
static tTJSVariantOctet * __stdcall TVP_Stub_73(tTJSVariant * _this)
{
	return _this->AsOctet();
}
static tTJSVariantOctet * __stdcall TVP_Stub_74(tTJSVariant * _this)
{
	return _this->AsOctetNoAddRef();
}
static tTVInteger __stdcall TVP_Stub_75(tTJSVariant * _this)
{
	return _this->AsInteger();
}
static void __stdcall TVP_Stub_76(tTJSVariant * _this, tTJSVariant & targ)
{
	return _this->AsNumber(targ);
}
static tTVInteger __stdcall TVP_Stub_77(tTJSVariant * _this)
{
	return _this->operator tTVInteger();
}
static bool __stdcall TVP_Stub_78(tTJSVariant * _this)
{
	return _this->operator bool();
}
static tjs_int __stdcall TVP_Stub_79(tTJSVariant * _this)
{
	return _this->operator tjs_int();
}
static tTVReal __stdcall TVP_Stub_80(tTJSVariant * _this)
{
	return _this->AsReal();
}
static tTVReal __stdcall TVP_Stub_81(tTJSVariant * _this)
{
	return _this->operator tTVReal();
}
static tTJSVariant __stdcall TVP_Stub_82(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator ||(rhs);
}
static tTJSVariant __stdcall TVP_Stub_83(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator &&(rhs);
}
static tTJSVariant __stdcall TVP_Stub_84(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator |(rhs);
}
static tTJSVariant __stdcall TVP_Stub_85(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator ^(rhs);
}
static tTJSVariant __stdcall TVP_Stub_86(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator &(rhs);
}
static tTJSVariant __stdcall TVP_Stub_87(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator !=(rhs);
}
static tTJSVariant __stdcall TVP_Stub_88(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator ==(rhs);
}
static tTJSVariant __stdcall TVP_Stub_89(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator <(rhs);
}
static tTJSVariant __stdcall TVP_Stub_90(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator >(rhs);
}
static tTJSVariant __stdcall TVP_Stub_91(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator <=(rhs);
}
static tTJSVariant __stdcall TVP_Stub_92(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator >=(rhs);
}
static tTJSVariant __stdcall TVP_Stub_93(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator >>(rhs);
}
static tTJSVariant __stdcall TVP_Stub_94(tTJSVariant * _this, tjs_int count)
{
	return _this->rbitshift(count);
}
static tTJSVariant __stdcall TVP_Stub_95(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator <<(rhs);
}
static tTJSVariant __stdcall TVP_Stub_96(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator %(rhs);
}
static tTJSVariant __stdcall TVP_Stub_97(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator /(rhs);
}
static tTJSVariant __stdcall TVP_Stub_98(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->idiv(rhs);
}
static tTJSVariant __stdcall TVP_Stub_99(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator *(rhs);
}
static tTJSVariant __stdcall TVP_Stub_100(tTJSVariant * _this)
{
	return _this->operator !();
}
static tTJSVariant __stdcall TVP_Stub_101(tTJSVariant * _this)
{
	return _this->operator ~();
}
static tTJSVariant __stdcall TVP_Stub_102(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator -(rhs);
}
static tTJSVariant __stdcall TVP_Stub_103(tTJSVariant * _this)
{
	return _this->operator +();
}
static tTJSVariant __stdcall TVP_Stub_104(tTJSVariant * _this)
{
	return _this->operator -();
}
static tTJSVariant __stdcall TVP_Stub_105(tTJSVariant * _this, const tTJSVariant & rhs)
{
	return _this->operator +(rhs);
}
static void * __stdcall TVP_Stub_106(size_t size)
{
	return tTJSVariant::operator new(size);
}
static void __stdcall TVP_Stub_107(void * p)
{
	return tTJSVariant::operator delete(p);
}
static void * __stdcall TVP_Stub_108(size_t size)
{
	return tTJSVariant::operator new [](size);
}
static void __stdcall TVP_Stub_109(void * p)
{
	return tTJSVariant::operator delete [](p);
}
static void * __stdcall TVP_Stub_110(size_t size , void * buf)
{
	return tTJSVariant::operator new(size, buf);
}
static void __stdcall TVP_Stub_111(tTJSVariantOctet * _this, const tjs_uint8 * data , tjs_uint length)
{
	::new (_this) tTJSVariantOctet(data, length);
}
static void __stdcall TVP_Stub_112(tTJSVariantOctet * _this, const tjs_uint8 * data1 , tjs_uint len1 , const tjs_uint8 * data2 , tjs_uint len2)
{
	::new (_this) tTJSVariantOctet(data1, len1, data2, len2);
}
static void __stdcall TVP_Stub_113(tTJSVariantOctet * _this, const tTJSVariantOctet * o1 , const tTJSVariantOctet * o2)
{
	::new (_this) tTJSVariantOctet(o1, o2);
}
static void __stdcall TVP_Stub_114(tTJSVariantOctet * _this)
{
	_this->~tTJSVariantOctet();
}
static void __stdcall TVP_Stub_115(tTJSVariantOctet * _this)
{
	return _this->AddRef();
}
static void __stdcall TVP_Stub_116(tTJSVariantOctet * _this)
{
	return _this->Release();
}
static tjs_uint __stdcall TVP_Stub_117(tTJSVariantOctet * _this)
{
	return _this->GetLength();
}
static const tjs_uint8 * __stdcall TVP_Stub_118(tTJSVariantOctet * _this)
{
	return _this->GetData();
}
static void __stdcall TVP_Stub_119(tTJSString * _this)
{
	::new (_this) tTJSString();
}
static void __stdcall TVP_Stub_120(tTJSString * _this, const tTJSString & rhs)
{
	::new (_this) tTJSString(rhs);
}
static void __stdcall TVP_Stub_121(tTJSString * _this, tTJSVariantString * vstr)
{
	::new (_this) tTJSString(vstr);
}
static void __stdcall TVP_Stub_122(tTJSString * _this, const tjs_char * str)
{
	::new (_this) tTJSString(str);
}
static void __stdcall TVP_Stub_123(tTJSString * _this, const tjs_nchar * str)
{
	::new (_this) tTJSString(str);
}
static void __stdcall TVP_Stub_124(tTJSString * _this, const tTJSStringBufferLength len)
{
	::new (_this) tTJSString(len);
}
static void __stdcall TVP_Stub_125(tTJSString * _this, tjs_char rch)
{
	::new (_this) tTJSString(rch);
}
static void __stdcall TVP_Stub_126(tTJSString * _this, const tTJSVariant & val)
{
	::new (_this) tTJSString(val);
}
static void __stdcall TVP_Stub_127(tTJSString * _this, const tTJSString & str , int n)
{
	::new (_this) tTJSString(str, n);
}
static void __stdcall TVP_Stub_128(tTJSString * _this, const tjs_char * str , int n)
{
	::new (_this) tTJSString(str, n);
}
static void __stdcall TVP_Stub_129(tTJSString * _this, tjs_int n)
{
	::new (_this) tTJSString(n);
}
static void __stdcall TVP_Stub_130(tTJSString * _this)
{
	_this->~tTJSString();
}
static tTJSString & __stdcall TVP_Stub_131(tTJSString * _this, const tTJSString & rhs)
{
	return _this->operator =(rhs);
}
static tTJSString & __stdcall TVP_Stub_132(tTJSString * _this, const tjs_char * rhs)
{
	return _this->operator =(rhs);
}
static tTJSString & __stdcall TVP_Stub_133(tTJSString * _this, const tjs_nchar * rhs)
{
	return _this->operator =(rhs);
}
static void __stdcall TVP_Stub_134(tTJSString * _this, const tTJSString & ref)
{
	return _this->operator +=(ref);
}
static void __stdcall TVP_Stub_135(tTJSString * _this, const tTJSVariantString * ref)
{
	return _this->operator +=(ref);
}
static void __stdcall TVP_Stub_136(tTJSString * _this, const tjs_char * ref)
{
	return _this->operator +=(ref);
}
static void __stdcall TVP_Stub_137(tTJSString * _this, tjs_char rch)
{
	return _this->operator +=(rch);
}
static void __stdcall TVP_Stub_138(tTJSString * _this)
{
	return _this->Clear();
}
static tjs_char * __stdcall TVP_Stub_139(tTJSString * _this, tjs_uint len)
{
	return _this->AllocBuffer(len);
}
static tjs_char * __stdcall TVP_Stub_140(tTJSString * _this, tjs_uint len)
{
	return _this->AppendBuffer(len);
}
static void __stdcall TVP_Stub_141(tTJSString * _this)
{
	return _this->FixLen();
}
static void __stdcall TVP_Stub_142(tTJSString * _this, const tTJSString & from , const tTJSString & to , bool forall = true)
{
	return _this->Replace(from, to, forall);
}
static void __stdcall TVP_Stub_143(tTJSString * _this)
{
	return _this->ToLowerCase();
}
static void __stdcall TVP_Stub_144(tTJSString * _this)
{
	return _this->ToUppserCase();
}
static tjs_uint32 * __stdcall TVP_Stub_145(tTJSString * _this)
{
	return _this->GetHint();
}
static tjs_char * __stdcall TVP_Stub_146(tTJSString * _this)
{
	return _this->Independ();
}
static const tjs_char * __stdcall TVP_Stub_147(tTJSString * _this)
{
	return _this->c_str();
}
static tTJSVariantString * __stdcall TVP_Stub_148(tTJSString * _this)
{
	return _this->AsVariantStringNoAddRef();
}
static tjs_int64 __stdcall TVP_Stub_149(tTJSString * _this)
{
	return _this->AsInteger();
}
static bool __stdcall TVP_Stub_150(tTJSString * _this, const tTJSString & ref)
{
	return _this->operator ==(ref);
}
static bool __stdcall TVP_Stub_151(tTJSString * _this, const tTJSString & ref)
{
	return _this->operator !=(ref);
}
static tjs_int __stdcall TVP_Stub_152(tTJSString * _this, const tTJSString & ref)
{
	return _this->CompareIC(ref);
}
static bool __stdcall TVP_Stub_153(tTJSString * _this, const tjs_char * ref)
{
	return _this->operator ==(ref);
}
static bool __stdcall TVP_Stub_154(tTJSString * _this, const tjs_char * ref)
{
	return _this->operator !=(ref);
}
static tjs_int __stdcall TVP_Stub_155(tTJSString * _this, const tjs_char * ref)
{
	return _this->CompareIC(ref);
}
static bool __stdcall TVP_Stub_156(tTJSString * _this, const tTJSString & ref)
{
	return _this->operator <(ref);
}
static bool __stdcall TVP_Stub_157(tTJSString * _this, const tTJSString & ref)
{
	return _this->operator >(ref);
}
static tTJSString __stdcall TVP_Stub_158(tTJSString * _this, const tTJSString & ref)
{
	return _this->operator +(ref);
}
static tTJSString __stdcall TVP_Stub_159(tTJSString * _this, const tjs_char * ref)
{
	return _this->operator +(ref);
}
static tTJSString __stdcall TVP_Stub_160(tTJSString * _this, tjs_char rch)
{
	return _this->operator +(rch);
}
static tjs_char __stdcall TVP_Stub_161(tTJSString * _this, tjs_uint i)
{
	return _this->operator [](i);
}
static void __stdcall TVP_Stub_162(tTJSString * _this, tTJSString & dest)
{
	return _this->AsLowerCase(dest);
}
static void __stdcall TVP_Stub_163(tTJSString * _this, tTJSString & dest)
{
	return _this->AsUpperCase(dest);
}
static void __stdcall TVP_Stub_164(tTJSString * _this, tTJSString & dest)
{
	return _this->EscapeC(dest);
}
static void __stdcall TVP_Stub_165(tTJSString * _this, tTJSString & dest)
{
	return _this->UnescapeC(dest);
}
static bool __stdcall TVP_Stub_166(tTJSString * _this, const tjs_char * string)
{
	return _this->StartsWith(string);
}
static bool __stdcall TVP_Stub_167(tTJSString * _this, const tTJSString & string)
{
	return _this->StartsWith(string);
}
static tjs_int __stdcall TVP_Stub_168(tTJSString * _this)
{
	return _this->GetNarrowStrLen();
}
static void __stdcall TVP_Stub_169(tTJSString * _this, tjs_nchar * dest , tjs_int destmaxlen)
{
	return _this->ToNarrowStr(dest, destmaxlen);
}
static bool __stdcall TVP_Stub_170(tTJSString * _this)
{
	return _this->IsEmpty();
}
static tjs_int __stdcall TVP_Stub_171(tTJSString * _this)
{
	return _this->GetLen();
}
static tjs_int __stdcall TVP_Stub_172(tTJSString * _this)
{
	return _this->length();
}
static tjs_char __stdcall TVP_Stub_173(tTJSString * _this)
{
	return _this->GetLastChar();
}
static void * __stdcall TVP_Stub_174(size_t size)
{
	return tTJSString::operator new(size);
}
static void __stdcall TVP_Stub_175(void * p)
{
	return tTJSString::operator delete(p);
}
static void * __stdcall TVP_Stub_176(size_t size)
{
	return tTJSString::operator new [](size);
}
static void __stdcall TVP_Stub_177(void * p)
{
	return tTJSString::operator delete [](p);
}
static void * __stdcall TVP_Stub_178(size_t size , void * buf)
{
	return tTJSString::operator new(size, buf);
}
static void __stdcall TVP_Stub_179(tTJSVariantString * _this)
{
	return _this->AddRef();
}
static void __stdcall TVP_Stub_180(tTJSVariantString * _this)
{
	return _this->Release();
}
static void __stdcall TVP_Stub_181(tTJSVariantString * _this, const tjs_char * ref , tjs_int maxlen = - 1)
{
	return _this->SetString(ref, maxlen);
}
static void __stdcall TVP_Stub_182(tTJSVariantString * _this, const tjs_nchar * ref)
{
	return _this->SetString(ref);
}
static void __stdcall TVP_Stub_183(tTJSVariantString * _this, tjs_uint len)
{
	return _this->AllocBuffer(len);
}
static void __stdcall TVP_Stub_184(tTJSVariantString * _this, const tjs_char * ref)
{
	return _this->ResetString(ref);
}
static void __stdcall TVP_Stub_185(tTJSVariantString * _this, tjs_uint applen)
{
	return _this->AppendBuffer(applen);
}
static void __stdcall TVP_Stub_186(tTJSVariantString * _this, const tjs_char * str)
{
	return _this->Append(str);
}
static void __stdcall TVP_Stub_187(tTJSVariantString * _this, const tjs_char * str , tjs_int applen)
{
	return _this->Append(str, applen);
}
static tTJSVariantString * __stdcall TVP_Stub_188(tTJSVariantString * _this)
{
	return _this->FixLength();
}
static tjs_uint32 * __stdcall TVP_Stub_189(tTJSVariantString * _this)
{
	return _this->GetHint();
}
static const tjs_char * __stdcall TVP_Stub_190(tTJSVariantString * _this)
{
	return _this->operator const tjs_char *();
}
static tjs_int __stdcall TVP_Stub_191(tTJSVariantString * _this)
{
	return _this->GetLength();
}
static tTVInteger __stdcall TVP_Stub_192(tTJSVariantString * _this)
{
	return _this->ToInteger();
}
static tTVReal __stdcall TVP_Stub_193(tTJSVariantString * _this)
{
	return _this->ToReal();
}
static void __stdcall TVP_Stub_194(tTJSVariantString * _this, tTJSVariant & dest)
{
	return _this->ToNumber(dest);
}
static tjs_int __stdcall TVP_Stub_195(tTJSVariantString * _this)
{
	return _this->GetRefCount();
}
#include "tjsTypes.h"
#include "tjsConfig.h"
static tjs_int __stdcall TVP_Stub_196(const tjs_char * s)
{
	return TJS_atoi(s);
}
static tjs_char * __stdcall TVP_Stub_197(tjs_int value , tjs_char * string)
{
	return TJS_int_to_str(value, string);
}
static tjs_char * __stdcall TVP_Stub_198(tjs_int64 value , tjs_char * string)
{
	return TJS_tTVInt_to_str(value, string);
}
static tjs_int __stdcall TVP_Stub_199(const tjs_char * s1 , const tjs_char * s2 , size_t maxlen)
{
	return TJS_strnicmp(s1, s2, maxlen);
}
static tjs_int __stdcall TVP_Stub_200(const tjs_char * s1 , const tjs_char * s2)
{
	return TJS_stricmp(s1, s2);
}
static void __stdcall TVP_Stub_201(tjs_char * d , const tjs_char * s , size_t len)
{
	return TJS_strcpy_maxlen(d, s, len);
}
static void __stdcall TVP_Stub_202(tjs_char * d , const tjs_char * s)
{
	return TJS_strcpy(d, s);
}
static size_t __stdcall TVP_Stub_203(const tjs_char * d)
{
	return TJS_strlen(d);
}
#include "tjsVariantString.h"
static tjs_char * __stdcall TVP_Stub_204(tjs_uint len)
{
	return TJSVS_malloc(len);
}
static tjs_char * __stdcall TVP_Stub_205(tjs_char * buf , tjs_uint len)
{
	return TJSVS_realloc(buf, len);
}
static void __stdcall TVP_Stub_206(tjs_char * buf)
{
	return TJSVS_free(buf);
}
static tTJSVariantString * __stdcall TVP_Stub_207(const tjs_char * ref1 , const tjs_char * ref2)
{
	return TJSAllocVariantString(ref1, ref2);
}
static tTJSVariantString * __stdcall TVP_Stub_208(const tjs_char * ref , tjs_int n)
{
	return TJSAllocVariantString(ref, n);
}
static tTJSVariantString * __stdcall TVP_Stub_209(const tjs_char * ref)
{
	return TJSAllocVariantString(ref);
}
static tTJSVariantString * __stdcall TVP_Stub_210(const tjs_nchar * ref)
{
	return TJSAllocVariantString(ref);
}
static tTJSVariantString * __stdcall TVP_Stub_211(const tjs_uint8 * * src)
{
	return TJSAllocVariantString(src);
}
static tTJSVariantString * __stdcall TVP_Stub_212(tjs_uint len)
{
	return TJSAllocVariantStringBuffer(len);
}
static tTJSVariantString * __stdcall TVP_Stub_213(tTJSVariantString * str , const tjs_char * app)
{
	return TJSAppendVariantString(str, app);
}
static tTJSVariantString * __stdcall TVP_Stub_214(tTJSVariantString * str , const tTJSVariantString * app)
{
	return TJSAppendVariantString(str, app);
}
static tTJSVariantString * __stdcall TVP_Stub_215(const tjs_char * format , tjs_uint numparams , tTJSVariant * * params)
{
	return TJSFormatString(format, numparams, params);
}
#include "tjsUtils.h"
static const tjs_char * __stdcall TVP_Stub_216(tTJSVariantType type)
{
	return TJSVariantTypeToTypeString(type);
}
static tTJSString __stdcall TVP_Stub_217(const tTJSVariant & val , tjs_int maxlen = 512)
{
	return TJSVariantToReadableString(val, maxlen);
}
static tTJSString __stdcall TVP_Stub_218(const tTJSVariant & val)
{
	return TJSVariantToExpressionString(val);
}
static void * __stdcall TVP_Stub_219(tjs_uint bytes , tjs_uint align_bits)
{
	return TJSAlignedAlloc(bytes, align_bits);
}
static void __stdcall TVP_Stub_220(void * ptr)
{
	return TJSAlignedDealloc(ptr);
}
static tjs_uint32 __stdcall TVP_Stub_221(tjs_real r)
{
	return TJSGetFPClass(r);
}
#include "tjsString.h"
static tTJSString __stdcall TVP_Stub_222(const tjs_char * lhs , const tTJSString & rhs)
{
	return operator +(lhs, rhs);
}
static tTJSString __stdcall TVP_Stub_223(tjs_uint32 num , int zeropad = 8)
{
	return TJSInt32ToHex(num, zeropad);
}
#include "tjsInterface.h"
#include "tjsNative.h"
static tjs_int32 __stdcall TVP_Stub_224(const tjs_char * name)
{
	return TJSRegisterNativeClass(name);
}
static tjs_int32 __stdcall TVP_Stub_225(const tjs_char * name)
{
	return TJSFindNativeClassID(name);
}
static const tjs_char * __stdcall TVP_Stub_226(tjs_int32 id)
{
	return TJSFindNativeClassName(id);
}
#include "tjsErrorDefs.h"
#include "tjsVariant.h"
static void __stdcall TVP_Stub_227()
{
	return TJSThrowNullAccess();
}
static void __stdcall TVP_Stub_228()
{
	return TJSThrowDivideByZero();
}
static tTJSVariantOctet * __stdcall TVP_Stub_229(const tjs_uint8 * data , tjs_uint length)
{
	return TJSAllocVariantOctet(data, length);
}
static tTJSVariantOctet * __stdcall TVP_Stub_230(const tjs_uint8 * data1 , tjs_uint len1 , const tjs_uint8 * data2 , tjs_uint len2)
{
	return TJSAllocVariantOctet(data1, len1, data2, len2);
}
static tTJSVariantOctet * __stdcall TVP_Stub_231(const tTJSVariantOctet * o1 , const tTJSVariantOctet * o2)
{
	return TJSAllocVariantOctet(o1, o2);
}
static tTJSVariantOctet * __stdcall TVP_Stub_232(const tjs_uint8 * * src)
{
	return TJSAllocVariantOctet(src);
}
static void __stdcall TVP_Stub_233(tTJSVariantOctet * o)
{
	return TJSDeallocVariantOctet(o);
}
static tTJSVariantString * __stdcall TVP_Stub_234(const tTJSVariantOctet * oct)
{
	return TJSOctetToListString(oct);
}
static tTJSVariantString * __stdcall TVP_Stub_235(const tTJSVariantClosure & dsp)
{
	return TJSObjectToString(dsp);
}
static tTJSVariantString * __stdcall TVP_Stub_236(tjs_int64 i)
{
	return TJSIntegerToString(i);
}
static tTJSVariantString * __stdcall TVP_Stub_237(tjs_real r)
{
	return TJSRealToString(r);
}
static tTJSVariantString * __stdcall TVP_Stub_238(tjs_real r)
{
	return TJSRealToHexString(r);
}
static tTVInteger __stdcall TVP_Stub_239(const tjs_char * str)
{
	return TJSStringToInteger(str);
}
static tTVReal __stdcall TVP_Stub_240(const tjs_char * str)
{
	return TJSStringToReal(str);
}
#include "StorageIntf.h"
static ttstr __stdcall TVP_Stub_241()
{
	return TVPGetTemporaryName();
}
static ttstr __stdcall TVP_Stub_242()
{
	return TVPGetAppPath();
}
static void __stdcall TVP_Stub_243(iTVPStorageMedia * media)
{
	return TVPRegisterStorageMedia(media);
}
static void __stdcall TVP_Stub_244(iTVPStorageMedia * media)
{
	return TVPUnregisterStorageMedia(media);
}
static bool __stdcall TVP_Stub_245(const ttstr & name)
{
	return TVPIsExistentStorageNoSearch(name);
}
static bool __stdcall TVP_Stub_246(const ttstr & name)
{
	return TVPIsExistentStorageNoSearchNoNormalize(name);
}
static ttstr __stdcall TVP_Stub_247(const ttstr & name)
{
	return TVPNormalizeStorageName(name);
}
static void __stdcall TVP_Stub_248(const ttstr & name)
{
	return TVPSetCurrentDirectory(name);
}
static void __stdcall TVP_Stub_249(ttstr & name)
{
	return TVPGetLocalName(name);
}
static ttstr __stdcall TVP_Stub_250(const ttstr & name)
{
	return TVPExtractStorageExt(name);
}
static ttstr __stdcall TVP_Stub_251(const ttstr & name)
{
	return TVPExtractStorageName(name);
}
static ttstr __stdcall TVP_Stub_252(const ttstr & name)
{
	return TVPExtractStoragePath(name);
}
static ttstr __stdcall TVP_Stub_253(const ttstr & name)
{
	return TVPChopStorageExt(name);
}
static void __stdcall TVP_Stub_254(const ttstr & name)
{
	return TVPAddAutoPath(name);
}
static void __stdcall TVP_Stub_255(const ttstr & name)
{
	return TVPRemoveAutoPath(name);
}
static ttstr __stdcall TVP_Stub_256(const ttstr & name)
{
	return TVPGetPlacedPath(name);
}
static bool __stdcall TVP_Stub_257(const ttstr & name)
{
	return TVPIsExistentStorage(name);
}
static void __stdcall TVP_Stub_258()
{
	return TVPClearStorageCaches();
}
#include "XP3Archive.h"
static void __stdcall TVP_Stub_259(tTVPXP3ArchiveExtractionFilter filter)
{
	return TVPSetXP3ArchiveExtractionFilter(filter);
}
#include "EventIntf.h"
static void __stdcall TVP_Stub_260()
{
	return TVPBreathe();
}
static bool __stdcall TVP_Stub_261()
{
	return TVPGetBreathing();
}
static void __stdcall TVP_Stub_262(bool en)
{
	return TVPSetSystemEventDisabledState(en);
}
static bool __stdcall TVP_Stub_263()
{
	return TVPGetSystemEventDisabledState();
}
static void __stdcall TVP_Stub_264(iTJSDispatch2 * source , iTJSDispatch2 * target , ttstr & eventname , tjs_uint32 tag , tjs_uint32 flag , tjs_uint numargs , tTJSVariant * args)
{
	return TVPPostEvent(source, target, eventname, tag, flag, numargs, args);
}
static tjs_int __stdcall TVP_Stub_265(iTJSDispatch2 * source , iTJSDispatch2 * target , const ttstr & eventname , tjs_uint32 tag = 0)
{
	return TVPCancelEvents(source, target, eventname, tag);
}
static bool __stdcall TVP_Stub_266(iTJSDispatch2 * source , iTJSDispatch2 * target , const ttstr & eventname , tjs_uint32 tag)
{
	return TVPAreEventsInQueue(source, target, eventname, tag);
}
static tjs_int __stdcall TVP_Stub_267(iTJSDispatch2 * source , iTJSDispatch2 * target , const ttstr & eventname , tjs_uint32 tag)
{
	return TVPCountEventsInQueue(source, target, eventname, tag);
}
static void __stdcall TVP_Stub_268(iTJSDispatch2 * source , iTJSDispatch2 * target , tjs_uint32 tag = 0)
{
	return TVPCancelEventsByTag(source, target, tag);
}
static void __stdcall TVP_Stub_269(iTJSDispatch2 * source)
{
	return TVPCancelSourceEvents(source);
}
static iTJSDispatch2 * __stdcall TVP_Stub_270(const tjs_char * type , iTJSDispatch2 * targthis , iTJSDispatch2 * targ)
{
	return TVPCreateEventObject(type, targthis, targ);
}
static void __stdcall TVP_Stub_271(tTVPContinuousEventCallbackIntf * cb)
{
	return TVPAddContinuousEventHook(cb);
}
static void __stdcall TVP_Stub_272(tTVPContinuousEventCallbackIntf * cb)
{
	return TVPRemoveContinuousEventHook(cb);
}
static void __stdcall TVP_Stub_273(tTVPCompactEventCallbackIntf * cb)
{
	return TVPAddCompactEventHook(cb);
}
static void __stdcall TVP_Stub_274(tTVPCompactEventCallbackIntf * cb)
{
	return TVPRemoveCompactEventHook(cb);
}
#include "SystemIntf.h"
static ttstr __stdcall TVP_Stub_275()
{
	return TVPGetPlatformName();
}
static ttstr __stdcall TVP_Stub_276()
{
	return TVPGetOSName();
}
#include "SystemImpl.h"
static bool __stdcall TVP_Stub_277(tjs_uint keycode , bool getcurrent = true)
{
	return TVPGetAsyncKeyState(keycode, getcurrent);
}
#include "ScriptMgnIntf.h"
static iTJSDispatch2 * __stdcall TVP_Stub_278()
{
	return TVPGetScriptDispatch();
}
static void __stdcall TVP_Stub_279(const ttstr & content , tTJSVariant * result = NULL)
{
	return TVPExecuteScript(content, result);
}
static void __stdcall TVP_Stub_280(const ttstr & content , tTJSVariant * result = NULL)
{
	return TVPExecuteExpression(content, result);
}
static void __stdcall TVP_Stub_281(const ttstr & content , const ttstr & name , tjs_int lineofs , tTJSVariant * result = NULL)
{
	return TVPExecuteScript(content, name, lineofs, result);
}
static void __stdcall TVP_Stub_282(const ttstr & content , const ttstr & name , tjs_int lineofs , tTJSVariant * result = NULL)
{
	return TVPExecuteExpression(content, name, lineofs, result);
}
static void __stdcall TVP_Stub_283(const ttstr & name , tTJSVariant * result = NULL , bool isexpression = false , const tjs_char * modestr = NULL)
{
	return TVPExecuteStorage(name, result, isexpression, modestr);
}
static void __stdcall TVP_Stub_284()
{
	return TVPDumpScriptEngine();
}
static void __stdcall TVP_Stub_285(const ttstr & filename)
{
	return TVPCreateMessageMapFile(filename);
}
#include "StorageImpl.h"
static IStream * __stdcall TVP_Stub_286(const ttstr & name , tjs_uint32 flags)
{
	return TVPCreateIStream(name, flags);
}
static tTJSBinaryStream * __stdcall TVP_Stub_287(IStream * refstream)
{
	return TVPCreateBinaryStreamAdapter(refstream);
}
#include "PluginImpl.h"
static void __stdcall TVP_Stub_288(const char * funcname)
{
	return TVPThrowPluginUnboundFunctionError(funcname);
}
static void __stdcall TVP_Stub_289(const tjs_char * funcname)
{
	return TVPThrowPluginUnboundFunctionError(funcname);
}
static void * __stdcall TVP_Stub_290(size_t size)
{
	return TVP_malloc(size);
}
static void * __stdcall TVP_Stub_291(void * pp , size_t size)
{
	return TVP_realloc(pp, size);
}
static void __stdcall TVP_Stub_292(void * pp)
{
	return TVP_free(pp);
}
static tjs_int __stdcall TVP_Stub_293()
{
	return TVPGetAutoLoadPluginCount();
}
static int __stdcall TVP_Stub_294(unsigned char * dest , unsigned long * destlen , const unsigned char * source , unsigned long sourcelen)
{
	return ZLIB_uncompress(dest, destlen, source, sourcelen);
}
static int __stdcall TVP_Stub_295(unsigned char * dest , unsigned long * destlen , const unsigned char * source , unsigned long sourcelen)
{
	return ZLIB_compress(dest, destlen, source, sourcelen);
}
static int __stdcall TVP_Stub_296(unsigned char * dest , unsigned long * destlen , const unsigned char * source , unsigned long sourcelen , int level)
{
	return ZLIB_compress2(dest, destlen, source, sourcelen, level);
}
static void __stdcall TVP_Stub_297(TVP_md5_state_t * pms)
{
	return TVP_md5_init(pms);
}
static void __stdcall TVP_Stub_298(TVP_md5_state_t * pms , const tjs_uint8 * data , int nbytes)
{
	return TVP_md5_append(pms, data, nbytes);
}
static void __stdcall TVP_Stub_299(TVP_md5_state_t * pms , tjs_uint8 * digest)
{
	return TVP_md5_finish(pms, digest);
}
static HWND __stdcall TVP_Stub_300()
{
	return TVPGetApplicationWindowHandle();
}
static void __stdcall TVP_Stub_301()
{
	return TVPProcessApplicationMessages();
}
static void __stdcall TVP_Stub_302()
{
	return TVPHandleApplicationMessage();
}
static bool __stdcall TVP_Stub_303(const tjs_char * name , iTJSDispatch2 * dsp)
{
	return TVPRegisterGlobalObject(name, dsp);
}
static bool __stdcall TVP_Stub_304(const tjs_char * name)
{
	return TVPRemoveGlobalObject(name);
}
static bool __stdcall TVP_Stub_305(const char * module_filename , tjs_int & major , tjs_int & minor , tjs_int & release , tjs_int & build)
{
	return TVPGetFileVersionOf(module_filename, major, minor, release, build);
}
#include "SysInitIntf.h"
static bool __stdcall TVP_Stub_306(const tjs_char * name , tTJSVariant * value = NULL)
{
	return TVPGetCommandLine(name, value);
}
#include "SysInitImpl.h"
#include "DetectCPU.h"
static tjs_uint32 __stdcall TVP_Stub_307()
{
	return TVPGetCPUType();
}
#include "tjsArray.h"
static iTJSDispatch2 * __stdcall TVP_Stub_308(iTJSDispatch2 * * classout = NULL)
{
	return TJSCreateArrayObject(classout);
}
#include "tjsDictionary.h"
static iTJSDispatch2 * __stdcall TVP_Stub_309(iTJSDispatch2 * * classout = NULL)
{
	return TJSCreateDictionaryObject(classout);
}
#include "tjs.h"
#include "tjsObject.h"
static void __stdcall TVP_Stub_310(tjs_int op , tTJSVariant & target , const tTJSVariant * param)
{
	return TJSDoVariantOperation(op, target, param);
}
static void __stdcall TVP_Stub_311()
{
	return TJSDoRehash();
}
#include "DebugIntf.h"
static void __stdcall TVP_Stub_312(const ttstr & line)
{
	return TVPAddLog(line);
}
static void __stdcall TVP_Stub_313(const ttstr & line)
{
	return TVPAddImportantLog(line);
}
#include "KAGParser.h"
#include "Random.h"
static void __stdcall TVP_Stub_314(const void * buf , tjs_int bufsize)
{
	return TVPPushEnvironNoise(buf, bufsize);
}
static void __stdcall TVP_Stub_315(void * dest)
{
	return TVPGetRandomBits128(dest);
}
#include "TickCount.h"
static tjs_uint64 __stdcall TVP_Stub_316()
{
	return TVPGetTickCount();
}
#include "MsgIntf.h"
static ttstr __stdcall TVP_Stub_317(const tjs_char * msg , const ttstr & p1)
{
	return TVPFormatMessage(msg, p1);
}
static ttstr __stdcall TVP_Stub_318(const tjs_char * msg , const ttstr & p1 , const ttstr & p2)
{
	return TVPFormatMessage(msg, p1, p2);
}
static void __stdcall TVP_Stub_319(const tjs_char * msg)
{
	return TVPThrowExceptionMessage(msg);
}
static void __stdcall TVP_Stub_320(const tjs_char * msg , const ttstr & p1 , tjs_int num)
{
	return TVPThrowExceptionMessage(msg, p1, num);
}
static void __stdcall TVP_Stub_321(const tjs_char * msg , const ttstr & p1)
{
	return TVPThrowExceptionMessage(msg, p1);
}
static void __stdcall TVP_Stub_322(const tjs_char * msg , const ttstr & p1 , const ttstr & p2)
{
	return TVPThrowExceptionMessage(msg, p1, p2);
}
static ttstr __stdcall TVP_Stub_323()
{
	return TVPGetAboutString();
}
static ttstr __stdcall TVP_Stub_324()
{
	return TVPGetVersionInformation();
}
static ttstr __stdcall TVP_Stub_325()
{
	return TVPGetVersionString();
}
static void __stdcall TVP_Stub_326(tjs_int & major , tjs_int & minor , tjs_int & release , tjs_int & build)
{
	return TVPGetSystemVersion(major, minor, release, build);
}
static void __stdcall TVP_Stub_327(tjs_int & major , tjs_int & minor , tjs_int & release)
{
	return TVPGetTJSVersion(major, minor, release);
}
#include "WaveImpl.h"
static void __stdcall TVP_Stub_328()
{
	return TVPReleaseDirectSound();
}
static IDirectSound * __stdcall TVP_Stub_329()
{
	return TVPGetDirectSound();
}
#include "MIDIImpl.h"
static void __stdcall TVP_Stub_330(const tjs_uint8 * data , int len)
{
	return TVPMIDIOutData(data, len);
}
#include "GraphicsLoaderIntf.h"
static void __stdcall TVP_Stub_331()
{
	return TVPClearGraphicCache();
}
#include "tvpfontstruc.h"
#include "tvpinputdefs.h"
#include "LayerBitmapIntf.h"
#include "drawable.h"
#include "LayerIntf.h"
static tjs_uint32 __stdcall TVP_Stub_332(tjs_uint32 col)
{
	return TVPToActualColor(col);
}
static tjs_uint32 __stdcall TVP_Stub_333(tjs_uint32 col)
{
	return TVPFromActualColor(col);
}
#include "WindowIntf.h"
#include "WindowImpl.h"
#include "TransIntf.h"
static iTVPScanLineProvider * __stdcall TVP_Stub_334(const ttstr & name , tjs_int bpp , tjs_uint32 key , tjs_uint w , tjs_uint h)
{
	return TVPSLPLoadImage(name, bpp, key, w, h);
}
static void __stdcall TVP_Stub_335(iTVPTransHandlerProvider * pro)
{
	return TVPAddTransHandlerProvider(pro);
}
static void __stdcall TVP_Stub_336(iTVPTransHandlerProvider * pro)
{
	return TVPRemoveTransHandlerProvider(pro);
}
#include "transhandler.h"
#include "tvpgl.h"
static void __stdcall TVP_Stub_337(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	return TVPAlphaBlend(dest, src, len);
}
static void __stdcall TVP_Stub_338(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	return TVPAlphaBlend_HDA(dest, src, len);
}
static void __stdcall TVP_Stub_339(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	return TVPAlphaBlend_o(dest, src, len, opa);
}
static void __stdcall TVP_Stub_340(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	return TVPAlphaBlend_HDA_o(dest, src, len, opa);
}
static void __stdcall TVP_Stub_341(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	return TVPAlphaBlend_d(dest, src, len);
}
static void __stdcall TVP_Stub_342(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	return TVPAlphaBlend_a(dest, src, len);
}
static void __stdcall TVP_Stub_343(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	return TVPAlphaBlend_do(dest, src, len, opa);
}
static void __stdcall TVP_Stub_344(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	return TVPAlphaBlend_ao(dest, src, len, opa);
}
static void __stdcall TVP_Stub_345(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	return TVPAdditiveAlphaBlend(dest, src, len);
}
static void __stdcall TVP_Stub_346(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	return TVPAdditiveAlphaBlend_HDA(dest, src, len);
}
static void __stdcall TVP_Stub_347(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	return TVPAdditiveAlphaBlend_o(dest, src, len, opa);
}
static void __stdcall TVP_Stub_348(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	return TVPAdditiveAlphaBlend_HDA_o(dest, src, len, opa);
}
static void __stdcall TVP_Stub_349(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	return TVPAdditiveAlphaBlend_a(dest, src, len);
}
static void __stdcall TVP_Stub_350(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	return TVPAdditiveAlphaBlend_ao(dest, src, len, opa);
}
static void __stdcall TVP_Stub_351(tjs_uint32 * buf , tjs_int len)
{
	return TVPConvertAdditiveAlphaToAlpha(buf, len);
}
static void __stdcall TVP_Stub_352(tjs_uint32 * buf , tjs_int len)
{
	return TVPConvertAlphaToAdditiveAlpha(buf, len);
}
static void __stdcall TVP_Stub_353(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep)
{
	return TVPStretchAlphaBlend(dest, len, src, srcstart, srcstep);
}
static void __stdcall TVP_Stub_354(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep)
{
	return TVPStretchAlphaBlend_HDA(dest, len, src, srcstart, srcstep);
}
static void __stdcall TVP_Stub_355(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep , tjs_int opa)
{
	return TVPStretchAlphaBlend_o(dest, len, src, srcstart, srcstep, opa);
}
static void __stdcall TVP_Stub_356(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep , tjs_int opa)
{
	return TVPStretchAlphaBlend_HDA_o(dest, len, src, srcstart, srcstep, opa);
}
static void __stdcall TVP_Stub_357(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep)
{
	return TVPStretchAlphaBlend_d(dest, len, src, srcstart, srcstep);
}
static void __stdcall TVP_Stub_358(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep)
{
	return TVPStretchAlphaBlend_a(dest, len, src, srcstart, srcstep);
}
static void __stdcall TVP_Stub_359(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep , tjs_int opa)
{
	return TVPStretchAlphaBlend_do(dest, len, src, srcstart, srcstep, opa);
}
static void __stdcall TVP_Stub_360(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep , tjs_int opa)
{
	return TVPStretchAlphaBlend_ao(dest, len, src, srcstart, srcstep, opa);
}
static void __stdcall TVP_Stub_361(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep)
{
	return TVPStretchAdditiveAlphaBlend(dest, len, src, srcstart, srcstep);
}
static void __stdcall TVP_Stub_362(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep)
{
	return TVPStretchAdditiveAlphaBlend_HDA(dest, len, src, srcstart, srcstep);
}
static void __stdcall TVP_Stub_363(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep , tjs_int opa)
{
	return TVPStretchAdditiveAlphaBlend_o(dest, len, src, srcstart, srcstep, opa);
}
static void __stdcall TVP_Stub_364(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep , tjs_int opa)
{
	return TVPStretchAdditiveAlphaBlend_HDA_o(dest, len, src, srcstart, srcstep, opa);
}
static void __stdcall TVP_Stub_365(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep)
{
	return TVPStretchAdditiveAlphaBlend_a(dest, len, src, srcstart, srcstep);
}
static void __stdcall TVP_Stub_366(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep , tjs_int opa)
{
	return TVPStretchAdditiveAlphaBlend_ao(dest, len, src, srcstart, srcstep, opa);
}
static void __stdcall TVP_Stub_367(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch)
{
	return TVPLinTransAlphaBlend(dest, len, src, sx, sy, stepx, stepy, srcpitch);
}
static void __stdcall TVP_Stub_368(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch)
{
	return TVPLinTransAlphaBlend_HDA(dest, len, src, sx, sy, stepx, stepy, srcpitch);
}
static void __stdcall TVP_Stub_369(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch , tjs_int opa)
{
	return TVPLinTransAlphaBlend_o(dest, len, src, sx, sy, stepx, stepy, srcpitch, opa);
}
static void __stdcall TVP_Stub_370(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch , tjs_int opa)
{
	return TVPLinTransAlphaBlend_HDA_o(dest, len, src, sx, sy, stepx, stepy, srcpitch, opa);
}
static void __stdcall TVP_Stub_371(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch)
{
	return TVPLinTransAlphaBlend_d(dest, len, src, sx, sy, stepx, stepy, srcpitch);
}
static void __stdcall TVP_Stub_372(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch)
{
	return TVPLinTransAlphaBlend_a(dest, len, src, sx, sy, stepx, stepy, srcpitch);
}
static void __stdcall TVP_Stub_373(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch , tjs_int opa)
{
	return TVPLinTransAlphaBlend_do(dest, len, src, sx, sy, stepx, stepy, srcpitch, opa);
}
static void __stdcall TVP_Stub_374(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch , tjs_int opa)
{
	return TVPLinTransAlphaBlend_ao(dest, len, src, sx, sy, stepx, stepy, srcpitch, opa);
}
static void __stdcall TVP_Stub_375(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch)
{
	return TVPLinTransAdditiveAlphaBlend(dest, len, src, sx, sy, stepx, stepy, srcpitch);
}
static void __stdcall TVP_Stub_376(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch)
{
	return TVPLinTransAdditiveAlphaBlend_HDA(dest, len, src, sx, sy, stepx, stepy, srcpitch);
}
static void __stdcall TVP_Stub_377(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch , tjs_int opa)
{
	return TVPLinTransAdditiveAlphaBlend_o(dest, len, src, sx, sy, stepx, stepy, srcpitch, opa);
}
static void __stdcall TVP_Stub_378(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch , tjs_int opa)
{
	return TVPLinTransAdditiveAlphaBlend_HDA_o(dest, len, src, sx, sy, stepx, stepy, srcpitch, opa);
}
static void __stdcall TVP_Stub_379(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch)
{
	return TVPLinTransAdditiveAlphaBlend_a(dest, len, src, sx, sy, stepx, stepy, srcpitch);
}
static void __stdcall TVP_Stub_380(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch , tjs_int opa)
{
	return TVPLinTransAdditiveAlphaBlend_ao(dest, len, src, sx, sy, stepx, stepy, srcpitch, opa);
}
static void __stdcall TVP_Stub_381(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	return TVPCopyOpaqueImage(dest, src, len);
}
static void __stdcall TVP_Stub_382(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	return TVPConstAlphaBlend(dest, src, len, opa);
}
static void __stdcall TVP_Stub_383(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	return TVPConstAlphaBlend_HDA(dest, src, len, opa);
}
static void __stdcall TVP_Stub_384(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	return TVPConstAlphaBlend_d(dest, src, len, opa);
}
static void __stdcall TVP_Stub_385(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	return TVPConstAlphaBlend_a(dest, src, len, opa);
}
static void __stdcall TVP_Stub_386(tjs_uint32 * dest , tjs_int destlen , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep)
{
	return TVPStretchCopyOpaqueImage(dest, destlen, src, srcstart, srcstep);
}
static void __stdcall TVP_Stub_387(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep , tjs_int opa)
{
	return TVPStretchConstAlphaBlend(dest, len, src, srcstart, srcstep, opa);
}
static void __stdcall TVP_Stub_388(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep , tjs_int opa)
{
	return TVPStretchConstAlphaBlend_HDA(dest, len, src, srcstart, srcstep, opa);
}
static void __stdcall TVP_Stub_389(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep , tjs_int opa)
{
	return TVPStretchConstAlphaBlend_d(dest, len, src, srcstart, srcstep, opa);
}
static void __stdcall TVP_Stub_390(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep , tjs_int opa)
{
	return TVPStretchConstAlphaBlend_a(dest, len, src, srcstart, srcstep, opa);
}
static void __stdcall TVP_Stub_391(tjs_uint32 * dest , tjs_int destlen , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch)
{
	return TVPLinTransCopyOpaqueImage(dest, destlen, src, sx, sy, stepx, stepy, srcpitch);
}
static void __stdcall TVP_Stub_392(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch , tjs_int opa)
{
	return TVPLinTransConstAlphaBlend(dest, len, src, sx, sy, stepx, stepy, srcpitch, opa);
}
static void __stdcall TVP_Stub_393(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch , tjs_int opa)
{
	return TVPLinTransConstAlphaBlend_HDA(dest, len, src, sx, sy, stepx, stepy, srcpitch, opa);
}
static void __stdcall TVP_Stub_394(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch , tjs_int opa)
{
	return TVPLinTransConstAlphaBlend_d(dest, len, src, sx, sy, stepx, stepy, srcpitch, opa);
}
static void __stdcall TVP_Stub_395(tjs_uint32 * dest , tjs_int len , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch , tjs_int opa)
{
	return TVPLinTransConstAlphaBlend_a(dest, len, src, sx, sy, stepx, stepy, srcpitch, opa);
}
static void __stdcall TVP_Stub_396(tjs_uint32 * dest , const tjs_uint32 * src1 , const tjs_uint32 * src2 , tjs_int len , tjs_int opa)
{
	return TVPConstAlphaBlend_SD(dest, src1, src2, len, opa);
}
static void __stdcall TVP_Stub_397(tjs_uint32 * dest , const tjs_uint32 * src1 , const tjs_uint32 * src2 , tjs_int len , tjs_int opa)
{
	return TVPConstAlphaBlend_SD_a(dest, src1, src2, len, opa);
}
static void __stdcall TVP_Stub_398(tjs_uint32 * dest , const tjs_uint32 * src1 , const tjs_uint32 * src2 , tjs_int len , tjs_int opa)
{
	return TVPConstAlphaBlend_SD_d(dest, src1, src2, len, opa);
}
static void __stdcall TVP_Stub_399(tjs_uint32 * table , tjs_int phase , tjs_int vague)
{
	return TVPInitUnivTransBlendTable(table, phase, vague);
}
static void __stdcall TVP_Stub_400(tjs_uint32 * table , tjs_int phase , tjs_int vague)
{
	return TVPInitUnivTransBlendTable_d(table, phase, vague);
}
static void __stdcall TVP_Stub_401(tjs_uint32 * table , tjs_int phase , tjs_int vague)
{
	return TVPInitUnivTransBlendTable_a(table, phase, vague);
}
static void __stdcall TVP_Stub_402(tjs_uint32 * dest , const tjs_uint32 * src1 , const tjs_uint32 * src2 , const tjs_uint8 * rule , const tjs_uint32 * table , tjs_int len)
{
	return TVPUnivTransBlend(dest, src1, src2, rule, table, len);
}
static void __stdcall TVP_Stub_403(tjs_uint32 * dest , const tjs_uint32 * src1 , const tjs_uint32 * src2 , const tjs_uint8 * rule , const tjs_uint32 * table , tjs_int len , tjs_int src1lv , tjs_int src2lv)
{
	return TVPUnivTransBlend_switch(dest, src1, src2, rule, table, len, src1lv, src2lv);
}
static void __stdcall TVP_Stub_404(tjs_uint32 * dest , const tjs_uint32 * src1 , const tjs_uint32 * src2 , const tjs_uint8 * rule , const tjs_uint32 * table , tjs_int len)
{
	return TVPUnivTransBlend_d(dest, src1, src2, rule, table, len);
}
static void __stdcall TVP_Stub_405(tjs_uint32 * dest , const tjs_uint32 * src1 , const tjs_uint32 * src2 , const tjs_uint8 * rule , const tjs_uint32 * table , tjs_int len , tjs_int src1lv , tjs_int src2lv)
{
	return TVPUnivTransBlend_switch_d(dest, src1, src2, rule, table, len, src1lv, src2lv);
}
static void __stdcall TVP_Stub_406(tjs_uint32 * dest , const tjs_uint32 * src1 , const tjs_uint32 * src2 , const tjs_uint8 * rule , const tjs_uint32 * table , tjs_int len)
{
	return TVPUnivTransBlend_a(dest, src1, src2, rule, table, len);
}
static void __stdcall TVP_Stub_407(tjs_uint32 * dest , const tjs_uint32 * src1 , const tjs_uint32 * src2 , const tjs_uint8 * rule , const tjs_uint32 * table , tjs_int len , tjs_int src1lv , tjs_int src2lv)
{
	return TVPUnivTransBlend_switch_a(dest, src1, src2, rule, table, len, src1lv, src2lv);
}
static void __stdcall TVP_Stub_408(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_uint32 color)
{
	return TVPApplyColorMap(dest, src, len, color);
}
static void __stdcall TVP_Stub_409(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_uint32 color , tjs_int opa)
{
	return TVPApplyColorMap_o(dest, src, len, color, opa);
}
static void __stdcall TVP_Stub_410(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_uint32 color)
{
	return TVPApplyColorMap65(dest, src, len, color);
}
static void __stdcall TVP_Stub_411(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_uint32 color , tjs_int opa)
{
	return TVPApplyColorMap65_o(dest, src, len, color, opa);
}
static void __stdcall TVP_Stub_412(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_uint32 color)
{
	return TVPApplyColorMap_d(dest, src, len, color);
}
static void __stdcall TVP_Stub_413(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_uint32 color)
{
	return TVPApplyColorMap65_d(dest, src, len, color);
}
static void __stdcall TVP_Stub_414(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_uint32 color)
{
	return TVPApplyColorMap_a(dest, src, len, color);
}
static void __stdcall TVP_Stub_415(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_uint32 color)
{
	return TVPApplyColorMap65_a(dest, src, len, color);
}
static void __stdcall TVP_Stub_416(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_uint32 color , tjs_int opa)
{
	return TVPApplyColorMap_do(dest, src, len, color, opa);
}
static void __stdcall TVP_Stub_417(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_uint32 color , tjs_int opa)
{
	return TVPApplyColorMap65_do(dest, src, len, color, opa);
}
static void __stdcall TVP_Stub_418(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_uint32 color , tjs_int opa)
{
	return TVPApplyColorMap_ao(dest, src, len, color, opa);
}
static void __stdcall TVP_Stub_419(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_uint32 color , tjs_int opa)
{
	return TVPApplyColorMap65_ao(dest, src, len, color, opa);
}
static void __stdcall TVP_Stub_420(tjs_uint32 * dest , tjs_int len , tjs_uint32 color , tjs_int opa)
{
	return TVPConstColorAlphaBlend(dest, len, color, opa);
}
static void __stdcall TVP_Stub_421(tjs_uint32 * dest , tjs_int len , tjs_uint32 color , tjs_int opa)
{
	return TVPConstColorAlphaBlend_d(dest, len, color, opa);
}
static void __stdcall TVP_Stub_422(tjs_uint32 * dest , tjs_int len , tjs_uint32 color , tjs_int opa)
{
	return TVPConstColorAlphaBlend_a(dest, len, color, opa);
}
static void __stdcall TVP_Stub_423(tjs_uint32 * dest , tjs_int len , tjs_int strength)
{
	return TVPRemoveConstOpacity(dest, len, strength);
}
static void __stdcall TVP_Stub_424(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len)
{
	return TVPRemoveOpacity(dest, src, len);
}
static void __stdcall TVP_Stub_425(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_int strength)
{
	return TVPRemoveOpacity_o(dest, src, len, strength);
}
static void __stdcall TVP_Stub_426(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len)
{
	return TVPRemoveOpacity65(dest, src, len);
}
static void __stdcall TVP_Stub_427(tjs_uint32 * dest , const tjs_uint8 * src , tjs_int len , tjs_int strength)
{
	return TVPRemoveOpacity65_o(dest, src, len, strength);
}
static void __stdcall TVP_Stub_428(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	return TVPAddBlend(dest, src, len);
}
static void __stdcall TVP_Stub_429(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	return TVPAddBlend_HDA(dest, src, len);
}
static void __stdcall TVP_Stub_430(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	return TVPAddBlend_o(dest, src, len, opa);
}
static void __stdcall TVP_Stub_431(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	return TVPAddBlend_HDA_o(dest, src, len, opa);
}
static void __stdcall TVP_Stub_432(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	return TVPSubBlend(dest, src, len);
}
static void __stdcall TVP_Stub_433(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	return TVPSubBlend_HDA(dest, src, len);
}
static void __stdcall TVP_Stub_434(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	return TVPSubBlend_o(dest, src, len, opa);
}
static void __stdcall TVP_Stub_435(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	return TVPSubBlend_HDA_o(dest, src, len, opa);
}
static void __stdcall TVP_Stub_436(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	return TVPMulBlend(dest, src, len);
}
static void __stdcall TVP_Stub_437(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	return TVPMulBlend_HDA(dest, src, len);
}
static void __stdcall TVP_Stub_438(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	return TVPMulBlend_o(dest, src, len, opa);
}
static void __stdcall TVP_Stub_439(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	return TVPMulBlend_HDA_o(dest, src, len, opa);
}
static void __stdcall TVP_Stub_440(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	return TVPColorDodgeBlend(dest, src, len);
}
static void __stdcall TVP_Stub_441(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	return TVPColorDodgeBlend_HDA(dest, src, len);
}
static void __stdcall TVP_Stub_442(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	return TVPColorDodgeBlend_o(dest, src, len, opa);
}
static void __stdcall TVP_Stub_443(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	return TVPColorDodgeBlend_HDA_o(dest, src, len, opa);
}
static void __stdcall TVP_Stub_444(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	return TVPDarkenBlend(dest, src, len);
}
static void __stdcall TVP_Stub_445(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	return TVPDarkenBlend_HDA(dest, src, len);
}
static void __stdcall TVP_Stub_446(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	return TVPDarkenBlend_o(dest, src, len, opa);
}
static void __stdcall TVP_Stub_447(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	return TVPDarkenBlend_HDA_o(dest, src, len, opa);
}
static void __stdcall TVP_Stub_448(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	return TVPLightenBlend(dest, src, len);
}
static void __stdcall TVP_Stub_449(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	return TVPLightenBlend_HDA(dest, src, len);
}
static void __stdcall TVP_Stub_450(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	return TVPLightenBlend_o(dest, src, len, opa);
}
static void __stdcall TVP_Stub_451(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	return TVPLightenBlend_HDA_o(dest, src, len, opa);
}
static void __stdcall TVP_Stub_452(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	return TVPScreenBlend(dest, src, len);
}
static void __stdcall TVP_Stub_453(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	return TVPScreenBlend_HDA(dest, src, len);
}
static void __stdcall TVP_Stub_454(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	return TVPScreenBlend_o(dest, src, len, opa);
}
static void __stdcall TVP_Stub_455(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len , tjs_int opa)
{
	return TVPScreenBlend_HDA_o(dest, src, len, opa);
}
static void __stdcall TVP_Stub_456(tjs_uint32 * dest , tjs_int destlen , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep)
{
	return TVPStretchCopy(dest, destlen, src, srcstart, srcstep);
}
static void __stdcall TVP_Stub_457(tjs_uint32 * dest , tjs_int destlen , const tjs_uint32 * src)
{
	return TVPFastLinearInterpH2F(dest, destlen, src);
}
static void __stdcall TVP_Stub_458(tjs_uint32 * dest , tjs_int destlen , const tjs_uint32 * src)
{
	return TVPFastLinearInterpH2B(dest, destlen, src);
}
static void __stdcall TVP_Stub_459(tjs_uint32 * dest , tjs_int destlen , const tjs_uint32 * src0 , const tjs_uint32 * src1)
{
	return TVPFastLinearInterpV2(dest, destlen, src0, src1);
}
static void __stdcall TVP_Stub_460(tjs_uint32 * dest , tjs_int destlen , const tjs_uint32 * src , tjs_int srcstart , tjs_int srcstep)
{
	return TVPStretchColorCopy(dest, destlen, src, srcstart, srcstep);
}
static void __stdcall TVP_Stub_461(tjs_uint32 * dest , tjs_int destlen , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch)
{
	return TVPLinTransCopy(dest, destlen, src, sx, sy, stepx, stepy, srcpitch);
}
static void __stdcall TVP_Stub_462(tjs_uint32 * dest , tjs_int destlen , const tjs_uint32 * src , tjs_int sx , tjs_int sy , tjs_int stepx , tjs_int stepy , tjs_int srcpitch)
{
	return TVPLinTransColorCopy(dest, destlen, src, sx, sy, stepx, stepy, srcpitch);
}
static void __stdcall TVP_Stub_463(tjs_uint32 * dest , tjs_int len , tjs_uint32 key)
{
	return TVPMakeAlphaFromKey(dest, len, key);
}
static void __stdcall TVP_Stub_464(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	return TVPCopyMask(dest, src, len);
}
static void __stdcall TVP_Stub_465(tjs_uint32 * dest , const tjs_uint32 * src , tjs_int len)
{
	return TVPCopyColor(dest, src, len);
}
static void __stdcall TVP_Stub_466(tjs_uint32 * main , const tjs_uint8 * mask , tjs_int len)
{
	return TVPBindMaskToMain(main, mask, len);
}
static void __stdcall TVP_Stub_467(tjs_uint32 * dest , tjs_int len , tjs_uint32 value)
{
	return TVPFillARGB(dest, len, value);
}
static void __stdcall TVP_Stub_468(tjs_uint32 * dest , tjs_int len , tjs_uint32 value)
{
	return TVPFillARGB_NC(dest, len, value);
}
static void __stdcall TVP_Stub_469(tjs_uint32 * dest , tjs_int len , tjs_uint32 color)
{
	return TVPFillColor(dest, len, color);
}
static void __stdcall TVP_Stub_470(tjs_uint32 * dest , tjs_int len , tjs_uint32 mask)
{
	return TVPFillMask(dest, len, mask);
}
static void __stdcall TVP_Stub_471(tjs_uint8 * line1 , tjs_uint8 * line2 , tjs_int len)
{
	return TVPSwapLine8(line1, line2, len);
}
static void __stdcall TVP_Stub_472(tjs_uint32 * line1 , tjs_uint32 * line2 , tjs_int len)
{
	return TVPSwapLine32(line1, line2, len);
}
static void __stdcall TVP_Stub_473(tjs_uint8 * pixels , tjs_int len)
{
	return TVPReverse8(pixels, len);
}
static void __stdcall TVP_Stub_474(tjs_uint32 * pixels , tjs_int len)
{
	return TVPReverse32(pixels, len);
}
static void __stdcall TVP_Stub_475(tjs_uint32 * dest , tjs_int len)
{
	return TVPDoGrayScale(dest, len);
}
static void __stdcall TVP_Stub_476(tTVPGLGammaAdjustTempData * temp , const tTVPGLGammaAdjustData * data)
{
	return TVPInitGammaAdjustTempData(temp, data);
}
static void __stdcall TVP_Stub_477(tTVPGLGammaAdjustTempData * temp)
{
	return TVPUninitGammaAdjustTempData(temp);
}
static void __stdcall TVP_Stub_478(tjs_uint32 * dest , tjs_int len , tTVPGLGammaAdjustTempData * temp)
{
	return TVPAdjustGamma(dest, len, temp);
}
static void __stdcall TVP_Stub_479(tjs_uint8 * dest , const tjs_uint8 * src , tjs_int len , tjs_int level)
{
	return TVPChBlurMulCopy65(dest, src, len, level);
}
static void __stdcall TVP_Stub_480(tjs_uint8 * dest , const tjs_uint8 * src , tjs_int len , tjs_int level)
{
	return TVPChBlurAddMulCopy65(dest, src, len, level);
}
static void __stdcall TVP_Stub_481(tjs_uint8 * dest , tjs_int destpitch , tjs_int destwidth , tjs_int destheight , const tjs_uint8 * src , tjs_int srcpitch , tjs_int srcwidth , tjs_int srcheight , tjs_int blurwidth , tjs_int blurlevel)
{
	return TVPChBlurCopy65(dest, destpitch, destwidth, destheight, src, srcpitch, srcwidth, srcheight, blurwidth, blurlevel);
}
static void __stdcall TVP_Stub_482(tjs_uint8 * dest , const tjs_uint8 * buf , tjs_int len , const tjs_uint32 * pal)
{
	return TVPBLExpand1BitTo8BitPal(dest, buf, len, pal);
}
static void __stdcall TVP_Stub_483(tjs_uint32 * dest , const tjs_uint8 * buf , tjs_int len , const tjs_uint32 * pal)
{
	return TVPBLExpand1BitTo32BitPal(dest, buf, len, pal);
}
static void __stdcall TVP_Stub_484(tjs_uint8 * dest , const tjs_uint8 * buf , tjs_int len , const tjs_uint32 * pal)
{
	return TVPBLExpand4BitTo8BitPal(dest, buf, len, pal);
}
static void __stdcall TVP_Stub_485(tjs_uint32 * dest , const tjs_uint8 * buf , tjs_int len , const tjs_uint32 * pal)
{
	return TVPBLExpand4BitTo32BitPal(dest, buf, len, pal);
}
static void __stdcall TVP_Stub_486(tjs_uint8 * dest , const tjs_uint8 * buf , tjs_int len , const tjs_uint32 * pal)
{
	return TVPBLExpand8BitTo8BitPal(dest, buf, len, pal);
}
static void __stdcall TVP_Stub_487(tjs_uint32 * dest , const tjs_uint8 * buf , tjs_int len , const tjs_uint32 * pal)
{
	return TVPBLExpand8BitTo32BitPal(dest, buf, len, pal);
}
static void __stdcall TVP_Stub_488(tjs_uint32 * dest , const tjs_uint8 * buf , tjs_int len)
{
	return TVPExpand8BitTo32BitGray(dest, buf, len);
}
static void __stdcall TVP_Stub_489(tjs_uint8 * dest , const tjs_uint16 * buf , tjs_int len)
{
	return TVPBLConvert15BitTo8Bit(dest, buf, len);
}
static void __stdcall TVP_Stub_490(tjs_uint32 * dest , const tjs_uint16 * buf , tjs_int len)
{
	return TVPBLConvert15BitTo32Bit(dest, buf, len);
}
static void __stdcall TVP_Stub_491(tjs_uint8 * dest , const tjs_uint8 * buf , tjs_int len)
{
	return TVPBLConvert24BitTo8Bit(dest, buf, len);
}
static void __stdcall TVP_Stub_492(tjs_uint32 * dest , const tjs_uint8 * buf , tjs_int len)
{
	return TVPBLConvert24BitTo32Bit(dest, buf, len);
}
static void __stdcall TVP_Stub_493(tjs_uint32 * dest , const tjs_uint8 * buf , tjs_int len)
{
	return TVPConvert24BitTo32Bit(dest, buf, len);
}
static void __stdcall TVP_Stub_494(tjs_uint8 * dest , const tjs_uint32 * buf , tjs_int len)
{
	return TVPBLConvert32BitTo8Bit(dest, buf, len);
}
static void __stdcall TVP_Stub_495(tjs_uint32 * dest , const tjs_uint32 * buf , tjs_int len)
{
	return TVPBLConvert32BitTo32Bit_NoneAlpha(dest, buf, len);
}
static void __stdcall TVP_Stub_496(tjs_uint32 * dest , const tjs_uint32 * buf , tjs_int len)
{
	return TVPBLConvert32BitTo32Bit_MulAddAlpha(dest, buf, len);
}
static void __stdcall TVP_Stub_497(tjs_uint32 * dest , const tjs_uint32 * buf , tjs_int len)
{
	return TVPBLConvert32BitTo32Bit_AddAlpha(dest, buf, len);
}
static void __stdcall TVP_Stub_498(tjs_uint16 * dest , const tjs_uint32 * src , tjs_int len , tjs_int xofs , tjs_int yofs)
{
	return TVPDither32BitTo16Bit565(dest, src, len, xofs, yofs);
}
static void __stdcall TVP_Stub_499(tjs_uint16 * dest , const tjs_uint32 * src , tjs_int len , tjs_int xofs , tjs_int yofs)
{
	return TVPDither32BitTo16Bit555(dest, src, len, xofs, yofs);
}
static void __stdcall TVP_Stub_500(tjs_uint8 * dest , const tjs_uint32 * src , tjs_int len , tjs_int xofs , tjs_int yofs)
{
	return TVPDither32BitTo8Bit(dest, src, len, xofs, yofs);
}
static void __stdcall TVP_Stub_501(tjs_uint8 * outp , const tjs_uint8 * upper , tjs_uint8 * const * buf , tjs_int width)
{
	return TVPTLG5ComposeColors3To4(outp, upper, buf, width);
}
static void __stdcall TVP_Stub_502(tjs_uint8 * outp , const tjs_uint8 * upper , tjs_uint8 * const * buf , tjs_int width)
{
	return TVPTLG5ComposeColors4To4(outp, upper, buf, width);
}
static tjs_int __stdcall TVP_Stub_503(tjs_uint8 * out , const tjs_uint8 * in , tjs_int insize , tjs_uint8 * text , tjs_int initialr)
{
	return TVPTLG5DecompressSlide(out, in, insize, text, initialr);
}
static void __stdcall TVP_Stub_504(tjs_int8 * pixelbuf , tjs_int pixel_count , tjs_uint8 * bit_pool)
{
	return TVPTLG6DecodeGolombValuesForFirst(pixelbuf, pixel_count, bit_pool);
}
static void __stdcall TVP_Stub_505(tjs_int8 * pixelbuf , tjs_int pixel_count , tjs_uint8 * bit_pool)
{
	return TVPTLG6DecodeGolombValues(pixelbuf, pixel_count, bit_pool);
}
static void __stdcall TVP_Stub_506(tjs_uint32 * prevline , tjs_uint32 * curline , tjs_int width , tjs_int start_block , tjs_int block_limit , tjs_uint8 * filtertypes , tjs_int skipblockbytes , tjs_uint32 * in , tjs_uint32 initialp , tjs_int oddskip , tjs_int dir)
{
	return TVPTLG6DecodeLineGeneric(prevline, curline, width, start_block, block_limit, filtertypes, skipblockbytes, in, initialp, oddskip, dir);
}
static void __stdcall TVP_Stub_507(tjs_uint32 * prevline , tjs_uint32 * curline , tjs_int width , tjs_int block_count , tjs_uint8 * filtertypes , tjs_int skipblockbytes , tjs_uint32 * in , tjs_uint32 initialp , tjs_int oddskip , tjs_int dir)
{
	return TVPTLG6DecodeLine(prevline, curline, width, block_count, filtertypes, skipblockbytes, in, initialp, oddskip, dir);
}
#include "tvpgl_ia32_intf.h"

#include <zlib/zlib.h>
/* function table is pretty large; is compressed via zlib */
static tjs_uint8 compressed_functable[] = {
0x78, 0x9c, 0xc5, 0x5d, 0x6d, 0x6f, 0x1b, 0x37, 0x12, 0xce, 0x4f, 0x71, 0x3f, 0x34, 0x50, 0x52, 
0x17, 0x45, 0x1c, 0xdb, 0x08, 0x8a, 0x34, 0x80, 0x2c, 0xd9, 0x8e, 0x5a, 0xdb, 0xd1, 0x59, 0x8a, 
0x7b, 0xe8, 0xe1, 0x6a, 0xd0, 0xbb, 0xb4, 0xc5, 0x66, 0xb5, 0xdc, 0x72, 0x57, 0x8e, 0x75, 0x28, 
0xf2, 0xdb, 0x8f, 0xe4, 0xbe, 0xf1, 0x7d, 0xb9, 0x2f, 0x4a, 0xbe, 0x34, 0xb6, 0x38, 0xf3, 0xcc, 
0x70, 0x38, 0x33, 0x9c, 0x99, 0x5d, 0xb9, 0x8f, 0x18, 0x85, 0x7b, 0xd9, 0xf2, 0xd7, 0xc5, 0x0d, 
0x20, 0x08, 0xc4, 0xd9, 0xcf, 0x3f, 0x4f, 0x56, 0x20, 0x7e, 0x80, 0x93, 0x08, 0xa7, 0x1b, 0x02, 
0x3f, 0xdc, 0xfd, 0xb5, 0x5c, 0xa1, 0x74, 0x84, 0x28, 0xc5, 0x14, 0xa5, 0x09, 0xc8, 0x82, 0xd5, 
0xc1, 0xde, 0xcb, 0x17, 0xcf, 0x24, 0x16, 0xe1, 0x97, 0x91, 0x63, 0x29, 0xc0, 0x71, 0x9a, 0x89, 
0xc2, 0xf6, 0x9e, 0x3b, 0xa8, 0xfd, 0x45, 0x2a, 0x94, 0xfb, 0xfe, 0x9c, 0x85, 0x46, 0x7f, 0xa5, 
0xb7, 0xc1, 0x0a, 0x10, 0x1f, 0x52, 0xfa, 0xc9, 0x22, 0x23, 0x28, 0x7e, 0x70, 0xea, 0x5e, 0xe3, 
0xc6, 0xbe, 0xc0, 0x94, 0x76, 0x83, 0xe2, 0xec, 0x0d, 0xd5, 0xbf, 0xfc, 0xd9, 0xc1, 0x74, 0x87, 
0x71, 0xe4, 0x58, 0x66, 0x08, 0x14, 0xe0, 0xf5, 0x41, 0x33, 0xcd, 0xf1, 0x61, 0x03, 0x0d, 0x81, 
0xc0, 0x25, 0x4a, 0x53, 0x5f, 0xdb, 0xec, 0x97, 0x3d, 0xab, 0x7f, 0x2c, 0xb7, 0x09, 0x94, 0xbd, 
0x8f, 0x7d, 0x42, 0x69, 0x1e, 0x75, 0xb7, 0x8c, 0x20, 0x20, 0x32, 0x77, 0xe1, 0xa3, 0x7b, 0xcf, 
0x65, 0xca, 0x71, 0x4a, 0xbd, 0x16, 0x06, 0xe5, 0xb2, 0x11, 0x6d, 0x89, 0x73, 0x1a, 0xd5, 0x5d, 
0x71, 0x02, 0x09, 0xc8, 0x30, 0xd9, 0x53, 0x7c, 0xc8, 0x02, 0x92, 0xbb, 0x02, 0x03, 0x29, 0xf6, 
0xff, 0x9a, 0xd2, 0xca, 0x44, 0xe7, 0x30, 0x7b, 0x8f, 0xf8, 0xbe, 0x8d, 0x5a, 0x04, 0x19, 0xb4, 
0xad, 0xcd, 0xe2, 0x0c, 0x3e, 0x40, 0x62, 0x59, 0xbd, 0xa6, 0xc7, 0x22, 0x6b, 0xaf, 0xda, 0xa1, 
0xda, 0xcb, 0x2f, 0xe6, 0xc8, 0x33, 0xd8, 0x18, 0x27, 0xdb, 0x6b, 0x78, 0xdf, 0x18, 0xa8, 0x0e, 
0x49, 0xae, 0xd8, 0x53, 0xd9, 0x16, 0x30, 0x2b, 0x4e, 0x61, 0x10, 0x2e, 0x67, 0xdc, 0x3b, 0x54, 
0xd6, 0x3d, 0xaa, 0x03, 0x67, 0x91, 0x14, 0xba, 0x08, 0xe5, 0x3e, 0xe0, 0xcf, 0xd9, 0x90, 0x88, 
0x9a, 0x39, 0xcd, 0xd9, 0xce, 0x8b, 0xcf, 0x94, 0xcd, 0x1c, 0x8c, 0x5a, 0x96, 0x72, 0x19, 0xc4, 
0x98, 0xb2, 0x3c, 0xec, 0x70, 0x53, 0xc4, 0x49, 0x1b, 0x41, 0x79, 0x4e, 0xd3, 0x03, 0x20, 0xc2, 
0x0f, 0x28, 0x00, 0x11, 0x26, 0xf0, 0xef, 0x0d, 0x0d, 0x2f, 0xcf, 0xb0, 0x29, 0xb8, 0x40, 0x1c, 
0xb6, 0x62, 0xab, 0x74, 0xfa, 0xc7, 0x3b, 0x40, 0x51, 0x1c, 0x10, 0xb8, 0x86, 0x96, 0x74, 0x12, 
0x42, 0xd7, 0x6a, 0x25, 0xee, 0x4f, 0x6f, 0x71, 0x15, 0xcb, 0xf3, 0xf6, 0x2c, 0xef, 0xde, 0x79, 
0xf3, 0x90, 0x3b, 0x94, 0xa5, 0x2b, 0x74, 0x9f, 0x75, 0x33, 0xdf, 0xdb, 0xb7, 0xed, 0xb5, 0xfb, 
0xbe, 0x3d, 0xcb, 0x4f, 0xfe, 0xa7, 0x14, 0xa2, 0xc7, 0x6e, 0x5b, 0x79, 0xe9, 0x2d, 0xa3, 0xf0, 
0xb9, 0x18, 0x9b, 0x0f, 0x9b, 0x5a, 0xd4, 0xb6, 0x94, 0xe1, 0x78, 0xb3, 0xbe, 0xb3, 0xdc, 0x2b, 
0x01, 0x2f, 0xfe, 0x52, 0xf4, 0x10, 0xbb, 0x7d, 0xe8, 0xc7, 0xf6, 0xf6, 0xfb, 0xc1, 0xc2, 0xc2, 
0x92, 0x84, 0xcc, 0x72, 0x85, 0xc9, 0x1a, 0x44, 0x13, 0xbc, 0x4e, 0x00, 0xbd, 0xbe, 0x4d, 0x4c, 
0x7b, 0xfc, 0x43, 0x03, 0x2b, 0x4d, 0xff, 0x01, 0x24, 0xf1, 0x00, 0xbc, 0x2c, 0xb9, 0x06, 0x19, 
0xbf, 0x65, 0x5b, 0xa1, 0x9c, 0xd3, 0xdc, 0x92, 0x41, 0xb2, 0xa4, 0x86, 0x6c, 0xc7, 0x78, 0x81, 
0xb2, 0x2c, 0xea, 0xc2, 0x38, 0x4b, 0x67, 0x74, 0x01, 0xc4, 0x01, 0xfc, 0x70, 0xaf, 0xe7, 0xf8, 
0x82, 0x4d, 0xb9, 0x1b, 0xcd, 0x15, 0xd3, 0xa8, 0x15, 0xf5, 0x15, 0x1e, 0x87, 0x21, 0x2b, 0x17, 
0x5a, 0x71, 0xf1, 0x76, 0xa2, 0xe4, 0x68, 0x5d, 0xcc, 0x69, 0x32, 0x0d, 0x57, 0xb0, 0x0a, 0x50, 
0x16, 0x69, 0x6d, 0x39, 0x34, 0x59, 0xaa, 0x6d, 0xb5, 0x42, 0xcf, 0x2e, 0xa9, 0xb8, 0xe3, 0xb5, 
0xbd, 0xe5, 0xe5, 0x5f, 0x3b, 0x7a, 0x83, 0x0d, 0xca, 0x3b, 0x50, 0xa5, 0xaf, 0x4a, 0xc8, 0x82, 
0x52, 0x0f, 0xcf, 0x71, 0x7a, 0x95, 0x67, 0x03, 0xa3, 0xb3, 0x99, 0x23, 0xb9, 0x96, 0x67, 0x52, 
0x5d, 0x20, 0x64, 0xbe, 0xda, 0x40, 0x52, 0x5c, 0xfb, 0xe2, 0x5e, 0x58, 0xcc, 0xa9, 0x4a, 0xe6, 
0xd5, 0x6e, 0x93, 0x56, 0x36, 0x2a, 0xdb, 0xbd, 0xfb, 0x8f, 0x2b, 0xd0, 0x9a, 0xf9, 0x9f, 0x3f, 
0xef, 0xc7, 0xdf, 0x53, 0xfc, 0x9f, 0x3d, 0xb5, 0xef, 0xc7, 0xfe, 0x9d, 0x39, 0x9d, 0x7b, 0xf3, 
0xff, 0xd2, 0x93, 0xff, 0x6d, 0x3f, 0xf6, 0x77, 0x3d, 0xa5, 0xf7, 0xd4, 0xde, 0x52, 0x1c, 0xf9, 
0xf3, 0x77, 0xd3, 0xbf, 0xaa, 0xb4, 0xca, 0x72, 0xbb, 0xc5, 0x8e, 0x7b, 0x1a, 0xfc, 0xfb, 0x7e, 
0xec, 0x3f, 0x75, 0x62, 0x67, 0x95, 0x58, 0x3f, 0xb9, 0x2f, 0x7b, 0x46, 0x49, 0x8b, 0x74, 0xf4, 
0xa5, 0x05, 0xed, 0x8f, 0xfd, 0xd4, 0xfa, 0xa1, 0x95, 0xa8, 0x36, 0xb8, 0x0e, 0xb5, 0xf8, 0xe5, 
0xf3, 0xd2, 0xc2, 0x19, 0xc3, 0xcf, 0xa3, 0x14, 0xfd, 0x0f, 0xde, 0x66, 0xce, 0x22, 0x32, 0x84, 
0x11, 0xcc, 0xe0, 0x28, 0x87, 0x7a, 0xd1, 0x08, 0xb9, 0xf7, 0x9f, 0xff, 0xfa, 0xa3, 0x32, 0x62, 
0x5f, 0xe0, 0x02, 0x75, 0xbf, 0xa4, 0x57, 0xaf, 0x6e, 0x69, 0x46, 0x96, 0xdf, 0xf2, 0x9e, 0x73, 
0xbe, 0xf6, 0xec, 0xfb, 0xc3, 0x20, 0x6b, 0xc5, 0xc7, 0xbe, 0x6d, 0xc1, 0x84, 0xfa, 0x45, 0xa3, 
0x33, 0x34, 0x10, 0x05, 0x6d, 0x59, 0xbe, 0xd8, 0xd6, 0xaf, 0xe9, 0x71, 0x80, 0x14, 0x0a, 0x63, 
0x35, 0x03, 0x11, 0x2d, 0xb7, 0x2e, 0x60, 0xfc, 0x90, 0xad, 0x0c, 0xe5, 0x59, 0x39, 0x89, 0x34, 
0x72, 0x4d, 0x41, 0x06, 0x24, 0x97, 0xce, 0xab, 0xb6, 0xdc, 0x30, 0xf5, 0x40, 0xcf, 0xbc, 0x60, 
0x1b, 0xbe, 0x18, 0x48, 0x0d, 0x75, 0x66, 0x13, 0xac, 0x32, 0x99, 0x71, 0x12, 0xc6, 0x7e, 0x94, 
0xd5, 0x07, 0x27, 0x9b, 0xfb, 0x7b, 0x48, 0x72, 0x93, 0xd9, 0x75, 0x2e, 0x34, 0xf0, 0x40, 0x15, 
0x3a, 0x38, 0x6f, 0x5b, 0xed, 0x57, 0x2e, 0xe9, 0x61, 0x03, 0x27, 0x71, 0x79, 0x7d, 0x49, 0xeb, 
0x5f, 0xf6, 0x2c, 0x47, 0x58, 0x34, 0x15, 0x25, 0x9d, 0xc7, 0x30, 0xcd, 0x93, 0xcf, 0x78, 0x60, 
0x3e, 0x5c, 0xd5, 0xe9, 0x55, 0x21, 0xa0, 0x91, 0xff, 0x60, 0xd6, 0xce, 0x93, 0x41, 0xf3, 0x3c, 
0x1f, 0x3e, 0x61, 0x3b, 0x4e, 0xf2, 0xda, 0x4d, 0x34, 0xb2, 0x6a, 0x4c, 0x2f, 0x77, 0x49, 0xe5, 
0xf2, 0x38, 0x8a, 0x70, 0x90, 0xbb, 0xe2, 0x48, 0x48, 0x52, 0x16, 0xe2, 0x24, 0x81, 0x71, 0xa8, 
0x51, 0x6b, 0x32, 0xcf, 0xd0, 0x13, 0xf5, 0xeb, 0x91, 0x61, 0xe5, 0x1a, 0x26, 0x11, 0x08, 0xa0, 
0xc9, 0x15, 0x0d, 0x1f, 0xe5, 0xe3, 0x4a, 0x0d, 0x64, 0x89, 0x2f, 0xf0, 0x67, 0x48, 0x26, 0x79, 
0x4a, 0x32, 0x2c, 0x7f, 0x4c, 0x92, 0xb4, 0x5a, 0xd7, 0x9e, 0x04, 0x94, 0x74, 0xf5, 0x83, 0x00, 
0xcb, 0x76, 0x67, 0x71, 0x08, 0xd9, 0x86, 0x29, 0x85, 0xb1, 0xd3, 0x2c, 0xe9, 0x82, 0xdb, 0x34, 
0x33, 0x76, 0x5e, 0x52, 0x3b, 0x5b, 0x19, 0x31, 0x95, 0x56, 0xf5, 0xe6, 0xb1, 0x7c, 0x0c, 0xa4, 
0x70, 0xa9, 0x1d, 0x5e, 0x35, 0x77, 0xd0, 0xfd, 0xda, 0xe8, 0xa8, 0x8d, 0x6c, 0xdf, 0xb9, 0xd8, 
0x0a, 0xad, 0x64, 0xd7, 0xca, 0x07, 0x33, 0xb3, 0x49, 0x27, 0x71, 0xbf, 0x18, 0xbc, 0xbc, 0x85, 
0x8e, 0x1a, 0x93, 0x97, 0x86, 0x2d, 0x44, 0xbd, 0xed, 0xb4, 0xab, 0x77, 0x2e, 0x1b, 0xd6, 0x9f, 
0x99, 0x03, 0x79, 0x08, 0x5e, 0xdd, 0x2e, 0x8d, 0x9c, 0x55, 0xf6, 0x10, 0x2c, 0xc9, 0x31, 0x8c, 
0xf4, 0xb4, 0x28, 0xab, 0x42, 0x5f, 0x9d, 0x62, 0xd4, 0xde, 0x5a, 0x47, 0xa8, 0x69, 0x37, 0x06, 
0x06, 0x1a, 0xb3, 0x6d, 0x18, 0x4e, 0xd3, 0x00, 0x24, 0x70, 0xe2, 0x47, 0xfc, 0x31, 0x86, 0x0e, 
0x72, 0xed, 0x30, 0x17, 0x19, 0x20, 0x59, 0xfa, 0x3b, 0xa2, 0xa5, 0x8c, 0xb7, 0xdb, 0xe8, 0x3c, 
0x9e, 0x41, 0x44, 0xb3, 0xd0, 0x15, 0x20, 0x04, 0x7f, 0xa6, 0x1f, 0xf0, 0xa4, 0x69, 0xdb, 0xc4, 
0x12, 0x57, 0x74, 0x23, 0xe1, 0xc6, 0xda, 0x57, 0x1a, 0x47, 0x4d, 0xb3, 0x59, 0x7a, 0xba, 0x4e, 
0xb2, 0xad, 0x9a, 0x5f, 0x54, 0x25, 0x44, 0xd9, 0x26, 0x92, 0x48, 0xae, 0xed, 0x8c, 0x3e, 0xc2, 
0x60, 0x40, 0x9a, 0x4d, 0x56, 0x40, 0x99, 0x70, 0xbd, 0x34, 0xbb, 0x92, 0xb1, 0xc7, 0xd0, 0xa8, 
0xec, 0x2d, 0x86, 0x09, 0xd0, 0xd8, 0x61, 0x58, 0x30, 0x2d, 0x0d, 0x86, 0x43, 0xcf, 0x7d, 0x89, 
0x5c, 0x4b, 0xf5, 0x8e, 0x52, 0xba, 0xbe, 0x01, 0xcb, 0x5a, 0xda, 0x46, 0xb1, 0xa8, 0xe6, 0x96, 
0x5a, 0x05, 0x56, 0x55, 0x59, 0x6d, 0x78, 0xf5, 0xd2, 0x46, 0xd5, 0xd9, 0x58, 0x03, 0xd8, 0x37, 
0x90, 0x5a, 0x15, 0x74, 0xc8, 0x68, 0x28, 0x1d, 0x8c, 0xe4, 0xad, 0xf1, 0x1d, 0x16, 0xb3, 0x5d, 
0xcb, 0x0a, 0x4e, 0x5e, 0xba, 0x70, 0x4f, 0xb7, 0xbe, 0x43, 0x60, 0x28, 0x20, 0xf4, 0xc5, 0xca, 
0x79, 0x54, 0x95, 0x8c, 0x51, 0xa6, 0x23, 0x2b, 0xbd, 0x94, 0x79, 0xa4, 0x5c, 0xe7, 0x06, 0x7d, 
0xfe, 0xab, 0x8d, 0x6d, 0x6b, 0x62, 0x69, 0x2c, 0x6b, 0xb3, 0x28, 0xcd, 0x37, 0xae, 0x41, 0xb4, 
0x53, 0x79, 0x1a, 0x02, 0x13, 0xbc, 0x11, 0xa7, 0xc8, 0x05, 0x39, 0x85, 0xfd, 0x75, 0x71, 0x4b, 
0xed, 0x82, 0x4c, 0x15, 0x7b, 0x5d, 0x5e, 0xe5, 0x74, 0x94, 0xe3, 0x36, 0xc3, 0xbc, 0xba, 0x2a, 
0x00, 0xf6, 0x9d, 0xf4, 0xb9, 0x91, 0x14, 0x96, 0xe3, 0x43, 0x8d, 0xa9, 0xd6, 0x84, 0xd2, 0xc5, 
0x28, 0x58, 0x27, 0xba, 0xe3, 0x68, 0x1f, 0x94, 0x49, 0x45, 0x03, 0xf0, 0xe3, 0x2f, 0x5c, 0xb7, 
0xe2, 0x0a, 0x92, 0xed, 0xed, 0x1a, 0x3c, 0xd1, 0xb4, 0x3a, 0xf2, 0x91, 0xaa, 0x31, 0xbb, 0xb8, 
0x5e, 0x3c, 0xcb, 0xd9, 0x6a, 0x06, 0x26, 0xa6, 0xd9, 0xe0, 0x37, 0x0b, 0xaa, 0x12, 0x4b, 0x06, 
0xe6, 0x56, 0xa0, 0xa4, 0x61, 0x0f, 0xeb, 0x4b, 0x22, 0x21, 0xcc, 0x84, 0x88, 0x2e, 0x29, 0xef, 
0x09, 0x84, 0x23, 0x49, 0xa2, 0x21, 0x0a, 0x39, 0x31, 0xcf, 0x41, 0xd2, 0x8a, 0x8f, 0x49, 0x7b, 
0xc1, 0x39, 0x53, 0x83, 0x2f, 0x4a, 0x57, 0x6e, 0xd3, 0x8b, 0x1b, 0x2d, 0xd8, 0xcd, 0xaf, 0x76, 
0x35, 0x01, 0xe8, 0x7d, 0x9e, 0x95, 0x97, 0xa7, 0x53, 0x59, 0xba, 0x81, 0xb8, 0xd5, 0x91, 0xb4, 
0x83, 0x34, 0xb5, 0xcc, 0x56, 0xec, 0x33, 0xf6, 0x80, 0xda, 0x79, 0xd0, 0x7c, 0x2e, 0x27, 0x66, 
0x32, 0x6e, 0x3b, 0xad, 0xad, 0xcb, 0x1d, 0x37, 0x27, 0x61, 0x6f, 0xbe, 0x2d, 0x31, 0xfb, 0xaf, 
0xae, 0x2d, 0xfb, 0x54, 0x1a, 0x31, 0x48, 0x8c, 0x2c, 0xc1, 0x86, 0xe0, 0x2e, 0x82, 0xb2, 0x46, 
0x62, 0x1e, 0x95, 0xbd, 0xcf, 0x08, 0x72, 0xfa, 0x94, 0x10, 0x98, 0xa6, 0x08, 0xc7, 0x76, 0x98, 
0xaa, 0x6e, 0x29, 0x4e, 0x1c, 0x3d, 0xc4, 0x30, 0x1c, 0x4b, 0x21, 0x6c, 0x8c, 0xcd, 0x82, 0x72, 
0x5a, 0x44, 0x72, 0x35, 0x35, 0xad, 0x6f, 0x3c, 0x4e, 0x46, 0x53, 0xf9, 0xd9, 0x7c, 0x12, 0x81, 
0x34, 0x55, 0xde, 0x3c, 0xac, 0x14, 0x76, 0x34, 0x20, 0x86, 0x8e, 0x5e, 0xdf, 0xed, 0x8c, 0x09, 
0x5b, 0xe2, 0xf7, 0xf0, 0x69, 0x54, 0x0b, 0xdf, 0xaf, 0x32, 0x8f, 0xa0, 0xcb, 0x35, 0x7c, 0x40, 
0x69, 0x06, 0xc9, 0x15, 0xc8, 0xd0, 0x23, 0xcc, 0x95, 0x32, 0xa7, 0x34, 0x81, 0xe9, 0x0c, 0xc5, 
0xa1, 0xc0, 0x30, 0x9b, 0x1a, 0x58, 0xcc, 0x4e, 0xa0, 0x70, 0x5e, 0x81, 0x35, 0x14, 0x5f, 0x89, 
0xaa, 0x4d, 0xb9, 0x5c, 0xd1, 0xa2, 0xfc, 0x6a, 0x13, 0x45, 0xe3, 0x20, 0xa0, 0xc7, 0x35, 0xd2, 
0xd6, 0xa6, 0xe8, 0x11, 0x85, 0xf0, 0x64, 0xfb, 0x07, 0x24, 0x58, 0xae, 0x15, 0xca, 0x87, 0xca, 
0x5a, 0xb8, 0xb6, 0x1f, 0x50, 0x77, 0x41, 0x69, 0x35, 0xa7, 0x6e, 0x14, 0xa0, 0xd1, 0xb7, 0x18, 
0x57, 0xb7, 0xd0, 0x5e, 0xbe, 0x49, 0x0b, 0x07, 0x96, 0x58, 0x1a, 0x04, 0xca, 0x99, 0x83, 0x53, 
0x2c, 0xf1, 0x05, 0x75, 0x2d, 0x5b, 0x94, 0x79, 0x80, 0xe4, 0x2f, 0x52, 0x60, 0x1b, 0x42, 0xf5, 
0x2a, 0x85, 0x03, 0xa3, 0x28, 0xe0, 0x2a, 0x10, 0xf3, 0xdb, 0xc0, 0x32, 0x0f, 0xab, 0xe3, 0x24, 
0x06, 0xed, 0xd5, 0x60, 0x13, 0x3d, 0x8d, 0x35, 0x03, 0x4b, 0x55, 0x5e, 0x72, 0xca, 0x9c, 0xa0, 
0x2e, 0x2b, 0x4d, 0x79, 0x3e, 0x2f, 0x30, 0x25, 0x72, 0xf1, 0xed, 0x1c, 0x91, 0x36, 0xa3, 0x25, 
0x08, 0xa3, 0xbc, 0x99, 0xd3, 0x8c, 0xb2, 0x84, 0xeb, 0x04, 0x13, 0x40, 0xb6, 0x3c, 0xa6, 0xd4, 
0x55, 0x7a, 0x4d, 0xcc, 0x01, 0x2f, 0xbf, 0xcb, 0x53, 0xbe, 0x99, 0x97, 0xa1, 0xbf, 0xa0, 0x89, 
0x06, 0x3c, 0xc0, 0x4b, 0x18, 0x22, 0x30, 0x42, 0x74, 0x41, 0xfc, 0x40, 0x74, 0x8c, 0x9b, 0xf9, 
0xc7, 0x98, 0xf8, 0x32, 0xf1, 0x8e, 0x99, 0x33, 0xd1, 0x56, 0xf9, 0x89, 0xf1, 0x30, 0xbb, 0x71, 
0x9a, 0x2b, 0xbc, 0x80, 0x80, 0x04, 0x55, 0x4f, 0xcf, 0x35, 0x7d, 0xee, 0xc5, 0x72, 0x85, 0xf3, 
0xb7, 0xa6, 0x68, 0x21, 0xa6, 0x72, 0x0b, 0x1b, 0xae, 0x68, 0x4a, 0x6e, 0x66, 0x12, 0x85, 0xbc, 
0xde, 0x14, 0xed, 0xee, 0x26, 0x1b, 0x42, 0xa8, 0xb0, 0x29, 0x22, 0xd4, 0xe3, 0x30, 0xd9, 0xda, 
0x89, 0x59, 0x0f, 0x81, 0x03, 0x10, 0xe5, 0x99, 0xcb, 0x20, 0xfb, 0xf4, 0x29, 0x23, 0x20, 0x28, 
0xf5, 0xa6, 0xbf, 0x39, 0xf4, 0x94, 0x69, 0x4d, 0x5a, 0x5a, 0x89, 0xf9, 0x69, 0xda, 0x89, 0x27, 
0x2b, 0x9c, 0xd8, 0x55, 0xa8, 0xb7, 0x43, 0x1b, 0xeb, 0xf1, 0x26, 0xc3, 0x26, 0x34, 0xd1, 0x51, 
0xd6, 0xf8, 0x11, 0xda, 0xe8, 0x64, 0x47, 0x9b, 0xb3, 0x41, 0x74, 0x68, 0xa2, 0x73, 0x9c, 0xae, 
0x5d, 0x34, 0x9f, 0xb3, 0x17, 0x54, 0x13, 0x10, 0xac, 0x60, 0x3a, 0x52, 0x8e, 0xee, 0xdf, 0xf3, 
0xd7, 0x63, 0xea, 0x18, 0xf4, 0x46, 0x29, 0x0c, 0x44, 0x6f, 0xf6, 0x33, 0x14, 0x65, 0xbc, 0xc5, 
0xba, 0x99, 0xdb, 0x97, 0x45, 0x9c, 0x13, 0xf6, 0x36, 0xdb, 0x8a, 0x85, 0x4d, 0xad, 0x25, 0xdd, 
0x4c, 0xfe, 0x31, 0xe2, 0x8f, 0x59, 0x24, 0xa1, 0x8b, 0x2d, 0x55, 0x7f, 0x7d, 0xfa, 0xc8, 0x7d, 
0x26, 0x65, 0x35, 0x49, 0xb8, 0xc8, 0x40, 0x06, 0x8b, 0x57, 0x81, 0x25, 0x10, 0x2b, 0xad, 0x88, 
0x39, 0xc7, 0x69, 0xc6, 0x49, 0x9a, 0xde, 0xf6, 0xde, 0x2f, 0x8c, 0xb4, 0x2f, 0xdc, 0xeb, 0x86, 
0x1f, 0xe5, 0xa2, 0x4c, 0x6a, 0xaf, 0xa8, 0x51, 0xd9, 0x4b, 0x74, 0x11, 0x17, 0xa7, 0x7d, 0xe5, 
0x45, 0x93, 0x27, 0x1d, 0x8d, 0x20, 0x4a, 0xdc, 0xe5, 0x98, 0xc0, 0x1c, 0x6d, 0x16, 0xff, 0x6b, 
0x03, 0x37, 0xb0, 0x07, 0xa8, 0xac, 0x28, 0xeb, 0x76, 0x87, 0x42, 0x16, 0x9c, 0x4a, 0xd8, 0xff, 
0xc9, 0x76, 0x09, 0x1e, 0x9a, 0x8d, 0xee, 0xc0, 0x59, 0xe0, 0x0d, 0x09, 0xa0, 0xd9, 0x9a, 0x2f, 
0xb4, 0x97, 0x05, 0x73, 0x46, 0xfe, 0xf2, 0x24, 0x67, 0x29, 0xde, 0x48, 0xd4, 0x9f, 0x0a, 0xba, 
0x35, 0x52, 0x62, 0x78, 0x82, 0xe3, 0x0c, 0xc5, 0x1b, 0xbc, 0x49, 0x39, 0xe8, 0x7b, 0x8c, 0x3f, 
0x71, 0xef, 0x57, 0x3e, 0x9f, 0xd0, 0x6b, 0xfd, 0x0e, 0x04, 0x9f, 0xe8, 0xfd, 0x73, 0x2f, 0x63, 
0xe4, 0x21, 0xde, 0x1b, 0x86, 0xab, 0xb2, 0x4e, 0x68, 0x98, 0xa9, 0x00, 0xf5, 0x87, 0xcd, 0x4a, 
0xb4, 0x04, 0xd0, 0x12, 0x50, 0x76, 0x4f, 0xf3, 0xbf, 0xf1, 0x1a, 0xfc, 0xb0, 0x28, 0x3e, 0x96, 
0x22, 0x74, 0x9c, 0x6e, 0xe3, 0xe0, 0x37, 0xb8, 0xcd, 0xc3, 0xb2, 0x0a, 0xa1, 0x3c, 0x96, 0x8d, 
0x07, 0xc8, 0xc2, 0x3a, 0x20, 0x28, 0xc9, 0xca, 0x15, 0x29, 0x98, 0x4f, 0x9f, 0x60, 0xb0, 0xc9, 
0x60, 0x4e, 0x31, 0x52, 0x3c, 0x52, 0x8e, 0x4b, 0x8d, 0xa9, 0x6e, 0x4f, 0x5a, 0x32, 0x1a, 0xa5, 
0xe9, 0xd1, 0x60, 0xc8, 0x0d, 0xfe, 0x3a, 0x74, 0x83, 0x33, 0x26, 0x79, 0x99, 0x8b, 0xdb, 0xda, 
0x31, 0xdc, 0xb9, 0x99, 0x4f, 0x37, 0xeb, 0x24, 0xdf, 0xe2, 0x69, 0xfc, 0x80, 0x62, 0x39, 0x7b, 
0xe6, 0xf1, 0x74, 0x49, 0x75, 0x66, 0x15, 0x08, 0x48, 0x68, 0x82, 0xd7, 0xee, 0x94, 0x19, 0xad, 
0xa6, 0x20, 0x58, 0xcb, 0x21, 0x58, 0x7c, 0xa8, 0xaa, 0x26, 0xe6, 0x23, 0xaa, 0xe6, 0x09, 0x8a, 
0x69, 0x5d, 0x65, 0xe2, 0x17, 0x57, 0xc6, 0x21, 0x48, 0xd8, 0xad, 0x53, 0x09, 0x12, 0x35, 0xe4, 
0x2d, 0xcb, 0x3c, 0xda, 0x50, 0xd5, 0x3f, 0xc6, 0x77, 0x34, 0xad, 0x85, 0x67, 0x9b, 0x98, 0x5f, 
0x46, 0xa7, 0x84, 0xe0, 0xb2, 0x12, 0xd4, 0xb7, 0xed, 0xc7, 0xa7, 0x99, 0xac, 0x50, 0xb2, 0x9c, 
0x3b, 0x49, 0xe3, 0xae, 0x72, 0x8d, 0x48, 0x5d, 0xaa, 0x36, 0x12, 0xa3, 0x14, 0x7c, 0xce, 0x24, 
0x36, 0xb1, 0x55, 0x62, 0x66, 0x41, 0x43, 0xcb, 0x81, 0x0b, 0x0c, 0xc2, 0x5c, 0xb9, 0x62, 0x2e, 
0xf9, 0x2c, 0xa7, 0xf8, 0xe3, 0x62, 0x76, 0x72, 0x4b, 0xf5, 0xa4, 0x41, 0xcb, 0x1c, 0x69, 0xb4, 
0x89, 0x53, 0xde, 0x18, 0x17, 0x1b, 0xdc, 0xaf, 0x7e, 0x8f, 0xb0, 0x30, 0x9c, 0x70, 0x52, 0x49, 
0xd0, 0x3b, 0x07, 0x3e, 0x18, 0x02, 0x79, 0x5f, 0x9a, 0x0e, 0xb0, 0xd3, 0x08, 0x8f, 0xa8, 0x09, 
0x51, 0x36, 0x2a, 0x7f, 0x49, 0x59, 0xc2, 0xb9, 0x55, 0xa2, 0x86, 0xaf, 0x80, 0x7c, 0xf0, 0xae, 
0x11, 0x1a, 0x9a, 0x4b, 0x93, 0x94, 0x7b, 0x2a, 0x26, 0x5d, 0x19, 0xd8, 0x05, 0xc6, 0x17, 0xcf, 
0xde, 0xff, 0x7e, 0x35, 0x15, 0x3b, 0x84, 0x08, 0x05, 0x80, 0xb9, 0xd6, 0xef, 0xb4, 0x49, 0xc7, 
0x9f, 0xdf, 0x83, 0x38, 0x8c, 0x94, 0x2a, 0x85, 0x60, 0xd6, 0x8c, 0x0b, 0xa4, 0x45, 0xcc, 0xc9, 
0x55, 0x59, 0xce, 0xa9, 0x53, 0x49, 0x79, 0xb7, 0xec, 0x3e, 0xce, 0x23, 0x7c, 0x07, 0x22, 0xcf, 
0x6b, 0x50, 0x06, 0x60, 0xb7, 0x85, 0x93, 0x5d, 0xc9, 0xf3, 0x2c, 0x2d, 0xdc, 0x40, 0xc2, 0x12, 
0x5b, 0xf5, 0x15, 0x02, 0x79, 0x6a, 0x59, 0x67, 0x35, 0xf3, 0x4f, 0x0a, 0x20, 0xbd, 0x95, 0xd6, 
0x74, 0xaf, 0x17, 0x2c, 0x1f, 0xe9, 0xf3, 0x31, 0xbd, 0x02, 0xab, 0x87, 0x40, 0x39, 0xfb, 0xfc, 
0x63, 0xf1, 0x3d, 0x50, 0xc3, 0x25, 0xf3, 0xeb, 0x22, 0x4f, 0x31, 0x63, 0x42, 0xc0, 0xd6, 0xfc, 
0x4d, 0x40, 0x4b, 0x7d, 0x51, 0x72, 0x4e, 0x11, 0x4f, 0x14, 0x34, 0x41, 0xd9, 0xd9, 0x85, 0x9e, 
0x1f, 0x97, 0x8d, 0x39, 0x9f, 0x3d, 0xb1, 0xe4, 0x6f, 0x4a, 0xf0, 0xcf, 0xf5, 0xf9, 0x83, 0x8a, 
0x73, 0x0d, 0x57, 0x20, 0x95, 0x6f, 0x44, 0x5a, 0x17, 0x5c, 0xe0, 0x07, 0x67, 0x1b, 0x32, 0x63, 
0xed, 0x6b, 0x46, 0xe1, 0x9c, 0x84, 0xf3, 0x4d, 0xba, 0x3a, 0x8d, 0x1f, 0x11, 0xc1, 0xf1, 0x15, 
0x46, 0x69, 0x69, 0xf6, 0x22, 0x87, 0xc9, 0x0f, 0xf2, 0x4a, 0x33, 0x5f, 0xd3, 0x23, 0xc2, 0xeb, 
0x13, 0x94, 0xa5, 0xaf, 0x0e, 0xde, 0x68, 0x43, 0xb9, 0xe3, 0xc3, 0xba, 0x85, 0x46, 0xc1, 0xa7, 
0x32, 0x91, 0x09, 0x75, 0x43, 0x3e, 0x06, 0x2d, 0x7d, 0xd8, 0x36, 0x8f, 0x33, 0xb4, 0x43, 0x6d, 
0x18, 0x55, 0x18, 0xe5, 0x0a, 0x38, 0x7d, 0x0a, 0x60, 0x22, 0x86, 0x92, 0xeb, 0xae, 0xf4, 0xe3, 
0x30, 0xdf, 0xe6, 0x7d, 0x71, 0x7a, 0xeb, 0xe1, 0xec, 0x2e, 0xc7, 0xf4, 0x0a, 0xac, 0xbe, 0x7e, 
0xa2, 0xac, 0x15, 0x91, 0x3d, 0x8b, 0xef, 0xb9, 0xd9, 0x99, 0x03, 0x5b, 0x48, 0x2a, 0x00, 0xc9, 
0x4d, 0xf2, 0x3e, 0xad, 0x20, 0x19, 0x79, 0x27, 0x04, 0x09, 0x83, 0x05, 0x85, 0x0f, 0x80, 0x5c, 
0xf5, 0xf2, 0x47, 0xd7, 0xf9, 0xec, 0x61, 0xc1, 0xae, 0x78, 0xaa, 0xd9, 0x4c, 0xf8, 0x55, 0x28, 
0x3a, 0x65, 0xa2, 0x1a, 0xe3, 0x72, 0x36, 0x9d, 0x7d, 0xd8, 0xe4, 0xef, 0x7c, 0x36, 0xde, 0x10, 
0xbc, 0xa7, 0x3e, 0x27, 0x20, 0x59, 0xa1, 0x80, 0xf7, 0xd4, 0x23, 0x3d, 0x3b, 0x2d, 0xf1, 0x38, 
0xc8, 0x36, 0xec, 0xdb, 0x69, 0x11, 0x26, 0x23, 0xa9, 0x20, 0x52, 0x28, 0xcf, 0x08, 0x5e, 0xdb, 
0x68, 0xf9, 0x5c, 0x28, 0x00, 0x31, 0x4b, 0x90, 0xf4, 0xee, 0x60, 0x03, 0x5b, 0x52, 0xee, 0x66, 
0x71, 0x31, 0x67, 0xe5, 0xc3, 0x6c, 0x6d, 0x28, 0x0d, 0x85, 0xa7, 0x92, 0x5a, 0x5f, 0xab, 0x8d, 
0xdd, 0x79, 0xf6, 0x58, 0x12, 0x10, 0xa7, 0xf9, 0xbd, 0x43, 0x4a, 0x49, 0x7c, 0x2c, 0x65, 0x5a, 
0x30, 0x75, 0x1d, 0x3d, 0x00, 0xc6, 0x51, 0xb2, 0x02, 0x27, 0x11, 0xbb, 0xaf, 0xc5, 0x67, 0xdb, 
0xca, 0x55, 0xfd, 0xfa, 0xc0, 0x9c, 0xa0, 0x6a, 0xee, 0xdb, 0xf7, 0xd3, 0x71, 0x4f, 0x04, 0xec, 
0xcb, 0xdf, 0xac, 0xc9, 0x60, 0x58, 0x7d, 0xad, 0x02, 0x7a, 0xf2, 0x87, 0x43, 0x6d, 0x04, 0xf4, 
0x03, 0x0a, 0x43, 0xc4, 0x9e, 0x7b, 0xf4, 0xf4, 0x16, 0x0d, 0xa5, 0xb3, 0xd7, 0xe8, 0x48, 0x03, 
0xef, 0x6f, 0x00, 0x2f, 0xd2, 0x31, 0xbb, 0x79, 0x83, 0x01, 0xa7, 0x97, 0x62, 0x13, 0x1c, 0x3f, 
0x42, 0x92, 0x49, 0xb8, 0x34, 0x65, 0xb2, 0x7f, 0x46, 0x4d, 0xca, 0x94, 0xbc, 0x05, 0x8f, 0x08, 
0xd1, 0xc8, 0xcb, 0x5a, 0x4b, 0x5a, 0xbc, 0xd9, 0x7c, 0xa8, 0xd4, 0xb8, 0xdd, 0x66, 0x34, 0x50, 
0xdd, 0xa5, 0x86, 0x02, 0xc6, 0x5d, 0x61, 0xbd, 0xf5, 0xde, 0xb5, 0x88, 0x1d, 0x59, 0xdc, 0x7c, 
0xf4, 0xbd, 0x61, 0xd5, 0xdc, 0x37, 0xb4, 0x35, 0xd4, 0x28, 0x1a, 0x06, 0xbf, 0x21, 0x53, 0xf6, 
0x33, 0x8e, 0x47, 0x02, 0x1d, 0x5a, 0xc0, 0xd7, 0x31, 0xd2, 0xee, 0xbc, 0xbf, 0x31, 0x0b, 0x0f, 
0x6d, 0xb0, 0x61, 0xdd, 0x8a, 0x56, 0x9f, 0xbc, 0x88, 0xeb, 0xef, 0x4f, 0xdd, 0xa4, 0xf5, 0x71, 
0xb0, 0x8e, 0x12, 0x7b, 0xdb, 0xaf, 0xfb, 0x4e, 0xbf, 0x99, 0xec, 0xaf, 0x7d, 0xaa, 0x9d, 0x63, 
0xa0, 0xeb, 0xfe, 0xbe, 0x95, 0x61, 0xfb, 0x47, 0x63, 0x2b, 0xc1, 0x83, 0x65, 0xff, 0x7e, 0x52, 
0xbf, 0x5a, 0xd4, 0xee, 0xe0, 0xbe, 0xe8, 0xbf, 0xf3, 0x6f, 0xae, 0xc3, 0xd7, 0x89, 0xae, 0x5d, 
0x5c, 0x3d, 0x3e, 0x0a, 0xb0, 0xbf, 0x40, 0xf7, 0x21, 0x01, 0x7f, 0x6f, 0x60, 0x3e, 0xff, 0x90, 
0x70, 0xfd, 0x7a, 0x9a, 0x09, 0xa3, 0x6a, 0xdf, 0x4c, 0x7a, 0x40, 0xb5, 0xe9, 0x28, 0x7d, 0xe0, 
0x06, 0xd5, 0xcd, 0xbb, 0xff, 0x73, 0x54, 0x1c, 0x4e, 0xeb, 0xfb, 0x1f, 0xb8, 0x11, 0xd9, 0x71, 
0x28, 0xed, 0x5d, 0xa9, 0x59, 0xc2, 0x10, 0x59, 0xca, 0x43, 0xca, 0xd7, 0xd8, 0x49, 0xef, 0x88, 
0x37, 0x45, 0xf8, 0x40, 0x47, 0xdd, 0x4e, 0xe4, 0xa0, 0x3e, 0xd0, 0x43, 0xf4, 0x2e, 0xae, 0xb0, 
0x36, 0xe2, 0xbf, 0xe9, 0xde, 0x07, 0xbf, 0x40, 0x7c, 0xb2, 0xd3, 0x62, 0xda, 0x98, 0x9e, 0xfa, 
0xa5, 0xbf, 0xc5, 0xd4, 0x23, 0x03, 0xf6, 0x16, 0xd1, 0x9c, 0xb1, 0xdb, 0x89, 0x98, 0xc5, 0x28, 
0xfb, 0x18, 0xa3, 0x47, 0x7e, 0x50, 0x5c, 0xca, 0x92, 0xbd, 0x07, 0x67, 0x3e, 0x21, 0x7f, 0x7e, 
0x9b, 0x83, 0xb5, 0x40, 0xb0, 0x78, 0x89, 0x01, 0x41, 0xe6, 0xee, 0x62, 0x20, 0xfd, 0xc1, 0x8c, 
0xdf, 0x4d, 0x2f, 0x4b, 0xbe, 0x4d, 0x3f, 0x23, 0xf6, 0xc2, 0xd1, 0x8e, 0x15, 0xf0, 0x37, 0x45, 
0x37, 0x6f, 0x19, 0xd4, 0x18, 0xbb, 0x57, 0xa1, 0x85, 0x39, 0x3a, 0xc5, 0xe7, 0xb0, 0xe6, 0xd8, 
0xb9, 0x0a, 0x2e, 0x73, 0xb0, 0xf7, 0x3e, 0xb6, 0xfc, 0x59, 0xe0, 0x25, 0x48, 0x5c, 0x8a, 0xbc, 
0x51, 0xf0, 0x72, 0x32, 0x2b, 0x94, 0xfb, 0x51, 0x82, 0x19, 0xac, 0x51, 0xbf, 0xe3, 0xa3, 0x01, 
0x35, 0x3c, 0x3e, 0xda, 0x89, 0x8e, 0x6e, 0xef, 0x6e, 0xaf, 0xe3, 0x90, 0x70, 0x6e, 0x57, 0x6b, 
0xaf, 0xdb, 0x90, 0x70, 0x0d, 0x4f, 0xfe, 0x3a, 0x7b, 0xcc, 0x6e, 0x70, 0x1b, 0x9e, 0x48, 0x75, 
0xd7, 0x76, 0x28, 0x5c, 0x5e, 0x27, 0x70, 0xdc, 0xa6, 0xe2, 0xb6, 0x3d, 0x8e, 0xeb, 0x26, 0x6f, 
0x89, 0xe4, 0xb8, 0xd1, 0xed, 0x48, 0xd5, 0xeb, 0xcf, 0x69, 0x46, 0xbb, 0x85, 0x00, 0x65, 0x5b, 
0xef, 0xba, 0x20, 0x67, 0x35, 0x72, 0x59, 0x2d, 0x6d, 0xe5, 0x6f, 0x97, 0x3f, 0x5c, 0x48, 0xde, 
0x89, 0xcd, 0x81, 0xd0, 0x4b, 0x9b, 0x71, 0x18, 0xf6, 0x79, 0xca, 0xdd, 0xf7, 0xd9, 0xf6, 0x30, 
0x4f, 0xb4, 0x07, 0x7a, 0x8e, 0xbd, 0xd8, 0xdc, 0x75, 0xb6, 0x45, 0xc9, 0xdb, 0xd5, 0x16, 0x15, 
0xff, 0x20, 0x3b, 0xe8, 0x6f, 0x8b, 0xcb, 0x4d, 0xd4, 0xd9, 0x16, 0x25, 0x6f, 0x57, 0x5b, 0x54, 
0xfc, 0x83, 0xec, 0xa0, 0xbf, 0x2d, 0x78, 0xee, 0x9a, 0xe2, 0xf0, 0x01, 0x76, 0x36, 0x89, 0x02, 
0xd1, 0xd5, 0x32, 0x2a, 0xcc, 0x90, 0xdb, 0xea, 0x6f, 0xa7, 0x29, 0x20, 0x9f, 0x60, 0xdc, 0xd9, 
0x46, 0x02, 0x7b, 0x57, 0xfb, 0x88, 0x10, 0x43, 0x6d, 0xa5, 0xbf, 0x5d, 0x2e, 0xd0, 0xc3, 0x2a, 
0xeb, 0x61, 0x18, 0x91, 0xbf, 0xab, 0x65, 0x24, 0x8c, 0xc1, 0x76, 0x33, 0x40, 0xce, 0x0d, 0x08, 
0xec, 0x61, 0x1a, 0x81, 0xbd, 0x73, 0xe6, 0x15, 0x20, 0x86, 0xda, 0xca, 0x00, 0x76, 0xa9, 0x67, 
0xe0, 0x43, 0x0c, 0xbe, 0xcf, 0x40, 0x9a, 0xb1, 0xd7, 0x3b, 0x01, 0x99, 0xc5, 0x19, 0x24, 0xc9, 
0xfb, 0x83, 0x33, 0x5f, 0x58, 0x37, 0xcc, 0xc9, 0x10, 0x30, 0x37, 0x07, 0xde, 0x7b, 0x74, 0x03, 
0x57, 0x56, 0xa3, 0x99, 0x6d, 0x28, 0xd3, 0x89, 0x33, 0xea, 0xaf, 0x33, 0x98, 0xee, 0xa9, 0xbc, 
0x8f, 0xb0, 0x4b, 0xf0, 0x29, 0x7f, 0x9c, 0xc6, 0xde, 0x0b, 0xfe, 0x0d, 0x3a, 0xea, 0x68, 0xbd, 
0x7b, 0x63, 0xba, 0x5d, 0x82, 0xf4, 0x53, 0xb7, 0x0b, 0x2c, 0xd9, 0xaa, 0x2f, 0x20, 0x7b, 0x33, 
0x9f, 0xa0, 0x38, 0x64, 0x82, 0x97, 0xf8, 0x12, 0xa0, 0xb8, 0x43, 0xe1, 0x7c, 0x86, 0xa2, 0x68, 
0x7c, 0x7d, 0x6e, 0xf1, 0x59, 0xf3, 0x6e, 0x4b, 0x9e, 0xdb, 0xab, 0x49, 0x5b, 0x36, 0xc3, 0x46, 
0x9b, 0x99, 0x74, 0xcb, 0xba, 0x79, 0x16, 0x9f, 0x41, 0xc2, 0x62, 0xe9, 0xcd, 0x48, 0xdd, 0xbc, 
0xc3, 0x10, 0x25, 0xd3, 0x6b, 0x43, 0xe0, 0xb9, 0x4e, 0xe0, 0x1a, 0x3e, 0x42, 0x92, 0x1a, 0x64, 
0x99, 0xe9, 0x4c, 0xf0, 0xea, 0x45, 0x8b, 0xcf, 0x09, 0xd8, 0x2e, 0x02, 0x60, 0x99, 0x33, 0xab, 
0xd3, 0xe1, 0x73, 0xb0, 0x5e, 0x83, 0x71, 0xf8, 0xd7, 0x26, 0xe5, 0x7f, 0x4a, 0x81, 0xbf, 0x4a, 
0xcf, 0xbe, 0x79, 0x7a, 0x7e, 0x61, 0x58, 0xa9, 0xfd, 0x42, 0xa5, 0xc8, 0x57, 0x95, 0x11, 0x5d, 
0x7b, 0x78, 0xb9, 0x0f, 0x61, 0x6b, 0x9c, 0xcc, 0x72, 0x7e, 0x7e, 0x38, 0x93, 0xd5, 0x49, 0xb4, 
0x21, 0xb4, 0x7a, 0x65, 0xb1, 0x22, 0xf4, 0x87, 0xfa, 0xa8, 0xaf, 0xa1, 0xb5, 0xcb, 0x81, 0x68, 
0x7b, 0x34, 0x18, 0x96, 0x01, 0xc5, 0x96, 0x73, 0x1a, 0xd1, 0x7d, 0xb2, 0xd4, 0xc9, 0xc5, 0xe9, 
0x53, 0x02, 0xe2, 0xf0, 0xd5, 0x09, 0xca, 0x96, 0xf8, 0x0d, 0xfd, 0xef, 0x1c, 0x44, 0x9e, 0x9b, 
0x70, 0x5f, 0x14, 0x32, 0xf2, 0xeb, 0x03, 0x05, 0xba, 0xa1, 0x8f, 0xf6, 0xc3, 0x3e, 0xdc, 0x99, 
0xd6, 0x87, 0x3b, 0xd4, 0xfa, 0xcd, 0xce, 0xb4, 0x7e, 0xb3, 0x03, 0xad, 0x35, 0x64, 0x96, 0x4d, 
0x3a, 0xdc, 0x0c, 0x27, 0x17, 0x93, 0xfc, 0x7d, 0xef, 0x57, 0x47, 0xd5, 0xfe, 0x1d, 0x9b, 0x7f, 
0x75, 0xec, 0x07, 0xc3, 0x55, 0x72, 0xa9, 0xd3, 0x08, 0x74, 0x70, 0xe8, 0xa3, 0x4f, 0xd3, 0xae, 
0x0e, 0x0e, 0xfd, 0xd4, 0xb1, 0xe0, 0x0c, 0x83, 0x52, 0x69, 0xc3, 0x01, 0x1a, 0xf7, 0x64, 0xad, 
0x02, 0x14, 0x18, 0xfe, 0xcf, 0xed, 0x15, 0x8e, 0x4d, 0x2f, 0xe7, 0xf7, 0x81, 0xa4, 0x69, 0x93, 
0xfd, 0xdd, 0x95, 0x61, 0x41, 0xfb, 0x20, 0x4e, 0x51, 0xb6, 0x82, 0xa4, 0x80, 0x7b, 0x75, 0x4c, 
0xff, 0x39, 0x12, 0xb2, 0x31, 0x77, 0xa5, 0x6e, 0xcf, 0x82, 0x0c, 0xc0, 0x47, 0xc3, 0x03, 0xb7, 
0x38, 0x6f, 0x17, 0xe6, 0xf2, 0xe2, 0xfc, 0x88, 0xfd, 0x9d, 0x09, 0x9c, 0x42, 0x5e, 0x60, 0xa5, 
0xaf, 0x97, 0xf8, 0xd0, 0x23, 0x36, 0x8a, 0x9f, 0x8b, 0x3f, 0x49, 0x6a, 0x34, 0xb0, 0x06, 0x7d, 
0xd8, 0x13, 0xba, 0xf8, 0xa1, 0x46, 0x9f, 0xc2, 0xf2, 0xbb, 0xeb, 0x8b, 0x08, 0x85, 0xb0, 0xc5, 
0x85, 0xec, 0x08, 0x2c, 0x0a, 0x7c, 0xcc, 0x80, 0x43, 0x78, 0x4e, 0xb5, 0x5e, 0xdf, 0xdd, 0x80, 
0x68, 0x03, 0xd3, 0x33, 0x4c, 0xce, 0x10, 0x49, 0xab, 0xff, 0xb9, 0x8e, 0x05, 0xb0, 0x19, 0xa8, 
0x13, 0x00, 0xab, 0x2e, 0xcf, 0x61, 0x0c, 0x09, 0x0a, 0x9a, 0x4b, 0x4c, 0xe3, 0xbf, 0x36, 0x23, 
0x28, 0x28, 0x0d, 0xae, 0x22, 0xa8, 0xd3, 0x52, 0x8f, 0xce, 0xf2, 0xff, 0x0f, 0x50, 0x96, 0x35, 
0x1e, 

};
static void * func_ptrs[] = {
	TVP_Stub_0, TVP_Stub_1, TVP_Stub_2, TVP_Stub_3, 
	TVP_Stub_4, TVP_Stub_5, TVP_Stub_6, TVP_Stub_7, 
	TVP_Stub_8, TVP_Stub_9, TVP_Stub_10, TVP_Stub_11, 
	TVP_Stub_12, TVP_Stub_13, TVP_Stub_14, TVP_Stub_15, 
	TVP_Stub_16, TVP_Stub_17, TVP_Stub_18, TVP_Stub_19, 
	TVP_Stub_20, TVP_Stub_21, TVP_Stub_22, TVP_Stub_23, 
	TVP_Stub_24, TVP_Stub_25, TVP_Stub_26, TVP_Stub_27, 
	TVP_Stub_28, TVP_Stub_29, TVP_Stub_30, TVP_Stub_31, 
	TVP_Stub_32, TVP_Stub_33, TVP_Stub_34, TVP_Stub_35, 
	TVP_Stub_36, TVP_Stub_37, TVP_Stub_38, TVP_Stub_39, 
	TVP_Stub_40, TVP_Stub_41, TVP_Stub_42, TVP_Stub_43, 
	TVP_Stub_44, TVP_Stub_45, TVP_Stub_46, TVP_Stub_47, 
	TVP_Stub_48, TVP_Stub_49, TVP_Stub_50, TVP_Stub_51, 
	TVP_Stub_52, TVP_Stub_53, TVP_Stub_54, TVP_Stub_55, 
	TVP_Stub_56, TVP_Stub_57, TVP_Stub_58, TVP_Stub_59, 
	TVP_Stub_60, TVP_Stub_61, TVP_Stub_62, TVP_Stub_63, 
	TVP_Stub_64, TVP_Stub_65, TVP_Stub_66, TVP_Stub_67, 
	TVP_Stub_68, TVP_Stub_69, TVP_Stub_70, TVP_Stub_71, 
	TVP_Stub_72, TVP_Stub_73, TVP_Stub_74, TVP_Stub_75, 
	TVP_Stub_76, TVP_Stub_77, TVP_Stub_78, TVP_Stub_79, 
	TVP_Stub_80, TVP_Stub_81, TVP_Stub_82, TVP_Stub_83, 
	TVP_Stub_84, TVP_Stub_85, TVP_Stub_86, TVP_Stub_87, 
	TVP_Stub_88, TVP_Stub_89, TVP_Stub_90, TVP_Stub_91, 
	TVP_Stub_92, TVP_Stub_93, TVP_Stub_94, TVP_Stub_95, 
	TVP_Stub_96, TVP_Stub_97, TVP_Stub_98, TVP_Stub_99, 
	TVP_Stub_100, TVP_Stub_101, TVP_Stub_102, TVP_Stub_103, 
	TVP_Stub_104, TVP_Stub_105, TVP_Stub_106, TVP_Stub_107, 
	TVP_Stub_108, TVP_Stub_109, TVP_Stub_110, TVP_Stub_111, 
	TVP_Stub_112, TVP_Stub_113, TVP_Stub_114, TVP_Stub_115, 
	TVP_Stub_116, TVP_Stub_117, TVP_Stub_118, TVP_Stub_119, 
	TVP_Stub_120, TVP_Stub_121, TVP_Stub_122, TVP_Stub_123, 
	TVP_Stub_124, TVP_Stub_125, TVP_Stub_126, TVP_Stub_127, 
	TVP_Stub_128, TVP_Stub_129, TVP_Stub_130, TVP_Stub_131, 
	TVP_Stub_132, TVP_Stub_133, TVP_Stub_134, TVP_Stub_135, 
	TVP_Stub_136, TVP_Stub_137, TVP_Stub_138, TVP_Stub_139, 
	TVP_Stub_140, TVP_Stub_141, TVP_Stub_142, TVP_Stub_143, 
	TVP_Stub_144, TVP_Stub_145, TVP_Stub_146, TVP_Stub_147, 
	TVP_Stub_148, TVP_Stub_149, TVP_Stub_150, TVP_Stub_151, 
	TVP_Stub_152, TVP_Stub_153, TVP_Stub_154, TVP_Stub_155, 
	TVP_Stub_156, TVP_Stub_157, TVP_Stub_158, TVP_Stub_159, 
	TVP_Stub_160, TVP_Stub_161, TVP_Stub_162, TVP_Stub_163, 
	TVP_Stub_164, TVP_Stub_165, TVP_Stub_166, TVP_Stub_167, 
	TVP_Stub_168, TVP_Stub_169, TVP_Stub_170, TVP_Stub_171, 
	TVP_Stub_172, TVP_Stub_173, TVP_Stub_174, TVP_Stub_175, 
	TVP_Stub_176, TVP_Stub_177, TVP_Stub_178, TVP_Stub_179, 
	TVP_Stub_180, TVP_Stub_181, TVP_Stub_182, TVP_Stub_183, 
	TVP_Stub_184, TVP_Stub_185, TVP_Stub_186, TVP_Stub_187, 
	TVP_Stub_188, TVP_Stub_189, TVP_Stub_190, TVP_Stub_191, 
	TVP_Stub_192, TVP_Stub_193, TVP_Stub_194, TVP_Stub_195, 
	TVP_Stub_196, TVP_Stub_197, TVP_Stub_198, TVP_Stub_199, 
	TVP_Stub_200, TVP_Stub_201, TVP_Stub_202, TVP_Stub_203, 
	TVP_Stub_204, TVP_Stub_205, TVP_Stub_206, TVP_Stub_207, 
	TVP_Stub_208, TVP_Stub_209, TVP_Stub_210, TVP_Stub_211, 
	TVP_Stub_212, TVP_Stub_213, TVP_Stub_214, TVP_Stub_215, 
	TVP_Stub_216, TVP_Stub_217, TVP_Stub_218, TVP_Stub_219, 
	TVP_Stub_220, TVP_Stub_221, TVP_Stub_222, TVP_Stub_223, 
	TVP_Stub_224, TVP_Stub_225, TVP_Stub_226, TVP_Stub_227, 
	TVP_Stub_228, TVP_Stub_229, TVP_Stub_230, TVP_Stub_231, 
	TVP_Stub_232, TVP_Stub_233, TVP_Stub_234, TVP_Stub_235, 
	TVP_Stub_236, TVP_Stub_237, TVP_Stub_238, TVP_Stub_239, 
	TVP_Stub_240, TVP_Stub_241, TVP_Stub_242, TVP_Stub_243, 
	TVP_Stub_244, TVP_Stub_245, TVP_Stub_246, TVP_Stub_247, 
	TVP_Stub_248, TVP_Stub_249, TVP_Stub_250, TVP_Stub_251, 
	TVP_Stub_252, TVP_Stub_253, TVP_Stub_254, TVP_Stub_255, 
	TVP_Stub_256, TVP_Stub_257, TVP_Stub_258, TVP_Stub_259, 
	TVP_Stub_260, TVP_Stub_261, TVP_Stub_262, TVP_Stub_263, 
	TVP_Stub_264, TVP_Stub_265, TVP_Stub_266, TVP_Stub_267, 
	TVP_Stub_268, TVP_Stub_269, TVP_Stub_270, TVP_Stub_271, 
	TVP_Stub_272, TVP_Stub_273, TVP_Stub_274, TVP_Stub_275, 
	TVP_Stub_276, TVP_Stub_277, TVP_Stub_278, TVP_Stub_279, 
	TVP_Stub_280, TVP_Stub_281, TVP_Stub_282, TVP_Stub_283, 
	TVP_Stub_284, TVP_Stub_285, TVP_Stub_286, TVP_Stub_287, 
	TVP_Stub_288, TVP_Stub_289, TVP_Stub_290, TVP_Stub_291, 
	TVP_Stub_292, TVP_Stub_293, TVP_Stub_294, TVP_Stub_295, 
	TVP_Stub_296, TVP_Stub_297, TVP_Stub_298, TVP_Stub_299, 
	TVP_Stub_300, TVP_Stub_301, TVP_Stub_302, TVP_Stub_303, 
	TVP_Stub_304, TVP_Stub_305, TVP_Stub_306, TVP_Stub_307, 
	TVP_Stub_308, TVP_Stub_309, TVP_Stub_310, TVP_Stub_311, 
	TVP_Stub_312, TVP_Stub_313, TVP_Stub_314, TVP_Stub_315, 
	TVP_Stub_316, TVP_Stub_317, TVP_Stub_318, TVP_Stub_319, 
	TVP_Stub_320, TVP_Stub_321, TVP_Stub_322, TVP_Stub_323, 
	TVP_Stub_324, TVP_Stub_325, TVP_Stub_326, TVP_Stub_327, 
	TVP_Stub_328, TVP_Stub_329, TVP_Stub_330, TVP_Stub_331, 
	TVP_Stub_332, TVP_Stub_333, TVP_Stub_334, TVP_Stub_335, 
	TVP_Stub_336, TVP_Stub_337, TVP_Stub_338, TVP_Stub_339, 
	TVP_Stub_340, TVP_Stub_341, TVP_Stub_342, TVP_Stub_343, 
	TVP_Stub_344, TVP_Stub_345, TVP_Stub_346, TVP_Stub_347, 
	TVP_Stub_348, TVP_Stub_349, TVP_Stub_350, TVP_Stub_351, 
	TVP_Stub_352, TVP_Stub_353, TVP_Stub_354, TVP_Stub_355, 
	TVP_Stub_356, TVP_Stub_357, TVP_Stub_358, TVP_Stub_359, 
	TVP_Stub_360, TVP_Stub_361, TVP_Stub_362, TVP_Stub_363, 
	TVP_Stub_364, TVP_Stub_365, TVP_Stub_366, TVP_Stub_367, 
	TVP_Stub_368, TVP_Stub_369, TVP_Stub_370, TVP_Stub_371, 
	TVP_Stub_372, TVP_Stub_373, TVP_Stub_374, TVP_Stub_375, 
	TVP_Stub_376, TVP_Stub_377, TVP_Stub_378, TVP_Stub_379, 
	TVP_Stub_380, TVP_Stub_381, TVP_Stub_382, TVP_Stub_383, 
	TVP_Stub_384, TVP_Stub_385, TVP_Stub_386, TVP_Stub_387, 
	TVP_Stub_388, TVP_Stub_389, TVP_Stub_390, TVP_Stub_391, 
	TVP_Stub_392, TVP_Stub_393, TVP_Stub_394, TVP_Stub_395, 
	TVP_Stub_396, TVP_Stub_397, TVP_Stub_398, TVP_Stub_399, 
	TVP_Stub_400, TVP_Stub_401, TVP_Stub_402, TVP_Stub_403, 
	TVP_Stub_404, TVP_Stub_405, TVP_Stub_406, TVP_Stub_407, 
	TVP_Stub_408, TVP_Stub_409, TVP_Stub_410, TVP_Stub_411, 
	TVP_Stub_412, TVP_Stub_413, TVP_Stub_414, TVP_Stub_415, 
	TVP_Stub_416, TVP_Stub_417, TVP_Stub_418, TVP_Stub_419, 
	TVP_Stub_420, TVP_Stub_421, TVP_Stub_422, TVP_Stub_423, 
	TVP_Stub_424, TVP_Stub_425, TVP_Stub_426, TVP_Stub_427, 
	TVP_Stub_428, TVP_Stub_429, TVP_Stub_430, TVP_Stub_431, 
	TVP_Stub_432, TVP_Stub_433, TVP_Stub_434, TVP_Stub_435, 
	TVP_Stub_436, TVP_Stub_437, TVP_Stub_438, TVP_Stub_439, 
	TVP_Stub_440, TVP_Stub_441, TVP_Stub_442, TVP_Stub_443, 
	TVP_Stub_444, TVP_Stub_445, TVP_Stub_446, TVP_Stub_447, 
	TVP_Stub_448, TVP_Stub_449, TVP_Stub_450, TVP_Stub_451, 
	TVP_Stub_452, TVP_Stub_453, TVP_Stub_454, TVP_Stub_455, 
	TVP_Stub_456, TVP_Stub_457, TVP_Stub_458, TVP_Stub_459, 
	TVP_Stub_460, TVP_Stub_461, TVP_Stub_462, TVP_Stub_463, 
	TVP_Stub_464, TVP_Stub_465, TVP_Stub_466, TVP_Stub_467, 
	TVP_Stub_468, TVP_Stub_469, TVP_Stub_470, TVP_Stub_471, 
	TVP_Stub_472, TVP_Stub_473, TVP_Stub_474, TVP_Stub_475, 
	TVP_Stub_476, TVP_Stub_477, TVP_Stub_478, TVP_Stub_479, 
	TVP_Stub_480, TVP_Stub_481, TVP_Stub_482, TVP_Stub_483, 
	TVP_Stub_484, TVP_Stub_485, TVP_Stub_486, TVP_Stub_487, 
	TVP_Stub_488, TVP_Stub_489, TVP_Stub_490, TVP_Stub_491, 
	TVP_Stub_492, TVP_Stub_493, TVP_Stub_494, TVP_Stub_495, 
	TVP_Stub_496, TVP_Stub_497, TVP_Stub_498, TVP_Stub_499, 
	TVP_Stub_500, TVP_Stub_501, TVP_Stub_502, TVP_Stub_503, 
	TVP_Stub_504, TVP_Stub_505, TVP_Stub_506, TVP_Stub_507, 

};


void TVPExportFunctions()
{
	const unsigned long compressed_size = 4001;
	const unsigned long decompressed_size = 31429;
	const tjs_int function_count = 508;
	unsigned char * dest = new unsigned char [decompressed_size];

	try
	{
		unsigned long dest_size = decompressed_size;

		int result = uncompress(dest, &dest_size,
			(unsigned char*)compressed_functable, compressed_size);
		if(result != Z_OK || dest_size != decompressed_size) { TVPThrowInternalError; }

		const unsigned char *p = dest;

		for(tjs_int i = 0; i < function_count; i++)
		{
			TVPAddExportFunction((const char *)p, ((void **)func_ptrs)[i]);
			while(*p) p++;
			p++;
		}
	}
	catch(...)
	{
		delete [] dest;
		throw;
	}
	delete [] dest;
}

if (typeof Scripts.execSQ == "undefined") {
	Plugins.link("squirrel.dll");
}

if (typeof Array.save2 == "undefined") {
	Plugins.link("savestruct.dll");
}

function 





// squirrel 側エンジンの初期化
Scripts.execStorageSQ("init.nut");




KAGLoadScript('SceneParser.tjs');
KAGLoadScript('SceneListParser.tjs');
KAGLoadScript('VoiceListParser.tjs');

/**
 * シーン情報変換処理
 */
class SceneConverter extends KAGPlugin {

	/**
	 * コンストラクタ
	 */
	function SceneConverter() {
		getSceneInfos();
		getVoiceInfos();
		sceneParser = new SceneParser();
	}

	/**
	 * ファイナライザ
	 */
	function finalize() {
		invalidate voiceInfos;
		invalidate sceneInfos;
		invalidate sceneNames;
	}

	// ---------------------------------------------------
	// シーン情報処理
	// ---------------------------------------------------

	var sceneNames; // シーン名前情報
	var sceneInfos; // シーン情報

	/**
	 * シーン情報の読み込み
	 */
	function getSceneInfos() {
		var parser = new SceneListParser();
		try {
			parser.parseStorage("scenes.csv");
			sceneNames = parser.sceneNames;
			sceneInfos = parser.sceneInfos;
		} catch (e) {
			dm(e.message);
			sceneNames = [];
			sceneInfos = %[];
		}
		invalidate parser;
	}

	// ---------------------------------------------------
	// ボイス情報処理
	// ---------------------------------------------------

	var voiceInfos; // ボイス再生用情報

	/**
	 * シーン情報の読み込み
	 */
	function getVoiceInfos() {
		var parser = new VoiceListParser();
		try {
			parser.parseStorage("voices.csv");
			voiceInfos = parser.voiceInfos;
		} catch (e) {
			dm(e.message);
			voiceInfos = %[];
		}
		invalidate parser;
	}
	
	// ---------------------------------------------------
	// 共通処理
	// ---------------------------------------------------
	
	function dm(msg) {
		if (kag.debugLevel >= tkdlSimple) {
			global.dm(msg);
        }
	}

	// --------------------------------------------------------
	// シーンコンバート処理
	// --------------------------------------------------------

	var sceneParser     = new SceneParser(); // パーサ

	/**
	 * シーンファイルを変換してデータとして取得する
	 * @param name シーン名
	 */
	function getScene(name) {
		var info = sceneInfos[name];
		var voiceBase;
		if (info !== void) {
			voiceBase = info.voiceBase;
		}
		// パース実行
		var ret = sceneParser.parse(name, voiceInfos, voiceBase);
		// エラー情報表示
		var errors = sceneParser.errors;
		for (var i=0;i<errors.count;i++) {
			error(errors[i]);
		}
		return ret;
	}

	// -----------------------------------------------------------
	
	/**
	 * 該当シナリオのコンバートと保存
	 * @param sceneName シーン名
	 * @param path 出力先
	 * 出力先の nut ファイルが古い場合のみ処理する
	 */
	function convert(sceneName, path) {
		if (path.length > 0 && path[path.length - 1] != '/') {
			path += "/";
		}

	}
	
	/**
	 * 全シーンコンバート処理の実行
	 * @path 格納先パス
	 */
	function convertAll(path = "") {
		System.inform("コンバート処理を実行します。コンバート実行中は処理が固まるのでご注意ください");
		var list = [ "[SCENE_ID]" ];
		for (var i=0;i<sceneNames.count;i++) {
			var name = path + "SCENE/" + Storages.chopStorageExt(sceneNames[i]) + ".nut";
			list.add("SCENE\\" + Storages.chopStorageExt(sceneNames[i]) + ".nut");
			Scripts.saveSQ(name, getScene(sceneNames[i]));
		}
		list.add("[END]");
		list.save2(path + "SCENE_ID.LST");
		System.inform("コンバート処理が終了しました");
	}

	// --------------------------------------------------------------
	// KAG 用コマンド拡張インターフェース
	// --------------------------------------------------------------

	// シーンパーサの初期化
	function sceneinit(elm) {
		sceneParser.clear();
		return 0;
	}

	// シーン用マクロの読み込み
	function scenemacro(elm) {
		sceneParser.parseMacro(elm.storage);
		return 0;
	}

	// シーン用オプション指定
	function sceneopt(elm) {
		sceneParser.setOption(elm);
		return 0;
	}
};

kag.addPlugin(kag.sceneConv = new SceneConverter());
kag.tagHandlers["sceneinit"]  = kag.sceneConv.sceneinit;
kag.tagHandlers["sceneopt"]   = kag.sceneConv.sceneopt;
kag.tagHandlers["scenemacro"] = kag.sceneConv.scenemacro;

// --------------------------------------------------------------
	
kag.sceneTick  = 0; // シーン再生処理用 tick
kag.sceneStart = new SQFunction("start");
kag.sceneMain  = new SQFunction("main");

kag.tagHandlers["scenestart"] = function(elm) {
	sceneTick = System.getTickCount();
	sceneStart.call(elm.storage);
	return 0;
} incontextof kag;

kag.tagHandlers["scenemain"]  = function(elm) {
	var now = System.getTickCount();
	var diff = now - sceneTick;
	sceneTick = now;
	var status = sceneMain.call(diff);
	switch (status) {
	case 1: // RUN
		return -5;
	case 2: // WAIT
		return -3;
	}
	// STOP
	return 0;
} incontextof kag;

property sceneExecDialog { getter() { KAGLoadScript("SceneExecDialog.tjs"); return global.sceneExecDialog; } };

// デバッグメニューに登録
if (kag.debugMenu !== void && kag.debugMenu.visible) {
	kag.debugMenu.insert(new MenuItem(this, "-"), 0);
	kag.debugMenu.insert(kag.loadSceneMenuItem = new KAGMenuItem(this, "パラメータの変換", 1,
																 function() {
																	 kag.scenePlayer.convertParam("../../PSVersion/DataMake/");
																 }), 0);
	kag.debugMenu.insert(kag.loadSceneMenuItem = new KAGMenuItem(this, "シーンの変換", 1,
																 function() {
																	 kag.scenePlayer.convert("../../PSVersion/DataMake/");
																 }), 0);
	kag.debugMenu.insert(kag.loadSceneMenuItem = new KAGMenuItem(this, "シーンの読込み(&L)", 1,
																 function() {sceneExecDialog();}), 0);
}

if (kag.debugLevel >= tkdlSimple) {
	dm("ワールド環境設定完了");
}

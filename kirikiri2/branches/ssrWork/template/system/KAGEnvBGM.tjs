/**
 * 環境BGMオブジェクト
 */
class KAGEnvBgm extends KAGEnvObject {
	
	var storage;
	
	var play;
	var stop;
	var pause;
	var resume;
	var fade;
    var wait;
    var waitFade;

    /**
     * セーブ処理
     */
    function onStore(f) {
		f.storage  = storage;
		if (play !== void) {
			f.play = %[];
			(Dictionary.assign incontextof f.play)(play, false);
		}
		if (stop !== void) {
			f.stop  = stop;
		}
		if (pause !== void) {
			f.pause  = pause;
		}
		if (resume !== void) {
			f.resume  = resume;
		}
		if (fade !== void) {
			f.fade = %[];
			(Dictionary.assign incontextof f.fade)(fade, false);
		}
	}

	function onRestore(f) {
		if (f !== void) {
			storage = f.storage;
			if (f.play !== void) {
				play = f.play;
			}
			if (f.stop !== void) {
				stop = f.stop;
			}
			if (f.pause !== void) {
				pause = f.pause;
			}
			if (f.resume !== void) {
				resume = f.resume;
			}
			if (f.fade !== void) {
				f.fade = %[];
			}
		}
	}
	
    /**
     * コンストラクタ
     */
    function KAGEnvBgm(env) {
		super.KAGEnvObject(env, "bgm");
    }

    /**
     * 再生処理
     * @param param 再生対象ファイル
     */
    function setPlay(param, elm) {
        if (param !== void) {
			stop = void;
			pause = void;
			resume = void;
			play = %[];
			(Dictionary.assign incontextof play)(elm, false);
			play.storage = storage = param;
			if (play.fade === void && play.time === void) {
				fade = %[];
				fade.volume = 100;
			}
			env.setBGMFlag(param);
        }
    }

    /**
     * 停止処理
     * @param param フェードアウト時間
     */
    function setStop(param, elm) {
		play = void;
		fade = void;
		pause = void;
		resume = void;
		storage = void;
		var time;
		if (elm !== void && elm.time !== void) {
			time = +elm.time;
		} else {
			time = +param;
		}
		stop = time;
    }

    /**
     * ポーズ処理
     * @param param フェードアウト時間
     */
	function setPause(param, elm) {
		if (storage !== void) {
			resume = void;
			pause = +param;
		}
    }

    /**
	 * 再開
	 */
	function setResume(param, elm) {
		if (storage !== void) {
			pause = void;
			resume = true;
		}
    }

    /**
     * 音量フェード
     * @param param フェード時間
     */
	function setFade(param, elm) {
		fade = %[];
		fade.volume = param;
		fade.time   = elm.time;
    }

    /**
     * 終了まち
     * @param param フェード時間
     */
    function setWait(param, elm) {
        wait = %[];
        (Dictionary.assign incontextof wait)(elm, false);
        if (wait.canskip === void) {
            wait.canskip = true;
        }
    }

    /**
     * 終了まち
     * @param param フェード時間
     */
    function setWaitFade(param, elm) {
        waitFade = %[];
        (Dictionary.assign incontextof waitFade)(elm, false);
        if (waitFade.canskip === void) {
            waitFade.canskip = true;
        }
    }

    var bgmcommands = %[
    tagname : null, 
	storage : setPlay incontextof this,
    play : setPlay incontextof this,
    stop : setStop incontextof this,
    pause : setPause incontextof this,
	resume : setResume incontextof this,
    fade : setFade incontextof this,
    wait : setWait incontextof this,
    waitfade : setWaitFade incontextof this,
    noxchg : null,
    loop : null,
    time : null,
    start : null,
    paused : null,
    intime : null,
    outtime : null,
    overlap : null,
    canskip : null,
        ];

    var doflag;
    
    /**
     * コマンドの実行
     * @param cmd コマンド
     * @param param パラメータ
     * @param elm 他のコマンドも含む全パラメータ
     * @return 実行が行われた場合 true
     */
    function doCommand(cmd, param, elm) {
        var func;
        if ((func = bgmcommands[cmd]) !== void) {
            if (func != null) {
                func(param, elm);
                doflag = true;
            }
            return true;
        }
        // 再生コマンドとみなす
		setPlay(cmd, elm);
        doflag = true;
        return true;
    }

    /**
     * KAG タグ処理
     * @param elm 引数
     */
    function tagfunc(elm) {
        //dm("BGM 用ファンクション呼び出し!");
        doflag = false;
        wait = void;
        waitFade = void;
        foreach(elm, doCommand);
        // 何もしなかった場合、かつ、タグ名が bgm でなければそれを再生する
        if (!doflag && elm.tagname != "bgm") {
			setPlay(elm.tagname, elm);
        }
		sync();
		if (waitFade !== void) {
			return env.waitBGMFade(waitFade);
		} else  if (wait !== void) {
			return env.waitBGMStop(wait);
		}
        return 0;
    }

	function sync() {
		if (!isJump()) {
			if (fade !== void) {
				env.setBGMFade(fade);
				fade = void;
			}
			if (play !== void) {
				env.playBGM(isSkip() ? 0 : +play.time, play);
				play = void;
			}
			if (pause !== void) {
				env.pauseBGM(pause);
				pause = void;
			} else if (resume !== void) {
				env.resumeBGM();
				resume = void;
			}
		}
		if (stop !== void) {
			env.stopBGM(isSkip() ? 0 : +stop);
			stop = void;
		}
	}
};

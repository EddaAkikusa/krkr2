class TestApp extends Window
{
  var rootLayer;
  var testLayer;
  var blackLayer;
  var whiteLayer;
  var timer;
  var result = [];
  var benchWidth, benchHeight;

  function TestApp {
    super.Window();

    caption = "multi thread test app";
    borderStyle = bsSingle;
    setInnerSize(641, 641);
    setPos(100, 100);

    rootLayer = new Layer(this, null);
    rootLayer.setSize(innerWidth, innerHeight);
    rootLayer.hasImage = false;
    rootLayer.visible = true;

    testLayer = new Layer(this, rootLayer);
    testLayer.setSize(innerWidth, innerHeight);
    testLayer.visible = true;

    blackLayer = new Layer(this, rootLayer);
    blackLayer.setSize(innerWidth, innerHeight);
    blackLayer.fillRect(0, 0, innerWidth, innerHeight, 0xFF000000);

    whiteLayer = new Layer(this, rootLayer);
    whiteLayer.setSize(innerWidth, innerHeight);
    whiteLayer.fillRect(0, 0, innerWidth, innerHeight, 0xFFFFFFFF);

    add(rootLayer);

    visible = true;

    result.add('method, thread num, pixel num, time(msec)');

    timer = new Timer(this, "bench");
    timer.interval = 1000;
    timer.enabled = true;
  }

  function bench {
    timer.enabled = false;

    combinationBench(BltBench);
    combinationBench(CopyRectBench);
    combinationBench(FillBench);
    combinationBench(FillColorBench);
    combinationBench(BlendColorBench);
    combinationBench(RemoveConstOpacityBench);
    combinationBench(FillMaskBench);

    result.save(System.exePath + "result.csv");

    System.exit();
  }

  function combinationBench(func) {
    benchWidth = 640;
    for (benchHeight = 20; benchHeight <= 640; benchHeight *= 2)
      for (var i = 1; i <= 8; i++) {
        System.drawThreadNum = i;
        func();
      }
  }

  function BltBench {
    caption = "testing Blt %dx%d pixel %d threads.".sprintf(benchWidth, benchHeight, System.drawThreadNum);
    var beginTick = System.getTickCount();
    for (var i = 0; i < 1000; i++) {
      testLayer.operateRect(0, 0, blackLayer, 0, 0, benchWidth, benchHeight);
      testLayer.operateRect(0, 0, whiteLayer, 0, 0, benchWidth, benchHeight);
    }
    var diffTick = System.getTickCount() - beginTick;
    result.add('Blt, %d, %d, %d'.sprintf(System.drawThreadNum, benchWidth * benchHeight, diffTick));
  }

  function CopyRectBench {
    caption = "testing CopyRect %dx%d pixel %d threads.".sprintf(benchWidth, benchHeight, System.drawThreadNum);
    var beginTick = System.getTickCount();
    for (var i = 0; i < 1000; i++) {
      testLayer.copyRect(0, 0, blackLayer, 0, 0, benchWidth, benchHeight);
      testLayer.copyRect(0, 0, whiteLayer, 0, 0, benchWidth, benchHeight);
    }
    var diffTick = System.getTickCount() - beginTick;
    result.add('CopyRect, %d, %d, %d'.sprintf(System.drawThreadNum, benchWidth * benchHeight, diffTick));
  }

  function FillBench {
    caption = "testing Fill %dx%d pixel %d threads.".sprintf(benchWidth, benchHeight, System.drawThreadNum);
    var beginTick = System.getTickCount();
    for (var i = 0; i < 1000; i++) {
      testLayer.fillRect(0, 0, benchWidth, benchHeight, 0xFF000000);
      testLayer.fillRect(0, 0, benchWidth, benchHeight, 0xFFFFFFFF);
    }
    var diffTick = System.getTickCount() - beginTick;
    result.add('Fill, %d, %d, %d'.sprintf(System.drawThreadNum, benchWidth * benchHeight, diffTick));
  }

  function FillColorBench {
    caption = "testing FillColor %dx%d pixel %d threads.".sprintf(benchWidth, benchHeight, System.drawThreadNum);
    var beginTick = System.getTickCount();
    testLayer.face = dfOpaque;
    testLayer.holdAlpha = true;
    for (var i = 0; i < 1000; i++) {
      testLayer.fillRect(0, 0, benchWidth, benchHeight, 0xFF000000);
      testLayer.fillRect(0, 0, benchWidth, benchHeight, 0xFFFFFFFF);
    }
    testLayer.face = dfAlpha;
    testLayer.holdAlpha = false;
    var diffTick = System.getTickCount() - beginTick;
    result.add('FillColor, %d, %d, %d'.sprintf(System.drawThreadNum, benchWidth * benchHeight, diffTick));
  }

  function BlendColorBench {
    caption = "testing BlendColor %dx%d pixel %d threads.".sprintf(benchWidth, benchHeight, System.drawThreadNum);
    var beginTick = System.getTickCount();
    for (var i = 0; i < 1000; i++) {
      testLayer.colorRect(0, 0, benchWidth, benchHeight, 0xFF000000, 255);
      testLayer.colorRect(0, 0, benchWidth, benchHeight, 0xFFFFFFFF, 255);
    }
    var diffTick = System.getTickCount() - beginTick;
    result.add('BlendColor, %d, %d, %d'.sprintf(System.drawThreadNum, benchWidth * benchHeight, diffTick));
  }

  function RemoveConstOpacityBench {
    caption = "testing RemoveConstOpacity %dx%d pixel %d threads.".sprintf(benchWidth, benchHeight, System.drawThreadNum);
    var beginTick = System.getTickCount();
    for (var i = 0; i < 1000; i++) {
      testLayer.colorRect(0, 0, benchWidth, benchHeight, 0xFF000000, -255);
      testLayer.colorRect(0, 0, benchWidth, benchHeight, 0xFFFFFFFF, -255);
    }
    var diffTick = System.getTickCount() - beginTick;
    result.add('RemoveConstOpacity, %d, %d, %d'.sprintf(System.drawThreadNum, benchWidth * benchHeight, diffTick));
  }

  function FillMaskBench {
    caption = "testing FillMask %dx%d pixel %d threads.".sprintf(benchWidth, benchHeight, System.drawThreadNum);
    var beginTick = System.getTickCount();
    testLayer.face = dfMask;
    for (var i = 0; i < 1000; i++) {
      testLayer.colorRect(0, 0, benchWidth, benchHeight, 0, 255);
      testLayer.colorRect(0, 0, benchWidth, benchHeight, 255, 255);
    }
    testLayer.face = dfAlpha;
    var diffTick = System.getTickCount() - beginTick;
    result.add('FillMask, %d, %d, %d'.sprintf(System.drawThreadNum, benchWidth * benchHeight, diffTick));
  }
};

global.app = new TestApp();


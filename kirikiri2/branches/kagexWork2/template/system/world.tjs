KAGLoadScript('YAML.tjs');

/**
 * ワールド拡張
 * ◇フック一覧
 * グローバルに以下のメソッドがあった場合はフックとして呼び出します
 * setTimeHook(time, elm)     時間変更時フック
 * setStageHook(stage, elm)   ステージ変更時フック
 */

/**
 * 空の辞書
 */
var EMPTY = %[];

/**
 * 鍵の内容を表示する
 * @param name 名称
 * @param dict 辞書オブジェクト
 */
function showKeys(name, dict) {
    if (kag.debugLevel >= tkdlVerbose) {
        name += ":";
        if (dict) {
            var array = [];
            array.assign(dict);
            for (var i=0; i<array.count; i+= 2) {
                if (i != 0) {
                    name += ",";
                }
                name += (array[i] + ":" + array[i+1]);
            }
            dm(name);
        }
    }
}

/*
 * 分割パラメータの前側を取得
 * @param value パラメータ
 */
function getTo(value)
{
	if (typeof value == "String") {
		var p;
		if ((p = value.indexOf(":")) > 0) {
			return value.substring(0, p);
		} else  if (p == 0) {
			return void;
		} else  {
			return value;
		}
	} else {
		return value === void ? value : +value;
	}
}

/*
 * 分割パラメータの後側を取得
 * @param value パラメータ
 */
function getFrom(value) {
	if (typeof value == "String") {
		var p;
		if ((p = value.indexOf(":")) >= 0) {
			return value.substring(p+1);
		} else {
			return void;
		}
	}
	return void;
}

/**
 * 相対位置指定の判定。
 * 指定値が "%" で終わっていたら最大値への相対での指定とみなす
 * 指定値が "@" ではじまっていたら現在値への相対の指定とみなす
 * @param base  現在値
 * @param value 指定値
 * @param valueBase 指定の最大値
 */
function calcRelative(base, value, valueBase) {
    if (value === void) {
        return value;
    } else {
        if (typeof value == "String") {
            // 相対指定の場合
            if (value.charAt(0) == '@') {
                value = value.substring(1);
                // %指定の場合
                if (valueBase !== void && value.charAt(-1) == '%') {
                    value = valueBase * (int)value.substring(0,value.length - 1) / 100;
                }
                return (int)base + (int)value;
            } else {
                // %指定の場合
                if (valueBase !== void && value.charAt(-1) == '%') {
                    value = valueBase * (int)value.substring(0,value.length - 1) / 100;
                }
            }
        }
        return (int)value;
    }
}

var transitionName = %[
    "universal" => true,
    "crossfade" => true,
    "scroll" => true,
    "wave" => true,
    "mosaic" => true,
    "turn" => true,
    "rotatezoom" => true,
    "rotatevanish" => true,
    "rotateswap" => true,
    "ripple" => true,
    ];

var transitionParam = %[
    "time" => true,
    "rule" => true,
    "vague" => true,
    "from" => true,
    "stay" => true,
    "wavetype" => true,
    "maxh" => true,
    "maxomega" => true,
    "bgcolor1" => true,
    "bgcolor2" => true,
    "mosaic" => true,
    "maxsize" => true,
    "turn" => true,
    "bgcolor" => true,
    "factor" => true,
    "accel" => true,
    "twistaccel" => true,
    "twist" => true,
    "centerx" => true,
    "centery" => true,
    "rwidth" => true,
    "roundness" => true,
    "speed" => true,
    "maxdrift" => true,
    "msgoff" => true,
    "charoff" => true,
    "transwait" => true,
	"showaction" => true,
	"hideaction" => true
    ];

var actionParam = %[
	"time" => true,
	"delay" => true,
	"nowait" => true,
	"start" => true,
	"startx" => true,
	"starty" => true,
	"x" => true,
    "y" => true,
    "toptime" => true,
	"vibration" => true,
    "waittime" => true,
    "cycle" => true,
    "distance" => true,
    "falltime" => true,
    "zoom" => true,
    "angvel" => true,
    "angle" => true,
    "showtime" => true,
    "hidetime" => true,
    "intime" => true,
    "outtime" => true,
    "opacity" => true,
	"min" => true,
	"max" => true,
	"value" => true,
	"ontime" => true,
    "offtime" => true,
    "handler" => true,
    "loop" => true,
    ];

// ----------------------------------------------------------------
// アクション情報のコピー
// ----------------------------------------------------------------

/**
 * アクション情報のコピー
 * @param act  元アクション情報
 * @param time 時間上書き指定
 * @param elm  タグによる上書き用パラメータ情報
 * @return システム登録用アクション情報
 */
function copyActionInfo(act, time, elm) {
	var action = %[];
	if (act !== void) {
		var names = [];
		names.assign(act);
		if (act.module !== void) {
			//dm("module 指定アクション:" + act.module);
			if (typeof act.module != "String") {
				throw new Exception("アクションモジュール名は文字列指定してください");
			}
			var module = Scripts.eval(act.module);
			if (module !== void) {
				// 旧スタイル
				for (var i=0; i<names.count; i+= 2) {
					var name = names[i];
					var elm  = names[i+1];
					action[name] = elm;
				}
				if (time !== void) {
					action.time = time;
				}
				// パラメータのコピー
				if (elm !== void) {
					foreach(elm, function(name, value, elm, action) {
						if (actionParam[name] !== void) {
							action[name] = value;
						}
					}, action);
				}
				// 新スタイルに置き換え
				action = module(action);
			}
		} else {
			// 新スタイル
			for (var i=0; i<names.count; i+= 2) {
				var name  = names[i];
				var value = names[i+1];
				if (value instanceof "Dictionary") {
					// 辞書の場合はクローンして時間指定
					var e = %[];
					(Dictionary.assign incontextof e)(value);
					if (time !== void) {
						e.time = time;
					}
					// パラメータのコピー
					if (elm !== void) {
						e.time   = +elm.time if elm.time !== void;
						e.delay  = +elm.delay if elm.delay !== void;
					}
					action[name] = e;
				} else {
					// そうでない場合はそのまま
					action[name] = value;
				}
			}
		}
	}
	if (elm !== void) {
		action.nowait = +elm.nowait if elm.nowait !== void;
	}
	return action;
}

KAGLoadScript('KAGEnvBase.tjs');
KAGLoadScript('KAGEnvImage.tjs');
KAGLoadScript('KAGEnvLayer.tjs');
KAGLoadScript('KAGEnvBackLayer.tjs');
KAGLoadScript('KAGEnvStageLayer.tjs');
KAGLoadScript('KAGEnvEventLayer.tjs');
KAGLoadScript('KAGEnvLevelLayer.tjs');
KAGLoadScript('KAGEnvSimpleLayer.tjs');
KAGLoadScript('KAGEnvCharacter.tjs');
KAGLoadScript('KAGEnvBGM.tjs');
KAGLoadScript('KAGEnvSE.tjs');
KAGLoadScript('KAGEnvironment.tjs');
KAGLoadScript('SceneParser.tjs');
KAGLoadScript('ScenePlayer.tjs');

kag.addPlugin(kag.scenePlayer = new ScenePlayer(kag));

kag.tagHandlers["scenestart"] = function(elm) {
	return scenePlayer.scenestart(elm);
} incontextof kag;

kag.tagHandlers["scenemain"] = function(elm) {
	return scenePlayer.scenemain(elm);
} incontextof kag;

if (kag.debugLevel >= tkdlSimple) {
	dm("ワールド環境設定完了");
}

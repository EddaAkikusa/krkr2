/**
 * 背景用レイヤ
 */
class EnvBackLayer extends EnvLayer {

	// 表示位置
	var index;
	
	// 描画対象レイヤ
	var targetLayer;
	
    /**
     * コンストラクタ
     */
	function EnvBackLayer(env, name, index) {
		super.EnvLayer(env, name);
		this.index = index;
    }

    function finalize() {
		player.trashLayer(targetLayer);
		super.finalize();
    }

	/**
	 * レイヤのコピー処理
	 */
	function onCopyLayer(toback, backlay) {
		if (backlay) {
			if (toback) {
				if (targetLayer !== void) {
					//dm("裏画面にコピー:" + name);
					//dm("元レイヤ:" + targetLayer + ":" + (player.isForeLayer(targetLayer) ? "表" : "裏"));
					if (player.isForeLayer(targetLayer) && targetLayer.visible) {
						targetLayer = player.getNewLayer(this, false, targetLayer);
						targetLayer.index = index;
						//dm("複製レイヤ:" + targetLayer + ":" + (player.isForeLayer(targetLayer) ? "表" : "裏"));
					} else {
						//dm("廃棄");
						targetLayer = player.trashLayer(targetLayer);
					}
				}
			} else {
				if (targetLayer !== void) {
					//dm("表画面にコピー:" + name);
					if (!player.isForeLayer(targetLayer) && targetLayer.visible) {
						//dm("表に移動");
						player.toForeLayer(targetLayer);
						targetLayer.index = index;
					} else {
						//dm("廃棄");
						targetLayer = player.trashLayer(targetLayer);
					}
				}
			}
		}
	}
	
    /**
     * レイヤ情報の取得
     * @param isfore fore / back      
     * 同時にレベルに応じた front/back の処理も実行する
     */
	function getLayer(isfore) {
		if (targetLayer === void || player.isForeLayer(targetLayer) != isfore) {
			targetLayer = player.getNewLayer(this, isfore, targetLayer);
		}
		targetLayer.index = index;
		return targetLayer;
    }

}

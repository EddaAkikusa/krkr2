/**
 * レイヤ系基底クラス
 * 画像表示が実装されている
 */
class KAGEnvLayer extends KAGEnvImage {

    /// 描画中画像
	var imageFile = void;

	// 描画中ムービー
	var movieFile;
	var movieLoop;
	var movieAlpha;
	var moviePlaying;
	var movieLayer;

	// タイル描画処理
	var tileFile;

	var _tilex;
	property tilex {
		getter() {
			return _tilex;
		}
		setter(v) {
			_tilex = v;
			updateFlag = true;
		}
	}

	var _tiley;
	property tiley {
		getter() {
			return _tiley;
		}
		setter(v) {
			_tiley = v;
			updateFlag = true;
		}
	}
	
	function KAGEnvLayer(env, name) {
		super.KAGEnvImage(env, name);
	}
	
    function onStore(f) {
        super.onStore(f);
		f.imageFile = imageFile;
		f.movieFile = movieFile;
		f.movieLoop = movieLoop;
		f.movieAlpha = movieAlpha;
		f.tileFile = tileFile;
		f.tilex = tilex;
		f.tiley = tiley;
    }
    
    function onRestore(f) {
		if (f.imageFile !== void) {
			imageFile = %[];
			(Dictionary.assign incontextof imageFile)(f.imageFile);
		} else {
			imageFile = void;
		}
		movieFile = f.movieFile;
		movieLoop = f.movieLoop;
		movieAlpha = f.movieAlpha;
		moviePlaying = false;
		tileFile = f.tileFile;
		tilex = f.tilex;
		tiley = f.tiley;
		super.onRestore(f);
    }

	function initFile(elm) {
		if (elm.type === void)    type = void;
		if (elm.opacity === void) delete props.opacity;
		if (elm.rotate === void)  delete props.rotate;
		if (elm.zoom === void)    delete props.zoom;
		if (elm.afx === void)     delete props.afx;
		if (elm.afy === void)     delete props.afy;
	}
	
	// 画像ファイルを指定
	function setImageFile(file, elm) {

		initFile(elm);
		
		movieFile = void;
		tileFile  = void;
		imageFile = %[];
		imageFile.storage = file;
		imageFile.lightcolor = elm.lightcolor;
		imageFile.lighttype  = elm.lighttype;
		imageFile.brightness = elm.brightness;
		imageFile.contrast   = elm.contrast;
		
		// 背景指定時に座標指定がなければ場所情報を初期化する
		if (elm.xpos === void && elm.left === void) {
			delete props.left;
		}
		if (elm.ypos === void && elm.left === void) {
			delete props.top;
        }

		disp = SHOW;
		redraw = true;

        // 記録
		env.setCGFlag(file);
		
        return true;
    }

	// ムービーファイルを指定
	function setMovieFile(file, elm) {

		initFile(elm);

		imageFile = void;
		tileFile  = void;
		movieFile = file;
		movieAlpha = elm.alpha !== void ? elm.alpha : false;
		movieLoop  = elm.loop !== void ? +elm.loop : false;
		
		// 背景指定時に座標指定がなければ場所情報を初期化する
		if (elm.xpos === void && elm.left === void) {
			delete props.left;
		}
		if (elm.ypos === void && elm.ypos === void) {
			delete props.top;
        }

		disp = SHOW;
		redraw = true;

		// 記録
		env.setMovieFlag(file);

		return true;
    }

	// 塗りつぶしイメージファイルを指定
	function setTileFile(file, elm) {

		initFile(elm);
		
		movieFile = void;
		imageFile = void;
		tileFile = file;

		if (elm.tilex !== void) { tilex = +elm.tilex; }
		if (elm.tiley !== void) { tiley = +elm.tiley; }
		
		// 背景指定時に座標指定がなければ場所情報を初期化する
		if (elm.xpos === void && elm.left === void) {
			delete props.left;
		}
        if (elm.ypos === void && elm.top === void) {
            delete props.top;
		}

		disp = SHOW;
        redraw = true;

        return true;
    }
	
	var envLayerCommands = %[
	file : function(param, elm) {
		setImageFile(param, elm);
	} incontextof this,
	movie : function(param, elm) {
		setMovieFile(param, elm);
	} incontextof this,
	tile : function(param, elm) {
		setTileFile(param, elm);
	} incontextof this,
	loop : null,
	alpha : null,
	width : function(param, elm) { width = param; } incontextof this,
	height : function(param, elm) { height = param; } incontextof this,
		];

    /**
	 * コマンドの実行
	 * @param cmd コマンド
	 * @param param パラメータ
	 * @param elm 他のコマンドも含む全パラメータ
     * @return 実行が行われた場合 true
     */
    function doCommand(cmd, param, elm) {
		// 共通コマンド
		if (super.doCommand(cmd, param, elm)) {
            return true;
        }
		// レイヤ共通コマンド
        var func;
		if ((func = envLayerCommands[cmd]) !== void) {
			if (func != null) {
				func(param, elm);
			}
            return true;
        }
		
		return false;
    }

	function drawLayer(layer) {
		if (isShowBU()) {
			if (tileFile !== void) {
				dm("タイル画像");
				// タイル画像ロード
				if (moviePlaying) {
					layer.stopMovie();
					moviePlaying = false;
				}
				// タイル描画
				try {
					layer.setTileImage(tileFile);
					// 座標補正
					if (layer.tileLayer !== void) {
						if (_width === void ) {
							_width = layer.tileLayer.width;
						}
						if (_height === void) {
							_height = layer.tileLayer.height;
						}
					}
				} catch (e) {
					var text = tileFile + ":タイル画像がロードできません";
					env.errorImage(text);
					layer.fillRect(0,0,layer.width, layer.height, 0xff000000);
					layer.drawText(0,0,text,0xffffff);
				}
			} else if (imageFile !== void) {
				// 画像のロード
				if (moviePlaying) {
					layer.stopMovie();
					moviePlaying = false;
				}
				layer.clearTile();
				try {
					layer.loadImages(imageFile);
					_width  = layer.width;
					_height = layer.height;
				} catch (e) {
					var text = imageFile.storage + ":画像がロードできません";
					env.errorImage(text);
					layer.fillRect(0,0,layer.width, layer.height, 0xff000000);
					layer.drawText(0,0,text,0xffffff);
				}
			} else if (movieFile !== void) {
				// ムービーのロード
				//dm("ムービーのロード:" + movieFile);
				layer.clearTile();
				//try {
					layer.startMovie(movieFile, movieAlpha, movieLoop);
				    width  = layer.width;
					height = layer.height;
					moviePlaying = true;
			//} catch(e) {
			//		var text = movieFile + ":ムービーがロードできません";
			//		env.errorImage(text);
			//		layer.fillRect(0,0,layer.width, layer.height, 0xff000000);
			//		layer.drawText(0,0,text,0xffffff);
			//	}
			}
		} else {
			if (moviePlaying) {
				layer.stopMovie();
				moviePlaying = false;
			}
		}
	}

	function updateLayer(layer) {
		super.updateLayer(layer);
		if (tileFile !== void) {
			layer.setTilePos(tilex, tiley);
		}
	}
	
}

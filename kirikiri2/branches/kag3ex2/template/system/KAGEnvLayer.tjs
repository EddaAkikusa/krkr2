/**
 * レイヤ系基底クラス
 * 画像表示処理が実装されている
 */
class KAGEnvLayer extends KAGEnvImage {

    // kag の参照
    property kag {
        getter() {
            return env.kag;
        }
    }

    /// 描画中画像
    var imageFile;
	/// 色指定塗りつぶし
	var imageColor;

	// 描画中ムービー
	var movieFile;
	var movieLoop;
	var movieAlpha;
	var movieLayer;

	// 炎エフェクト
	var fireFile;
	var fireInfo;

	// タイル描画処理
	var tileFile;

	var _tilex;
	property tilex {
		getter() {
			return _tilex;
		}
		setter(v) {
			_tilex = v;
			reposition = true;
		}
	}

	var _tiley;
	property tiley {
		getter() {
			return _tiley;
		}
		setter(v) {
			_tiley = v;
			reposition = true;
		}
	}
	
	var _width;
	property width {
		getter() {
			return _width;
		}
		setter(v) {
			_width = v;
			reposition = true;
		}
	}
	
	var _height;
	property height {
		getter() {
			return _height;
		}
		setter(v) {
			_height = v;
			reposition = true;
		}
	}
	
	function KAGEnvLayer(env, name) {
		super.KAGEnvImage(env, name);
		redraw = false;
	}

    function onStore(f) {
        super.onStore(f);
		f.imageFile = imageFile;
		f.imageColor = imageColor;
		f.movieFile = movieFile;
		f.movieLoop = movieLoop;
		f.movieAlpha = movieAlpha;
		f.fireFile = fireFile;
		if (fireFile !== void) {
			f.fireInfo = %[];
			(Dictionary.assign incontextof f.fireInfo)(fireInfo);
		}
		f.tileFile = tileFile;
		f.tilex = tilex;
		f.tiley = tiley;
		f.width  = width;
		f.height = height;
    }
    
    function onRestore(f) {
		imageFile = f.imageFile;
		imageColor = f.imageColor;
		movieFile = f.movieFile;
		movieLoop = f.movieLoop;
		movieAlpha = f.movieAlpha;
		fireFile = f.fireFile;
		if (fireFile !== void) {
			fireInfo = %[];
			(Dictionary.assign incontextof fireInfo)(f.fireInfo);
		} else {
			fireInfo = void;
		}
		tileFile = f.tileFile;
		tilex = f.tilex;
		tiley = f.tiley;
		width = f.width;
		height = f.height;
		super.onRestore(f);
    }

	function copy(orig) {
		if (orig instanceof "KAGEnvLayer") {
			imageFile = orig.imageFile;
			imageColor = orig.imageColor;
			movieFile = orig.movieFile;
			movieLoop = orig.movieLoop;
			movieAlpha = orig.movieAlpha;
			fireFile = orig.fireFile;
			if (fireFile) {
				fireInfo = %[];
				(Dictionary.assign incontextof fireInfo)(orig.fireInfo);
			} else {
				fireInfo = void;
			}
			tileFile = orig.tileFile;
			tilex = orig.tilex;
			tiley = orig.tiley;
			width = orig.width;
			height = orig.height;
		}
		super.copy(orig);
	}
	
	// 画像ファイルを指定
	function setImageFile(file, elm) {

		initFile(elm);
		
		movieFile = void;
		fireFile = void;
		tileFile  = void;
		imageFile = file;
		imageColor = void;

        // 背景指定時に座標指定がなければ場所情報を初期化する
        if (elm.xpos === void) {
            xpos = void;
        }
        if (elm.ypos === void) {
            ypos = void;
        }

		if (elm.hide === void) {
			disp = SHOW;
			redraw = true;
		}

		if (elm.noflag === void && file !== void) {
			// 記録
			kag.sflags["cg_" + (file.toUpperCase())] = true;
		}

        return true;
    }

	// 塗りつぶし指定
	function setImageColor(color, elm) {

		initFile(elm);

		imageFile = void;
		imageColor = +color;
		tileFile  = void;
		movieFile = void;
		fireFile = void;
		
		// 背景指定時に座標指定がなければ場所情報を初期化する
		if (elm.xpos === void) {
			xpos = void;
        }
		if (elm.ypos === void) {
			ypos = void;
        }

		if (elm.hide === void) {
			disp = SHOW;
			redraw = true;
		}
		return true;
    }
	
	// ムービーファイルを指定
	function setMovieFile(file, elm) {

		initFile(elm);

		imageFile = void;
		imageColor = void;
		tileFile  = void;
		fireFile = void;
		movieFile = file;
		movieAlpha = elm.alpha !== void ? elm.alpha : false;
		movieLoop  = elm.loop !== void ? +elm.loop : false;
		
		// 背景指定時に座標指定がなければ場所情報を初期化する
		if (elm.xpos === void) {
			xpos = void;
        }
		if (elm.ypos === void) {
			ypos = void;
        }

		if (elm.hide === void) {
			disp = SHOW;
			redraw = true;
		}

		if (elm.noflag === void) {
			// 記録
			kag.sflags["movie_" + (file.toUpperCase())] = true;
		}

		return true;
    }

	// ムービーファイルを指定
	function setFireFile(file, elm) {
		
		initFile(elm);

		imageFile = void;
		imageColor = void;
		tileFile  = void;
		movieFile = void;
		fireFile = file;
		fireInfo = %[];
		(Dictionary.assign incontextof fireInfo)(elm);
		
		// 背景指定時に座標指定がなければ場所情報を初期化する
		if (elm.xpos === void) {
			xpos = void;
        }
		if (elm.ypos === void) {
			ypos = void;
        }

		if (elm.hide === void) {
			disp = SHOW;
			redraw = true;
		}

		return true;
    }
	
	// 塗りつぶしイメージファイルを指定
	function setTileFile(file, elm) {

		initFile(elm);
		
		movieFile = void;
		fireFile = void;
		imageFile = void;
		imageColor = void;
		tileFile = file;

		if (elm.tilex !== void) { tilex = +elm.tilex; }
		if (elm.tiley !== void) { tiley = +elm.tiley; }
		
		// 背景指定時に座標指定がなければ場所情報を初期化する
		if (elm.xpos === void) {
			xpos = void;
		}
        if (elm.ypos === void) {
            ypos = void;
		}

		if (elm.hide === void) {
			disp = SHOW;
			redraw = true;
		}

		if (elm.noflag === void) {
			// 記録
			kag.sflags["tile_" + (file.toUpperCase())] = true;
		}

        return true;
    }
	
	var _layerCommands = %[
	copy: function (para, elm) {
		if (para != name && env.layers[para] !== void) {
			copy(env.layers[para]);
		}
	} incontextof this,
	file : function(param, elm) {
		setImageFile(param, elm);
	} incontextof this,
	color : function(param, elm) {
		setImageColor(param, elm);
	} incontextof this,
	movie : function(param, elm) {
		setMovieFile(param, elm);
	} incontextof this,
	tile : function(param, elm) {
		setTileFile(param, elm);
	} incontextof this,
	tilex : null,
	tiley : null,
	loop : null,
	alpha : null,
	noflag : null,
	width : function(param, elm) { width = param; } incontextof this,
	height : function(param, elm) { height = param; } incontextof this,
	fire: function(param, elm) {
		setFireFile(param, elm);
	} incontextof this,
	scalingcoeff : null,
	texturefiltertype: null,
	forceh : null,
	forceb : null,
	boundrangeh : null,
	boundrangeb : null,
	numofblurforcoolmap : null,
	texturefiltertype : null,
	coolrange : null,
	coolstrength : null,
	coolparticledensitydenominator : null,
	coolparticledensitynumerator : null,
	edgesmoothing : null,
	firewidth : null,
	fireheight: null,
	fireleft : null,
	firetop : null,
	firemargin : null,
	firecolor : null,
	firegamma: null
		];

    /**
	 * コマンドの実行
	 * @param cmd コマンド
	 * @param param パラメータ
	 * @param elm 他のコマンドも含む全パラメータ
     * @return 実行が行われた場合 true
     */
    function doCommand(cmd, param, elm) {

		// 共通コマンド
		if (super.doCommand(cmd, param, elm)) {
            return true;
        }
		
		// レイヤ共通コマンド
        var func;
        if ((func = _layerCommands[cmd]) !== void) {
            if (func != null) {
                func(param, elm);
            }
            return true;
        }
        // レイヤ拡張コマンド用
        if ((func = layerCommands[cmd]) !== void) {
            if (func != null) {
                func(param, elm);
            }
            return true;
        }

        var find = false;
        
        // アクション
        if (!find) {
            find = setAction(cmd, elm);
        }

        // 更新
        if (!find) {
            find = setTrans(cmd, elm);
        }

		// 画像のロード
		if (!find) {
			find = setImageFile(cmd, elm);
		}
		return find;
    }

	function errorLayer(layer, text) {
		kag.errorImage(text);
		layer.fillRect(0,0,layer.width, layer.height, 0xff000000);
		layer.drawText(0,0,text,0xffffff);
	}

	function drawLayer(layer) {
		layer.stopMovie();
		layer.clearTile();
		layer.stopFire();
		if (isShowBU()) {
			if (tileFile !== void) {
				// タイル画像ロード
				try {
					layer.setTileImage(tileFile);
					// 座標補正
					if (layer.tileLayer !== void) {
						if (_width == void ) {
							_width = layer.tileLayer.width;
						}
						if (_height == void) {
							_height = layer.tileLayer.height;
						}
					}
				} catch (e) {
					errorLayer(layer, imageFile + ":タイル画像がロードできません:" + e.message);
				}
			} else if (imageFile !== void) {
				// 画像のロード
				try {
					layer.loadImages(%[ "storage" => imageFile]);
					_width  = layer.width;
					_height = layer.height;
				} catch (e) {
					errorLayer(layer, imageFile + ":画像がロードできません:" + e.message);
				}
			} else if (movieFile !== void) {
				// ムービーのロード
				try {
					layer.startMovie(movieFile, movieLoop, movieAlpha);
					_width  = layer.width;
					_height = layer.height;
				} catch(e) {
					errorLayer(layer, movieFile + ":ムービーがロードできません:" + e.message);
				}
			} else if (imageColor !== void) {
				// 塗りつぶし
				layer.setSize(_width, _height);
				layer.fillRect(0, 0, layer.width, layer.height, imageColor);
			} else if (fireFile !== void) {
				// 炎エフェクト
				try {
					layer.startFire(fireFile, fireInfo);
				} catch(e) {
					errorLayer(layer, fireFile + ":炎エフェクトがロードできません:" + e.message);
				}
			}
		}
	}

	function setSize(layer) {
		if (_width != layer.width || _height != layer.height) {
			layer.setSize(width, height);
		}
		if (tileFile !== void) {
			layer.setTilePos(tilex, tiley);
		} else if (imageColor !== void) {
			layer.fillRect(0,0,layer.width, layer.height, imageColor);
		}
	}

	function applyMoveAction(action) {
		if (action.module !== void) {
			// 旧スタイルアクションは無視の方向
			return;
		}
		super.applyMoveAction(action);
		applyPropMoveAction(action, "tilex");
		applyPropMoveAction(action, "tiley");
	}

}

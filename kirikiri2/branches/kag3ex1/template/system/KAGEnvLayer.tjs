/**
 * レイヤ系基底クラス
 * 画像表示が実装されている
 */
class KAGEnvLayer extends KAGEnvImage {

    // kag の参照
    property kag {
        getter() {
            return env.kag;
        }
    }

    /// 描画中画像
    var imageFile;

	// 描画中ムービー
	var movieFile;
	var movieLoop;
	var movieAlpha;
	var moviePlaying;
	var movieLayer;

	// タイル描画処理
	var tileFile;

	var _tilex;
	property tilex {
		getter() {
			return _tilex;
		}
		setter(v) {
			_tilex = v;
			reposition = true;
		}
	}

	var _tiley;
	property tiley {
		getter() {
			return _tiley;
		}
		setter(v) {
			_tiley = v;
			reposition = true;
		}
	}
	
	var _width;
	property width {
		getter() {
			return _width;
		}
		setter(v) {
			_width = v;
			reposition = true;
		}
	}
	
	var _height;
	property height {
		getter() {
			return _height;
		}
		setter(v) {
			_height = v;
			reposition = true;
		}
	}
	
	function KAGEnvLayer(env) {
		super.KAGEnvImage(env);
		redraw = false;
	}

    function onStore(f) {
        super.onStore(f);
		f.imageFile = imageFile;
		f.movieFile = movieFile;
		f.movieLoop = movieLoop;
		f.movieAlpha = movieAlpha;
		f.tileFile = tileFile;
		f.tilex = tilex;
		f.tiley = tiley;
		f.width  = width;
		f.height = height;
    }
    
    function onRestore(f) {
		imageFile = f.imageFile;
		movieFile = f.movieFile;
		movieLoop = f.movieLoop;
		movieAlpha = f.movieAlpha;
		moviePlaying = false;
		tileFile = f.tileFile;
		tilex = f.tilex;
		tiley = f.tiley;
		width = f.width;
		height = f.height;
		super.onRestore(f);
    }

	function initFile(elm) {
		if (elm.type === void) type = void;
		if (elm.opacity === void) opacity = void;
		if (elm.rotate === void) rotate = void;
		if (elm.zoom === void) zoom = void;
		if (elm.afx === void) afx = void;
		if (elm.afy === void) afy = void;
	}

	
	// 画像ファイルを指定
	function setImageFile(file, elm) {

		initFile(elm);
		
		movieFile = void;
		tileFile  = void;
		imageFile = file;

        // 背景指定時に座標指定がなければ場所情報を初期化する
        if (elm.xpos === void) {
            xpos = void;
        }
        if (elm.ypos === void) {
            ypos = void;
        }

		disp = SHOW;
		redraw = true;

        // 記録
        kag.sflags["cg_" + (file.toUpperCase())] = true;

        return true;
    }

	// ムービーファイルを指定
	function setMovieFile(file, elm) {

		initFile(elm);

		imageFile = void;
		tileFile  = void;
		movieFile = file;
		movieAlpha = elm.alpha !== void ? elm.alpha : false;
		movieLoop  = elm.loop !== void ? +elm.loop : false;
		
		// 背景指定時に座標指定がなければ場所情報を初期化する
		if (elm.xpos === void) {
			xpos = void;
        }
		if (elm.ypos === void) {
			ypos = void;
        }

		disp = SHOW;
		redraw = true;

		// 記録
		kag.sflags["movie_" + (file.toUpperCase())] = true;

		return true;
    }

	// 塗りつぶしイメージファイルを指定
	function setTileFile(file, elm) {

		initFile(elm);
		
		movieFile = void;
		imageFile = void;
		tileFile = file;

		if (elm.tilex !== void) { tilex = +elm.tilex; }
		if (elm.tiley !== void) { tiley = +elm.tiley; }
		
		// 背景指定時に座標指定がなければ場所情報を初期化する
		if (elm.xpos === void) {
			xpos = void;
		}
        if (elm.ypos === void) {
            ypos = void;
		}

		disp = SHOW;
        redraw = true;

        // 記録
        kag.sflags["tile_" + (file.toUpperCase())] = true;

        return true;
    }
	
	var _layerCommands = %[
	file : function(param, elm) {
		setImageFile(param, elm);
	} incontextof this,
	movie : function(param, elm) {
		setMovieFile(param, elm);
	} incontextof this,
	tile : function(param, elm) {
		setTileFile(param, elm);
	} incontextof this,
	loop : null,
	alpha : null,
	width : function(param, elm) { width = param; } incontextof this,
	height : function(param, elm) { height = param; } incontextof this,
		];

    /**
	 * コマンドの実行
	 * @param cmd コマンド
	 * @param param パラメータ
	 * @param elm 他のコマンドも含む全パラメータ
     * @return 実行が行われた場合 true
     */
    function doCommand(cmd, param, elm) {

		// 共通コマンド
		if (super.doCommand(cmd, param, elm)) {
            return true;
        }
		
		// レイヤ共通コマンド
        var func;
        if ((func = _layerCommands[cmd]) !== void) {
            if (func != null) {
                func(param, elm);
            }
            return true;
        }
        // レイヤ拡張コマンド用
        if ((func = layerCommands[cmd]) !== void) {
            if (func != null) {
                func(param, elm);
            }
            return true;
        }

        var find = false;
        
        // アクション
        if (!find) {
            find = setAction(cmd, elm);
        }

        // 更新
        if (!find) {
            find = setTrans(cmd, elm);
        }

		// 画像のロード
		if (!find) {
			find = setImageFile(cmd, elm);
		}
		return find;
    }

    // このメソッドを実装する
    // function getLayer(base);
    // 
	function drawLayer(layer) {
		if (isShowBU()) {
			if (tileFile !== void) {
				dm("タイル画像");
				// タイル画像ロード
				if (moviePlaying) {
					layer.stopMovie();
					moviePlaying = false;
				}
				// タイル描画
				try {
					layer.setTileImage(tileFile);
					// 座標補正
					if (layer.tileLayer !== void) {
						if (_width == void ) {
							_width = layer.tileLayer.width;
						}
						if (_height == void) {
							_height = layer.tileLayer.height;
						}
					}
				} catch (e) {
					var text = imageFile + ":タイル画像がロードできません";
					kag.errorImage(text);
					layer.fillRect(0,0,layer.width, layer.height, 0xff000000);
					layer.drawText(0,0,text,0xffffff);
				}
			} else if (imageFile !== void) {
				// 画像のロード
				if (moviePlaying) {
					layer.stopMovie();
					moviePlaying = false;
				}
				layer.clearTile();
				try {
					layer.loadImages(%[ "storage" => imageFile]);
					_width  = layer.width;
					_height = layer.height;
				} catch (e) {
					var text = imageFile + ":画像がロードできません";
					kag.errorImage(text);
					layer.fillRect(0,0,layer.width, layer.height, 0xff000000);
					layer.drawText(0,0,text,0xffffff);
				}
			} else if (movieFile !== void) {
				// ムービーのロード
				//dm("ムービーのロード:" + movieFile);
				layer.clearTile();
				//try {
					layer.startMovie(movieFile, movieAlpha, movieLoop);
					_width  = layer.width;
					_height = layer.height;
					moviePlaying = true;
			//} catch(e) {
			//		var text = movieFile + ":ムービーがロードできません";
			//		kag.errorImage(text);
			//		layer.fillRect(0,0,layer.width, layer.height, 0xff000000);
			//		layer.drawText(0,0,text,0xffffff);
			//	}
			}
		} else {
			if (moviePlaying) {
				layer.stopMovie();
				moviePlaying = false;
			}
		}
	}

	function setSize(layer) {
		if (_width != layer.width || _height != layer.height) {
			layer.setSize(width, height);
		}
		if (tileFile !== void) {
			layer.setTilePos(tilex, tiley);
		}
	}
	
}

<?xml version="1.0" encoding="Shift_JIS" ?>
<doc>
<title>関数</title>

<para>
<ptitle>関数</ptitle>
　TJS2 の関数は<kw>サブルーチン</kw>とほぼ同義です。値を返すことのない場合も関数として扱います。<r/>
　また、特にクラスやオブジェクトのメンバとなっている関数を「<kw>メソッド</kw>」と呼ぶことがあります。<r/>
</para>

<para>
<ptitle>関数の書き方</ptitle>
　関数は、以下の書式で書くことができます。<r/>
<bq>
	function 関数名 ( 引数リスト )<r/>
	{<r/>
		関数の内容<r/>
	}<r/>
</bq>
<r/>
　まず、関数を定義するには、<kw>function</kw> を書きます。そのあとに、関数の名前を書きます。ここに書いた名前で関数が使用可能になります。<r/>
　関数の内容には、関数内で実行したいステートメントやブロックを記述することができます。<r/>
<r/>
<example>
	function test(a) { System.inform(a); }<r/>
	function func(a, b, c, d)<r/>
	{<r/>
		test(a);<r/>
		test(b);<r/>
		test(c);<r/>
		test(d);<r/>
		return a+b-c*d;<r/>
	}<r/>
</example>
</para>

<para>
<ptitle>関数の呼び出し</ptitle>
　関数の呼び出しは <kw>( )</kw> 演算子を使って、以下のように記述します。<r/>
<tt>
	関数名( 引数 )
</tt>
	引数がない場合は、<tt>関数名( )</tt> になります。引数には、式を指定し、複数ある場合はカンマで区切って指定します。<r/>
<example>
	func();<r/>
	func(1+2, 1-2);<r/>
	func(func2());<r/>
</example>
<r/>
	また、式を指定せずに、空にしておくと、そこの部分には void が指定されたと見なされます。<r/>
<example>
	func(,1); // void, 1 が指定されたとみなされる<r/>
	func(,); // void, void が指定されたと見なされる<r/>
</example>
</para>

<para>
<ptitle>引数リスト</ptitle>
　引数リストには、渡された引数を受け取るための変数の名前を書きます。関数呼び出しの際に渡した引数のうち、前に書いたものから順番に、変数に引き渡されます。<r/>
<example>
	function test(a, b, c)<r/>
	{<r/>
		// この時点で、 a と b と c という変数が使用可能であり、<r/>
		// 引数として渡された 3 つの引数が代入されています。<r/>
		// test(1, 2, 3) と呼び出した場合は、 a に 1、<r/>
		// b に 2, c に 3 が入っています。<r/>
	}<r/>
</example>
<r/>
　これらの引数はローカル変数であり、関数から実行が抜けるとアクセスできなくなります。<r/>
<r/>
　TJS2 では、関数呼び出しの際に与えられた引数が宣言の引数の数よりも少なかったり、多かったりしてもエラーにはなりません ( 例外的に、TJS2 で記述されたのではない関数 ( 実体が C++ などで記述された関数 ) はエラーにする場合があります )。与えられた引数が宣言より多い場合は多い分が無視され、少ない場合は、足りない変数には void が渡されます。<r/>
<example>
	function test(a, b)<r/>
	{<r/>
		// もし test(1) として呼び出すと、a には 1 、b には void が入る。<r/>
		// もし test(1,2,3) として呼び出すと、 a には 1、 b には 2 が入り、3 は無視される<r/>
	}<r/>
</example>
<r/>
　引数リストの個々の引数には、 = に続けてデフォルトの値 ( <kw>デフォルト引数</kw> ) を指定することができます。これは、void が指定されたときや、与えられた引数が宣言の引数に満たない場合に、自動的に指定された値が使用されるというものです。<r/>
<example>
	function test(a = -1, b = 1)<r/>
	{<r/>
		// もし・・・<r/>
		// test() として呼び出すと、 a=-1, b=1<r/>
		// test(5) として呼び出すと、 a=5, b=1<r/>
		// test(void,void) として呼び出すと、 a=-1, b=1<r/>
		// test(,4) として呼び出すと、a=-1, b=4<r/>
	}<r/>
</example>
<r/>
　引数を受け取る必要のない関数は、引数リストを省略することができます。<r/>
<example>
	function test<r/>
	{<r/>
		// 引数を受け取らない関数<r/>
	}<r/>
</example>
</para>

<para>
<ptitle>引数の省略</ptitle>
　関数を呼び出す際に、 <kw>...</kw> のみを引数として書くと、呼び出す式を記述した関数に引き渡された引数が、そのまま関数呼び出し先の関数に引き渡されます。これは、引数変数の内容を変更していても、あるいは受け取った引数が足りなくても、正しい元の内容、引数の数がわたります。<r/>
<example>
	function test()<r/>
	{<r/>
		test2(...);<r/>
		// test2 には test に渡された引数が、渡された時点のまま<r/>
		// の内容、個数で渡される<r/>
	}<r/>
</example>
</para>

<para>
<ptitle>式中関数</ptitle>
　function キーワードを式内で使うと、名前のない関数、式中関数 ( <kw>匿名関数</kw> ) を作成することができます。<r/>
　この場合、関数の名前は省略します。<r/>
<example>
	var func = function(i) { return i*5; };<r/>
	var func2 = function { System.inform("hoge"); };<r/>
	var v = func(); // func 呼び出し<r/>
	func2(); // func2 呼び出し<r/>
</example>
</para>

</doc>

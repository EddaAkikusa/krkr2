//
// UI ロード処理用専用クラス
//

// csv パーサプラグインの読み込み
if (global.CSVParser === void) {
    Plugins.link("csvParser.dll");
}

var buttonStateNames = %[ normal:true, over:true, on:true, off:true ];

/**
 * UI定義ファイル読み出し用パーサ
 */
class UIListParser extends CSVParser {

    // パース結果格納用
    var result;
    var names;
    var check;

    /**
     * 行毎に呼び出される
     * @param columns カラムデータ(Array)
     * @param lineNo 論理行番号(1〜)
     */
    function doLine(_columns, lineNo) {
        if (_columns[0].charAt(0) != '#') {
			var columns = [];
			for (var i = 0; i < _columns.count; i++) columns[i] = _columns[i].trim();

            var type = columns[0];
            var name = columns[1];
            var info = result[name];
            if (info === void) {
                info = %[];
                info.name = name;
                info.uistates = %[];
                names.add(name);
                result[name] = info;
            }
            if (type == "type") {
                check = true;
                // 種類指定
                info.class  = columns[2];
                info.x      = +columns[3];
                info.y      = +columns[4];
                info.width  = +columns[5];
                info.height = +columns[6];
            } else if (type == "file") {
                check = true;
                // ファイル指定
                if (info.class == "base") {
                    info.storage =columns[2];
                } else {
                    var stateName = columns[7];
                    for (var i=8;i<columns.count;i++) {
                        var state = columns[i];
                        if (buttonStateNames[state] !== void) {
                            stateName += "_";
                            stateName += state;
                        } else {
                            if (info.class == "radio") {
                                if (state != "") {
                                    info.groupName = state;
                                }
                            }
                        }
                    }
                    if (stateName != "") {
                        var state = info.uistates[stateName];
                        if (state === void) {
                            state = %[];
                            info.uistates[stateName] = state;
                        }
                        state.storage = columns[2];
                        state.ox = +columns[3];
                        state.oy = +columns[4];
                        state.w  = +columns[5];
                        state.h  = +columns[6];
                    }
                }
            } else if (type == "func") {
                check = true;
				for (var i=2; i<columns.count; i+=2) {
					var tag = columns[i];
					var val = columns[i+1];
					val = true if (val === void);
					if (tag !==void && tag.length > 0) {
						try {
							info[tag] = val;
						} catch(e) {
							dm("指定された処理は評価できません:" + val);
						}
					}
				}
            }
        }
    }

    function parseStorage(filename,utf8=false) {
		check = false;
		super.parseStorage(...);
		if (!check) {
//			dm("reload: " + filename);
			// １行も読まれなかったらとりあえずエンコードを変えて読み直し
			super.parseStorage(filename, !utf8);
			if (!check) {
//				dm("arrayload: " + filename);
				// それでもダメだったらArrayで読み直す
				var temp = [];
				temp.load(filename);
				for (var i = 0; i < temp.count; i++) {
					var line = [];
					line.split(",\t", temp[i]);
					doLine(line, i+1) if (line.count > 0);
				}
			}
		}
        return result;
    } 

    function UIListParser() {
        super.CSVParser(...);
        clear();
    }

    function clear() {
        result = %[];
        names = [];
    }
};

function uiloadParse(layer, elm, funcTable)
{
    var separator = #',';
    var baseName = elm.storage;
    
    if (!Storages.isExistentStorage(baseName)) {
        if (Storages.isExistentStorage(baseName + ".csv")) {
            baseName += ".csv";
        } else if (Storages.isExistentStorage(baseName + ".txt")) {
            baseName += ".txt";
            separator = #'\t';
        } else {
            kag.errorImage("UI定義ファイルが見つかりません:" + baseName);
            return;
        }
    }
    var parser = new UIListParser(null, separator);

    parser.parseStorage(baseName);
    var funcName = elm.func !== void ? elm.func : Storages.chopStorageExt(baseName) + ".func";
    if (!Storages.isExistentStorage(funcName)) {
        if (Storages.isExistentStorage(funcName + ".func")) {
            funcName += ".func";
        }
    }
    if (Storages.isExistentStorage(funcName)) {
        parser.parseStorage(funcName);
    }

    uiloadEntry(layer, parser.names, parser.result, elm, funcTable);
}

function uiloadEntry(layer, names, dic, elm, table)
{
	var basex = 0, basey = 0;
    // 背景だけ特殊処理
    for (var i=0; i<names.count; i++) {
        var value = dic[names[i]];
        if (value !== void && value.class == "base") {
            table[value.class](layer, names[i], value, elm);
			basex = value.x;
			basey = value.y;
            break;
        }
    }
    for (var i=0; i<names.count; i++) {
        var value = dic[names[i]];
        if (value !== void) {
            if (value.class === void) {
                kag.error("クラスが指定されていません:" + names[i]);
            } else if (value.class !== "base") {
                var func = table[value.class];
                if (func !== void) {
                    value.x -= basex;
                    value.y -= basey;
                    func(layer, names[i], value, elm);
                }
            }
        }
    }
}


function uiEntryBase(layer, name, value, elm) {
    var e = %[];
    (global.Dictionary.assign incontextof e)(elm,false); 
    e.left   = value.x;
    e.top    = value.y;
    e.width  = value.width;
    e.height = value.height;
    e.frame  = value.storage;
    e.margint = 0 if e.margint === void;
    e.marginl = 0 if e.marginl === void;
    e.marginr = 0 if e.marginr === void;
    e.marginb = 0 if e.marginb === void;
    e.transparent = false if e.transparent === void;
    e.visible = true if e.visible === void;
    layer.setPosition(e);
}
function uiEntryButton(layer, name, value) {
	layer.locate(value.x, value.y);
	layer.addButton(value);
}
function uiEntrySlider(layer, name, value) {
    layer.locate(value.x, value.y);
    layer.addSlider(value);
}

var uiEntryFuncs = %[
base:   uiEntryBase,
button: uiEntryButton,
toggle: uiEntryButton,
radio:  uiEntryButton,
slider: uiEntrySlider,
];

/**
 * UIのロード処理
 * @param layer レイヤ名
 * @param ロードする定義ファイル
 */
function uiload(layer, elm)
{
    uiloadParse(layer, elm, uiEntryFuncs);
}

function uiEntrySystemButton(layer, name, value) {
	layer.addSystemButton(value);
}
var uiEntrySystemFuncs = %[
base:   uiEntryBase,
button: uiEntrySystemButton,
toggle: uiEntrySystemButton,
radio:  uiEntrySystemButton
];
/**
 * UIのロード処理
 * @param layer レイヤ名
 * @param ロードする定義ファイル
 */
function uiloadSystem(layer, elm)
{
    uiloadParse(layer, elm, uiEntrySystemFuncs);
}

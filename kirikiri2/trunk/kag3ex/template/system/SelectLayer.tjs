// SelectLayer.tjs - 選択肢レイヤ
// Copyright (C)2001-2006, W.Dee and contributors  改変・配布は自由です

/**
 * 選択肢処理用ボタン
 */
class SelectButtonLayer extends ButtonLayer
{
    var onclick; // クリック時に実行するもの
    var onenter; // マウスが入ってきたときに実行するもの
    var onleave; // マウスが出ていったときに実行するもの
    var storage; // 処理終了後のジャンプ先
    var target;  // 処理終了後のジャンプ先

    /**
     * 文字描画処理に細工
     */
    function drawText(x, y, text, color, opa=255) {
        if (parent.fontEdge) {
            super.drawText(x, y, text, color, opa, true,
                           parent.fontEdgeEmphasis, parent.fontEdgeColor, parent.fontEdgeExtent, 0, 0);
        } else if(parent.fontShadow) {
            super.drawText(x, y, text, color, opa, true,
                           255, parent.fontShadowColor, 0, 2, 2);
        } else {
            super.drawText(x, y, text, color, opa, true);
        }
    }

    /**
     * メッセージの描画
     */
    function drawMessage(message) {
        var cnt = Butt_showFocusImage ? 4 : 3;
        var tw = font.getTextWidth(message);
        var th = font.getTextHeight(message);
        var y = (height-th)>>1;
        dm("サイズ:" + width + " ," + height);
        var dx = (width-tw)>>1;
        for (var i=0;i<cnt;i++) {
            var x = i*width + dx;
            dm("メッセージ:" + x);
            drawText(x, y, message, parent.fontColor, 255);
        }
    }
    
    /**
     * コンストラクタ
     * @param window  ウインドウを指定
     * @param parent  親レイヤを指定
     * @param message 表示するメッセージを指定
     */
    function SelectButtonLayer(window, parent, message) {

        super.ButtonLayer(window, parent);

        // 文字初期化
        font.face   = parent.fontFace;
        font.bold   = parent.fontBold;
        font.italic = parent.fontItalic;
        font.height = parent.fontSize;

        if (parent.normalImage !== void) {
            // 画像がある場合はロード
            loadButtons(parent.normalImage, parent.overImage, parent.onImage, parent.focusImage);
            drawMessage(message);
        } else if (parent.graphic !== void) {
            // 画像がある場合はロード
            loadImages(parent.graphic, parent.graphickey);
            drawMessage(message);
        } else {
            // ない場合は組み込みボタンとして処理
            width        = parent.selectWidth;
            height       = parent.selectHeight;
            captionColor = parent.selectColor;
            caption      = message;
        }

    }

    function finalize() {
        super.finalize(...);
	}

	function onMouseEnter()
	{
        if(onenter !== void) Scripts.eval(onenter);
		super.onMouseEnter(...);
	}

	function onMouseLeave()
	{
        if(onleave !== void) Scripts.eval(onleave);
        super.onMouseLeave(...);
	}
    
	function onMouseUp(x, y, button, shift)	{
        super.onMouseUp(...);
        if (enabled && button == mbLeft) {
            if (onclick !== void) {
                Scripts.eval(onclick);
            }
            parent.onButtonClick(this);
        }
	}
}

/**
 * 選択肢処理用ロジック
 * KAG用に特化しています
 */
class SelectLayer extends KAGLayer {

    // 選択肢項目の属性
    var selectWidth  = 400;
    var selectHeight = 50;
    var selectColor  = 0xffffff;
    var fontSize     = 24;

    // 画像データ
    var graphic;
    var graphickey;
    var normalImage;
    var overImage;
    var onImage;
    var focusImage;

    // フォント
    var fontFace = "ＭＳ Ｐ明朝";
    var fontBold;
    var fontItalic;
    var fontShadow;
    var fontEdge;
    var fontColor       = 0xffffff;
    var fontEdgeColor   = 0x0080ff;
    var fontShadowColor = 0000000;
    var fontEdgeEmphasis = 512;
    var fontEdgeExtent = 0;

    // 効果音
    var enterse;
    var leavese;
    var clickse;
    
	function setOptions(elm) {
        super.setOptions(elm);

        // 画像指定
        normalImage = elm.normal if elm.normal !== void;
        overImage   = elm.over   if elm.over   !== void;
        onImage     = elm.on     if elm.on     !== void;
        focusImage  = elm.focus  if elm.focus  !== void;
        graphic     = elm.graphic    if elm.graphic !== void;
        graphickey  = elm.graphickey if elm.graphickey !== void;

        // サイズ指定
        selectWidth  = elm.selectWidth  if elm.selectWidth  !== void;
        selectHeight = elm.selectHeight if elm.selectHeight !== void;

        // フォント指定
        fontSize   = elm.size if elm.size !== void;
        fontColor  = elm.color if elm.color !== void;
        fontItalic = elm.italic if elm.italic !== void;
        fontShadow = elm.shadow if elm.shadow !== void;
        fontEdge   = elm.edge   if elm.edge   !== void;
        fontBold   = elm.bold   if elm.bold   !== void;
        fontEdgeColor = elm.edgeColor     if elm.edgeColor !== void;
        fontShadowColor = elm.shadowColor if elm.shadowColor !== void;

        // 効果音指定
        enterse = elm.enterse if elm.enterse !== void;
        leavese = elm.leavese if elm.leavese !== void;
        clickse = elm.clickse if elm.clickse !== void;

        // 選択肢領域指定
        left   = elm.left if elm.left !== void;
        top    = elm.top  if elm.top  !== void;
        width  = elm.width if elm.width !== void;
        height = elm.height if elm.height !== void;
    }

    // 登録済み選択肢
    var selects = [];

    /**
     * コンストラクタ
     */
    function SelectLayer(window) {
        super.Layer(window, window.primaryLayer);
        setImageSize(parent.width, parent.height);
        setSizeToImageSize();
        hitType      = htMask;
        hitThreshold = 1;
        focusable = true;
        cursor = window.cursorDefault;
    }

    function finalize() {
        clear();
        super.finalize(...);
    }
    
    /**
     * ボタン消去
     */
    function clear() {
        for (var i=selects.count-1;i>=0;i--) {
            dm("消去" + i);
            var select = selects[i];
            invalidate select;
        }
        selects.clear();
    }
    
    /**
     * 選択肢を追加
     */
    function addSelect(elm) {

        var enterse  = elm.enterse !== void ? elm.enterse : enterse;
        var leavese  = elm.leavese !== void ? elm.leavese : leavese;
        var clickse  = elm.clickse !== void ? elm.clickse : clickse;

        var select = new SelectButtonLayer(window, this, elm.text);
        
        select.onenter = MessageLayer.createSoundExpression(elm.onenter, enterse, elm.entersebuf);
        select.onleave = MessageLayer.createSoundExpression(elm.onleave, leavese, elm.leavesebuf);
        select.onclick = MessageLayer.createSoundExpression(elm.exp,     clickse, elm.clicksebuf),
        select.storage = elm.storage;
        select.target  = elm.target;
        
        selects.add(select);
    }

    /**
     * 選択処理開始
     */
    function start() {
        var h = height / (selects.count + 1);
        var y = h;
        for (var i=0; i<selects.count;i++) {
            var select = selects[i];
            select.setPos(width/2 - select.width / 2, y - select.height / 2);
            y += h;
        }
        for (var i=0;i<selects.count; i++) {
            var select = selects[i];
            select.visible = true;
        }
        visible = true;
    }

    /**
     * 完了
     */
    function done() {
        visible = false;
        clear();
    }
    
    /**
     * 処理終了
     */
    function onButtonClick(select) {
        if (select !== void) {
            // 実行
            Scripts.eval(select.onclick) if select.onclick != '';
            if(select.storage != '' || select.target != '')	{
                window.lockMessageLayerSelProcess(); // 選択をロック
                if (window.getKeyState(VK_RETURN) || window.getKeyState(VK_SPACE) || window.getKeyState(VK_CONTROL))
                    window.hideMouseCursor();
                // キーボードによる操作の場合はマウスカーソルを隠す
                window.process(select.storage, select.target);
            }
        }
        window.hideSelect();
    }

    var invisibleByUser = false; // ユーザにより一時的に不可視
	var visibleBeforeUserInvisible  = false;

	function setHiddenStateByUser(b)
	{
		// ユーザが右クリックなどでメッセージレイヤを一時的に隠すときに
		// 呼ばれる
		if(b)
		{
			visibleBeforeUserInvisible = visible;
			invisibleByUser = true; // ユーザにより一時的に不可視
			visible = false;
		}
		else
		{
			invisibleByUser = false; // 可視
			visible = visibleBeforeUserInvisible;
		}
	}


}

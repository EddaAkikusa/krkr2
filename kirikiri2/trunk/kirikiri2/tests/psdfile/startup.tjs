Plugins.link("psd.dll");

function dm() {
	Debug.message(...);
}

var WIDTH=800;
var HEIGHT=600;

class MyWindow extends Window
{
	var base;
	var layers;

	var filemenu;
	var exitmenu;
	var openmenu;
	var openmenu2;
	var clearmenu;
	var psd;
	
	function MyWindow() {
		super.Window();
		menu.add(filemenu = new MenuItem(this, "ファイル(&F)"));
		filemenu.add(openmenu  = new MenuItem(this, "開く1(&O)"));
		filemenu.add(openmenu2  = new MenuItem(this, "開く2(&O)"));
		filemenu.add(clearmenu = new MenuItem(this, "消去(&E)"));
		filemenu.add(exitmenu  = new MenuItem(this, "終了(&X)"));

		setInnerSize(WIDTH, HEIGHT);

		// プライマリレイヤ
		base = new Layer(this, null);
		base.setSize(WIDTH, HEIGHT);
		base.fillRect(0,0,WIDTH,HEIGHT,0xff000000);
		add(base);

		layers = [];
	}

	function finalize() {
		clear();
		super.finalize();
	}

	function clear() {
		for (var i=0;i<layers.count;i++) {
			invalidate layers[i];
		}
		layers.clear();
		invalidate psd if psd !== void;
		psd = void;
	}
	
	function open(filename, mode) {
		clear();
		psd = new PSD();
		psd.load(filename);
		var basename = Storages.extractStorageName(filename);
		var count = psd.layer_count;
		for (var i=0;i<count;i++) {
			var info = psd.getLayerInfo(i);
			dm(@"${i}: id:${info.layer_id} name:${info.name}");
			if (info.layer_type == PSD.layer_type_normal) {
				var layer = new Layer(this, base);
				// レイヤをパス経由で読み込む
				if (mode) {
					// ファイルとしてロード
					try {
						layer.loadImages(@"psd://${basename}/id/${info.layer_id}.bmp");
						layer.left = info.left;
						layer.top  = info.top;
						layer.setSizeToImageSize();
						layer.opacity = info.opacity;
						layer.type    = info.type;
						layer.visible = info.visible;
					} catch(e) {
						dm(e.message);
					}
				} else {
					// ライブラリから直接取得
					psd.getLayerData(layer, i);
				}
				layers.add(layer);
			}
		}
	}
	
	function openDialog() {
		var fileDialog =%[
		filter : [ "PSDファイル(*.psd)|*.psd" ],
		title  :   "PSDファイルの読込み",
			];
		if (!Storages.selectFile(fileDialog)) return; // キャンセルで抜ける
		return fileDialog.name;
	}

	// 実行部
	function action(ev)	{
		if(ev.type == "onClick") {
			switch (ev.target) {
			case exitmenu:
				close();
				break;
			case openmenu:
			case openmenu2:
				{
					var filename = openDialog();
					if (filename !== void) {
						open(filename, ev.target == openmenu2);
					}
				}
				break;
			case clearmenu:
				clear();
				break;
			}
		}
	}
};

Debug.console.visible = true;
var win = new MyWindow();
win.visible = true;

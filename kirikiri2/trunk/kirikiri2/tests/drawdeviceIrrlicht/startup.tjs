Plugins.link("krrlicht.dll");
Storages.addAutoPath("sample/");
Storages.addAutoPath("../layerExDraw/");
Storages.addAutoPath("../layerEx/");

Scripts.execStorage("UpdateRegion.tjs");
Scripts.execStorage("AffineLayer.tjs");

var WIDTH=800;
var HEIGHT=450;

/**
 * 初期化処理サンプル
 */
function initData(smgr) {
	smgr.ambientColor = 0xffffff;
	smgr.loadScene("example.irr");
	smgr.addLightSceneNode(null, [0,0,0], 0xffffff, 100, 1);
	smgr.addCameraSceneNode(null, [0,0,-40], [0,0,0], 2);
}

/**
 * ベースレイヤ
 * Irrlicht 的にテクスチャとして配置可能なレイヤとして機能する
 */
class BaseLayer extends Layer
{
	var layer;
	
	function BaseLayer(win, width, height) {
		super.Layer(win, null);

		setSize(width, height);
		fillRect(0,0,width,height,0);
		
		// 表示レイヤ
		layer = new AffineLayer(window, this);
		layer.loadImages("test.png");
		layer.setSizeToImageSize();
		layer.visible = true;
	}

	function finalize() {
		invalidate layer;
	}
}

/**
 * DrawDevice用のテスト
 * 吉里吉里の表示系そのものが Irrlicht ベースになる
 */
class DrawDeviceWindow extends Window
{
	var initTrigger;
	var base;
	var base2;
	var base3;

	/**
	 * コンストラクタ
	 */
	function DrawDeviceWindow() {
		super.Window();
		drawDevice = new Irrlicht.DrawDevice(WIDTH, HEIGHT);
		//drawDevice.zoomMode = false;
		
		showScrollBars = false;
		setInnerSize(WIDTH, HEIGHT);
		caption = "drawdevice のテスト";
		
		// 1枚目のプライマリレイヤ
		// 解像度半分
		base = new BaseLayer(this, WIDTH/2, HEIGHT/2);
		add(base);

		// 2枚目のプライマリレイヤ
		base2 = new BaseLayer(this, WIDTH, HEIGHT);
		add(base2);

		// 3枚目のプライマリレイヤ
		base3 = new BaseLayer(this, WIDTH*2, HEIGHT*2);
		add(base3);

		// 画面更新用トリガ
		// コンストラクタの段階ではまだウインドウ実体が
		// 存在してない場合ためトリガをつかって処理する必要がある
		initTrigger = new AsyncTrigger(init, "");
		initTrigger.cached = true;
		initTrigger.mode = atmExclusive;
		initTrigger.trigger();
	}

	function init() {
		initData(drawDevice.sceneManager);
	}
	
	function onKeyDown(key, shift) {
		if(key == VK_ESCAPE) {
			close();
		} else if(key == VK_TAB) {
			fullScreen = !fullScreen;
			// フルスクリーン切り替え後の復帰時も同様 XXX
			// これは将来的には自動処理にしたい
			initTrigger.trigger();
		}
	}
};

class IrrlichtLayer extends Layer{

	var device;

	function IrrlichtLayer(win, par, width, height) {
		super.Layer(win, par);
		device = new Irrlicht.SimpleDevice(win, width, height);
		setSize(width, height);
	}

	function onPaint() {
		super.onPaint(...);
		device.updateToLayer(this);
	}
};

/**
 * レイヤ描画のテスト。
 * device.updateToLayer() でレイヤに対して描画結果がコピーされる。
 */
class SimpleDeviceWindow extends Window
{
	var base;
	var device;
	var initTrigger;

	/**
	 * コンストラクタ
	 */
	function SimpleDeviceWindow() {
		super.Window();

		showScrollBars = false;
		setInnerSize(WIDTH, HEIGHT);
		caption = "レイヤ描画のテスト";
		
		// プライマリレイヤ
		base = new IrrlichtLayer(this, null, WIDTH, HEIGHT);
		add(base);
		
		// 画面更新用トリガ
		initTrigger = new AsyncTrigger(init, "");
		initTrigger.cached = true;
		initTrigger.mode = atmExclusive;
		initTrigger.trigger();

		// 更新処理
		System.addContinuousHandler(update);
	}

	function finalize() {
		System.removeContinuousHandler(update);
		invalidate device;
		invalidate initTrigger;
	}

	function init() {
		initData(base.device.sceneManager);
	}
	
	// レイヤに対して描画更新する
	function update(tick) {
		base.update();
	}

	function onKeyDown(key, shift) {
		if(key == VK_ESCAPE) {
			close();
		} else if(key == VK_TAB) {
			fullScreen = !fullScreen;
			initTrigger.trigger();
		}
	}
};


class CaptureWindow extends Window
{
	var base;
	var target;
	
	function CaptureWindow(target) {
		super.Window();
		setInnerSize(WIDTH, HEIGHT);
		base = new Layer(this, null);
		base.setSize(WIDTH, HEIGHT);
		add(base);
		this.target = target;
	}

	function onKeyDown(key, shift) {
		if(key == VK_ESCAPE) {
			close();
		} else if(key == VK_SPACE) {
			base.copyIImage(target.videoDriver.createScreenShot());
		}
	}
};

var win = new DrawDeviceWindow();
win.visible = true;

var win2 = new SimpleDeviceWindow();
win2.visible = true;

//var capwin = new CaptureWindow(win.drawDevice);
//capwin.visible = true;

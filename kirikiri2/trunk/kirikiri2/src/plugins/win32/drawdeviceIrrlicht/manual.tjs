/**
 * Irrclicht DrawDevice Class
 */
class Irrlicht {

	// -----------------------------------------------------------------------------
	// データ保持用クラス
	// -----------------------------------------------------------------------------
	
	class SColor;
	class SColorf;
	class position2di;
	class position2df;
	class dimension2di;
	class dimension2df;
	class vector2df;
	class vector3df;

	// -----------------------------------------------------------------------------
	//
	// -----------------------------------------------------------------------------

	class ISceneNode;
	class IAnimatedMeshSceneNode;
	class IBoneSceneNode;
	class ICameraSceneNode;
	class IDummyTransformationSceneNode;
	class ILightSceneNode;
	class IMeshSceneNode;
	class IParticleSystemSceneNode;
	class ITerreinSceneNode;
	class ITextSceneNode;

	/**
	 * 画像情報クラス
	 */
	class IImage {
	};

	// -----------------------------------------------------------------------------
	//
	// -----------------------------------------------------------------------------
	
	/**
	 * ドライバ機能インターフェース
	 * DrawDevice または Window のプロパティから参照する必要があります
	 * ※ new しても正常動作しません。
	 */
	class IVideoDriver {
		/**
		 * スクリーンショットの生成
		 * @return スクリーンショット画像(IImage)
		 * ※ウインドウの領域からキャプチャーしてるようなので上に
		 * 別のウインドウが乗っているとそのままキャプチャーされます
		 */
		function createScreenShot();
	};

	/**
	 * シーンマネージャ機能インターフェース
	 * DrawDevice または Window のプロパティから参照する必要があります
	 * ※ new しても正常動作しません。
	 */
	class ISceneManager {
		/**
		 * シーンファイルの読み込み
		 * @param scene シーンファイル
		 */
		function loadScene(scene);

		property ambientLight; //< 環境光指定

		/**
		 * 光源の設定
		 * @param parent 親ノード(nullだとルート)
		 * @param position 位置指定
		 * @param color 色指定
		 * @param radius 範囲指定
		 * @param id ID指定
		 * @return 光源情報(ILightSceneNode)
		 */
		function addLightSceneNode(parent, position, color, radius, id);
		
		/**
		 * カメラの設定
		 * @param parent 親ノード(nullだとルート)
		 * @param position 位置指定
		 * @param lookat 参照位置
		 * @param id ID指定
		 * @return カメラ情報(ICameraSceneNode)
		 */
		function addCameraSceneNode(parent, position, lookat, id);
	}

	/**
	 * GUI環境機能インターフェース
	 * DrawDevice または Window のプロパティから参照する必要があります
	 * ※ new しても正常動作しません。
	 */
	class IGUIEnvironment {
	};

	// -----------------------------------------------------------------------------
	//　Irrlicht 基本機能クラス
	// -----------------------------------------------------------------------------
	
	/**
	 * 共通機能分（実際にはこのクラスはありません）
	 */
	class Base {
		property videoDriver; //< ドライバ(IVideoDriverクラス)。読み出し専用
		property sceneManager; //< シーンマネージャ(ISceneManagerクラス)。読み出し専用
		property guiEnvironment; //< GUI環境（IGUIEnvironmentクラス）。読み出し専用
	};
	
	/**
	 * 吉里吉里用 drawdevice クラス
	 *
	 * Irrlicht の画面上に吉里吉里プライマリレイヤ(複数)を配置可能な drawDevice です
	 * Irrlicht シーン画面 → 吉里吉里プライマリレイヤ（生成順）→ Irrlicht GUI の
	 * 順で描画が行われます。マウスイベントは、Irrlicht GUI および、最初につくった
	 * プライマリレイヤに対して配信されます。
	 *
	 * プライマリレイヤは、Irrlicht から "krkr0", "krkr1", ... という名前のテクスチャ
	 * として参照可能で、吉里吉里の描画内容が常時反映された状態になってます
	 */
	class DrawDevice extends Base {

		property interface; //< drawdevice 情報（内部参照用）。読み出し専用
		
		/**
		 * コンストラクタ
		 * @param width 描画領域横幅
		 * @param width 描画領域縦幅
		 * 縦幅と横幅は従来的機構での primaryLayer の width/height に相当するものです。
		 * 作成されたプライマリレイヤ(複数)はすべてここで指定した領域に対して
		 * 引き延ばし表示されます。
		 * 例:
		 *     drawDevice = new Irrlicht.DrawDevice(800,400);
		 *     base1 = new Layer(this, null); base1.setSize(800,400); // 画面と同じ解像度
		 *     base2 = new Layer(this, null); base1.setSize(400,200); // 画面の半分の解像度
		 *     base3 = new Layer(this, null); base1.setSize(800,200); // 縦だけ解像度半分
		 */
		function DrawDevice(width, height);

		property width;  //< 描画領域横幅
		property height; //< 描画領域縦幅
		
		/**
		 * 描画領域の設定
		 * @param width 描画領域横幅
		 * @param width 描画領域縦幅
		 */
		function setSize(width, height);
		
		/**
		 * 拡大モード: 初期値は true
		 * true: Irrlichtを初期指定した描画領域で処理して画面への表示時に拡大縮小します
		 * false: Irrlichtを実際の画面上の解像度で処理します
		 * false にした場合、Irrlicht 側の座標系がフルスクリーン化した時や、
		 * Window.setZoom した時に変化するので注意が必要です。
		 */
		property zoomMode;

		/*
		 * プライマリレイヤの標準の visible
		 * プライマリレイヤを生成時に表示するかどうかを指定します。
		 */
		property defaultVisible;
		
		/**
		 * プライマリレイヤの表示状態の指定
		 * @param id プライマリレイヤの登録ID
		 * @param visible 表示状態
		 */
		function setVisible(id, visible);
		
		/**
		 * プライマリレイヤの表示状態の指定
		 * @param id プライマリレイヤの登録ID
		 * @return visible 表示状態
		 */
		function getVisible(id);
	};

	/**
	 * 吉里吉里の子ウインドウとして機能するIrrlicht
	 */
	class Window extends Base {

		/**
		 * コンストラクタ
		 * @param parent 親になるウインドウ
		 * @param left 配置位置X
		 * @param top 配置位置Y
		 * @param width 配置サイズ
		 * @param height 配置サイズ
		 */
		function Window(parent, left, top, width, height);

		property left; //< 配置位置X
		property top;  //< 配置位置Y
		property width; //< 横幅
		property height; //< 縦幅

		/**
		 * 配置位置指定
		 * @param left 配置位置X
		 * @param top 配置位置Y
		 */
		function setPos(left, top);

		/**
		 * 配置サイズ指定
		 * @param width 配置サイズ
		 * @param height 配置サイズ
		 */
		function setSize(width, height);
	}	
};


/**
 * レイヤに対する機能拡張
 */
class Layer {
	/**
	 * Irrlicht.IImage から画像をコピー。レイヤのサイズは元のIImageのサイズになります
	 * @param src Irrlicht.IImage 画像
	 */
	function copyIImage(src);
}

/**
 * Scripts クラスへの squirrel 機能拡張
 */
class Scripts {

	/**
	 * Squirrel スクリプトの実行
	 * @param text スクリプトが格納された文字列
	 * @return スクリプトの実行結果。プリミティブな値はそのまま変換されて、
	 * また、クラスは TJS2 の iTJSDispatch にラッピングされた状態で返ります。
	 */
	function execSQ(text);

	/**
	 * Squirrel スクリプトの実行
	 * @param filename スクリプトが格納されたファイル
	 * @return スクリプトの実行結果
	 */
	function execStorageSQ(filename);

	/**
	 * Squirrel グローバルメソッドの呼び出し
	 * @param name メソッド名
	 * @param ... 引数
	 * @return スクリプトの実行結果。プリミティブな値はそのまま変換されて、
	 * また、クラスは TJS2 の iTJSDispatch にラッピングされた状態で返ります。
	 */
	function callSQ(name, ...);
	
	/**
	 * Squirrel スクリプトのコンパイル処理
	 * @param text スクリプトが格納された文字列
	 * @store store バイナリクロージャ格納先ファイル
	 * @return エラー文字列または void
	 */
	function compileSQ(text, store)

	/**
	 * Squirrel コードのコンパイル処理
	 * @param コンパイル元ファイル
	 * @store バイナリクロージャ格納先ファイル
	 * @return エラー文字列または void
	 */
	function compileStorageSQ(filename, store)
	
	/**
	 * データを Squirrel 形式で保存する。このファイルは "return" を先頭にもつので
	 * dofile() で読みだすことができます
	 * @param filename 格納先ファイル
	 * @param obj 保存対象オブジェクト
	 * @param utf8 出力エンコーディング指定。true なら UTF-8、falseなら現在のコードページ
	 * @param newline 改行コード 0:CRLF 1:LF
	 */
    function saveSQ(filename, obj, utf8=false, newline=0);

    /**
	 * データを Squirrel 形式の文字列に変換する
	 * @param obj オブジェクト
	 * @param newline 改行コード 0:CRLF 1:LF
	 * @return Squirrel 形式のテキスト
	 */
	function toSQString(obj, newline=0);

    /**
	 * Squirrel のグローバル空間に TJS2 のオブジェクト/関数を登録する
	 * @param name 登録名称
	 * @param obj オブジェクト（省略した場合は名称で参照されるオブジェクト）
	 */
	function registSQ(name, obj);

    /**
	 * Squirrel のグローバル空間に登録されたオブジェクトを解放する
	 * @param name 登録名称
	 */
	function unregistSQ(name);

	/**
	 * Squirrel のグローバル空間に TJS2のクラスをクラスとして登録
	 * @param className squirrel側のクラス名
	 * @param tjsClassName TJS側のクラス名を継承関係と逆順に列挙した配列、またはクラス名。省略時は className と同じ
	 */
	function registClassSQ(className, tjsClassName=null);
}

/**
 * Squirrel のグローバルファンクションを直接呼び出すためのクラス
 */
class SQFunction {

	/**
	 * コンストラクタ
	 * @param func squirrel のグローバルな関数の名前
	 */
	function SQFunction(func);

    /**
	 * 関数を呼び出す
	 * @param 引数はそのまま変換してわたされます
	 * @return 関数の返り値
	 */
    function call();
};

/**
 * Squirrel 専用の Continuous ハンドラを維持するためのクラス
 */
class SQContinuous {

	/**
	 * コンストラクタ
	 * @param func squirrel のグローバルな関数 func(tick){} の名前
	 * ※tick は SQInteger にキャストされてから呼び出されます
	 */
	function SQContinuous(func);

	/**
	 * 呼び出しを開始する
     */
 	function start();
    
    /**
	 * 呼び出しを停止する
	 */
    function stop();
};

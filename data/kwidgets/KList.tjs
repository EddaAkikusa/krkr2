//
// $Id: KList.tjs,v 1.7 2007/09/14 17:13:00 m2 Exp $
//


/*----------------------------------------------------------------------
 * リスト項目リネーム時のテキストエディット
 ----------------------------------------------------------------------*/
class KLabelEdit extends KTextInput {
  var item;
  var minLabelWidth = 1;

  function KLabelEdit(item) {
    this.item = item;
    minLabelWidth = item.minLabelWidth;

    // リストに収まる範囲の大きさでテキストエディットを作成。
    var rootRect = item.root.viewingRect;
    var rect = item.labelRect;
    rect.left += item.left - 5;
    rect.top += item.top - 3;
    rect.width = rootRect.width - rect.left + rootRect.left;
    rect.height = item.size - item.root.spaceVertical + 8;
    super.KTextInput(item.root.window,
                     rect.width, rect.height,
                     item.labelTextType);

    parent = item.root;
    fontFace = item.root.fontFace;

    setPos(rect.left, rect.top);
    value = item.label;

    text.focus();
    text.onWindowDeactivate = this.onWindowDeactivate;
  }

  function finalize {
    super.finalize(...);
  }

  // フォーカスが外れたらキャンセル扱い
  function onChildBlur {
    super.onChildBlur(...);
    text.cancelValue();
  }

  // ENTER押したら内容を反映
  function onEnter {
    if (! item.isAcceptRename(value))
      return;
    if (value.length >= minLabelWidth) {
      var oldLabel = item.label;
      item.label = value;
      item.onRename(oldLabel, value);
    }
    asyncCaller.call(parent.removeLabelEdit);
  }

  // キャンセルしたら無かったことに
  function onCancel {
    asyncCaller.call(parent.removeLabelEdit);
  }

  // スクロールされちゃまずいんでホイールは食う。
  function onMouseWheel {
  }

  function onWindowDeactivate {
    text.cancelValue();
  }    
};   
    

/**----------------------------------------------------------------------
 * リストビュー
 ----------------------------------------------------------------------*/
class KList extends KVirtualWidget
{
  var isRoot = true;
  var depth = -1;
  var root;
  var slideWidth = 12;
  var drawItemList = [];
  var treeWidth, treeHeight;
  var childList = [];
  var focusedItem = void;
  var focusedItemRect = [ 0, 0, 0, 0 ];
  var labelEdit = void;
  var labelTextType = TEXT_SYMBOL;
  var marginalWidth, marginalHeight;
  var _focusOnSelect;
  var iconDeposit;
  var curDragTargetItem;
  var curDragTargetItemAcceptPacket = false;
  var curPointItem = void;
  var relocateRequired = false;
  var reconstructRequired = false;
  var resizeRequired = false;
  var _multipleSelection = false;

  /*------------------------------
   * リストビュー
   *
   * 入れ子が可能なリストビュー。
   * リスト本体である KList と、リストアイテム KListItem から鳴る。
   *
   * KList は KWidget を継承したクラスだが、KListItem は KWidget では無い。
   * メモリ節約の観点から、KListItem は画面に表示される時のみ
   * 内部的に proxy widget を作る設計になっている。
   * だが、マウス関連やドラッグ＆ドロップ関連のイベントのほとんどは
   * proxy widget から KListItem に転送されるため、 KListItem を
   * KWidget 継承クラスとみなして扱っても実質的に問題は無い。
   *
   * @param window ウィンドウ
   * @param name 名前
   ------------------------------*/
  function KList(window, name = "") {
    super.KVirtualWidget(window, name);
    focusable = window.defaultFocusable;
    hitThreshold = 0;
    root = this;
    marginalWidth = marginalHeight = 1000;
    setMinMaxSize(0, 0, marginalWidth, marginalHeight);
    _focusOnSelect = true;
    iconDeposit = %[];
  }

  /*------------------------------
   * ファイナライザ
   ------------------------------*/
  function finalize {
    discardArray(childList);
    super.finalize(...);
  }

  /**------------------------------
   * 最低限のサイズを設定する
   *
   * リスト項目が少なくても最低限広げられる
   * 「最低最大サイズ」を決定する。
   * デフォルト値は1000x1000
   *
   * @param w 幅
   * @param h 高さ
   ------------------------------*/
  function setMarginalSize(w, h) {
    marginalWidth = w;
    marginalHeight = h;
    requireResize();
  }

  /**------------------------------
   * 子アイテムを追加する
   *
   * @param item アイテム
   ------------------------------*/
  function add(item) {
    item.depth = -1;
    item.parent = this;
    childList.add(item);
    requireReconstruct();
  }

  /**------------------------------
   * 子アイテムを挿入する
   *
   * @param index インデックス
   * @param item アイテム
   ------------------------------*/
  function insert(index, item) {
    item.depth = -1;
    item.parent = this;
    childList.insert(index, item);
    requireReconstruct();
  }

  /**------------------------------
   * 子アイテムを削除する
   * 
   * @param item アイテム
   * @param doInvalidate invalidateするかどうか
   ------------------------------*/
  function remove(item, doInvalidate = true) {
    if (! (item isvalid))
      return void;

    if (item == root.focusedItem
        || (root.focusedItem && item.isAncestorOf(root.focusedItem))) {
      root.focusItem(void);
      var i = item.index;
      childList.remove(item);
      if (childList.count != 0) {
        if (i > childList.count - 1)
          i--;
        childList[i].select();
      } 
    } else {
      childList.remove(item);
    }

    item._root = void;
    item.parent = void;

    if (doInvalidate)
      invalidate item;

    requireReconstruct();
  }

  /**------------------------------
   * 子アイテムを全て削除する
   *
   * @param doInvalidate 取り除いた子ウィジェットを無効化するか
   ------------------------------*/
  function removeAll(doInvalidate = true)
  {
    while(childList.count > 0)
      {
        var child = childList[0];
        childList.remove(child);
        if(doInvalidate)
          {
            invalidate child;
          }
        else
          {
            child._root = void;
            child.parent = void;
          }
      }
    focusedItem = void;
    requireReconstruct();
  }

  /**------------------------------
   * 子アイテムをカウントする
   * 
   * @return 子アイテム数
   ------------------------------*/
  property childCount {
    getter {
      return childList.count;
    }
  }

  /**------------------------------
   * 子アイテムを参照する
   *
   * @param index インデックス
   * @return 子アイテム
   ------------------------------*/
  function childAt(index) {
    return childList[index];
  }

  /**------------------------------
   * 子孫アイテムから特定の名前を持った子アイテムを捜す
   * 
   * @param name アイテムの名前
   * @return アイテム
   ------------------------------*/
  function find(name) {
    if (this.name === name)
      return this;
    for (var i = 0; i < childList.count; i++) {
      var child = childList[i];
      var widget = child.find(name);
      if (widget)
        return widget;
    }
    return void;
  }

  /*------------------------------
   * フォーカスアイテムのインデックス
   ------------------------------*/
  property focusedItemIndex {
    getter {
      return drawItemList.find(focusedItem);
    }
  }

  /*------------------------------
   * フォーカスが変更された時に呼ばれる
   *
   * @param focusedItem セレクション
   ------------------------------*/
  function onFocusItem(item) {
  }

  // 祖先であるかどうか判定
  function isAncestorOf(item) {
    for (; item != root; item = item.parent) {
      if (item == this)
        return true;
    }
    return false;
  }

  // 子孫であるかどうか判定
  function isDescendantOf(item) {
    return item.isAncestorOf(this);
  }

  /**------------------------------
   * 子孫ウィジェットの一覧
   ------------------------------*/
  property descendants {
    getter {
      var result = [];
      for (var i = 0; i < childList.count; i++) {
        var child = childList[i];
        result.add(child);
        var childDescendants = child.descendants;
        for (var j = 0; j < childDescendants.count; j++)
          result.add(childDescendants[j]);
      }
      return result;
    }
  }

  /**------------------------------
   * マルチセレクションの有効・無効
   ------------------------------*/
  property multipleSelection {
    getter {
      return _multipleSelection;
    }
    setter (v) {
      _multipleSelection = v;
    }
  }

  /**------------------------------
   * セレクト時にフォーカスを移動するかどうか
   *
   * @param v セレクト時にフォーカス時を移動するかどうか
   * @return セレクト時にフォーカス時を移動するかどうか
   ------------------------------*/
  property focusOnSelect {
    getter {
      return _focusOnSelect;
    }
    setter(v) {
      _focusOnSelect = v;
    }
  }

  // アイコンをロードしてキャッシュする
  function findIcon(filename) {
    if (typeof(iconDeposit[filename]) == "undefined") {
      var layer = iconDeposit[filename] = new global.Layer(window, this);
      layer.loadImages(filename);
      layer.setSizeToImageSize();
    }
    return iconDeposit[filename];
  }

  // y座標からアイテムを検索
  function findItem(y) {
    var index = findItemIndex(y);
    if (index < 0)
      return void;
    else
      return drawItemList[index];
  }

  // y座標からアイテムのインデックスを検索
  function findItemIndex(y, includeTail = false) {
    var begin, end, mid;
    begin = 0, end = drawItemList.count;

    while (begin < end) {
      mid = int((begin + end) / 2);
      var item = drawItemList[mid];
      if (y < item.top) 
        end = mid;
      else if (y >= item.top + item.size)
        begin = mid + 1;
      else {
        return mid;
      }
    }

    return includeTail ? (drawItemList.count - 1) : -1;
  }

  // アイテムのフレームを描画
  function drawFrame(item) {
    var frameColor;
    var frameAlpha;
    if (item == curDragTargetItem
        && curDragTargetItemAcceptPacket) {
      frameColor = 0xFF0000;
      frameAlpha = 128;
    } else if (focused && item.focused) {
      frameColor = WIN_SELECTED & 0xFFFFFF;
      frameAlpha = item == curPointItem ? 128 : 96;
    } else if (! focused && item.focused) {
      frameColor = WIN_BG & 0xFFFFFF;
      frameAlpha = 128;
    } else if (item === curPointItem) {
      frameColor = WIN_SELECTED & 0xFFFFFF;
      frameAlpha = 64;
    } else {
      return;
    }
    colorRect(1, item.top, width - 2, 1, frameColor, frameAlpha);
    colorRect(1, item.top + item.height - 1, width - 2, 1, frameColor, frameAlpha);
    colorRect(0, item.top + 1, 1, item.height - 2, frameColor, frameAlpha);
    colorRect(width - 1, item.top + 1, 1, item.height - 2, frameColor, frameAlpha);
    colorGradientRectUD(1, item.top + 1, width - 2, item.height - 2, frameColor, frameColor | (int(frameAlpha / 2) << 24));
  }

  // 領域内のアイテムを描画
  function onDraw(left, top, width, height) {
    fillRect(left, top, width, height, WIN_WHITE);
    if (drawItemList.count) {
      var from = findItemIndex(top, true);
      var to = findItemIndex(top + height - 1, true);
      
      for (var i = from; i <= to; i++) {
        var item = drawItemList[i];
        item.onDraw(...);
        drawFrame(item);
      }
    }
  }

  function requireResize {
    resizeRequired = true;
    update();
  }

  function requireRelocate {
    relocateRequired = true;
    resizeRequired = true;
    update();
  }

  function requireReconstruct {
    reconstructRequired = true;
    relocateRequired = true;
    resizeRequired = true;
    update();
  }

  // 選択アイテムが閉じてしまったら
  // 上階層のアイテムを選択し直す
  function invalidateSelectio() {
    if (focusedItem !== void) {
      if (focusedItem isvalid) {
        if (! focusedItem.visible) {
          var newFocusedItem = focusedItem;
          while (! newFocusedItem.visible)
            newFocusedItem = newFocusedItem.parent;
          focusItem(newFocusedItem);
        }
      } else {
        focusItem(void);
      }
    }
  }

  // 描画更新
  function onPaint() { 
    var i;

    // ツリーを再構築
    if (reconstructRequired) {
      reconstructItems();
    }
    // ツリーサイズを再計算
    if (relocateRequired) {
      relocateItems();
    }

    // 選択アイテムが閉じてしまったら
    // 上階層のアイテムを選択し直す
    invalidateSelectio();

    // サイズを再設定
    if (resizeRequired) {
      setMinMaxSize(treeWidth, treeHeight,
                    Math.max(marginalWidth, treeWidth),
                    Math.max(marginalHeight, treeHeight));
    }

    // 選択アイテムの背景色を変更
    redrawAll();

    // フラグリセット
    relocateRequired = false;
    reconstructRequired = false;
    resizeRequired = false;
  }

  // アイテムの再構築
  function reconstructItems() {
    var i, num, child, v, item;

    // 既存アイテムは一旦全て不可視に設定する
    for (var i = 0; i < drawItemList.count; i++)
      if (drawItemList[i] isvalid)
        drawItemList[i].visible = false;

    // ツリーをたどって、表示するアイテムを表示し直す
    drawItemList = [];

    var stack = [];
    
    i = 0;
    item = this;
    num = item.childList.count;
    v = true;

    var sum = 0;

    if (num == 0)
      return;
    for (;;) {
      child = item.childList[i];
      if (v) {
        child.visible = true;
        drawItemList.add(child);
      } if (child.hasChild
            && child.opened) {
        if (i + 1 < num)
          stack.add([ item, i + 1, num, v ]);
        item = child;
        i = 0;
        num = item.childList.count;
        v = v && item.opened;
        continue;
      }
      if (++i < num)
        continue;
      if (stack.count == 0)
        break;
      var a = stack[stack.count - 1];
      stack.erase(stack.count - 1);
      item = a[0];
      i = a[1];
      num = a[2];
      v = a[3];
    }
  }

  // アイテムのサイズ再配置
  function relocateItems() {
    treeWidth = 0;
    treeHeight = 0;

    for (var i = 0; i < drawItemList.count; i++) {
      var item = drawItemList[i];
      item.locate(item.depth * slideWidth, treeHeight);
      treeWidth = Math.max(treeWidth,
                           item.width + item.depth * slideWidth);
      treeHeight += item.height;
    }
  }      

  // 特定のアイテムを選択する
  function focusItem(item) {
    if (focusedItem === item)
      return;

    // 祖先アイテムを参照
    var prevAncestors = [], curAncestors = [];
    if (focusedItem !== void) {
      prevAncestors = focusedItem.ancestors;
      prevAncestors.insert(0, focusedItem);
    }
    if (item !== void) {
      curAncestors = item.ancestors;
      curAncestors.insert(0, item);
    }

    // 祖先アイテムが共通の部分に関しては、更新を呼ばない
    while (prevAncestors.count 
           && curAncestors.count
           && prevAncestors[prevAncestors.count - 1] === curAncestors[curAncestors.count - 1]) {
      prevAncestors.erase(prevAncestors.count - 1);
      curAncestors.erase(curAncestors.count - 1);
    }

    var prevFocusedItem = focusedItem;
    if (prevFocusedItem !== void) {
      prevFocusedItem.onBlur();
      for (var i = 0; i < prevAncestors.count; i++)
        prevAncestors[i].onDescendantBlur();
    }
    focusedItem = void;
    if (prevFocusedItem !== void)
      prevFocusedItem.redraw();

    focusedItem = item;
    if (focusedItem === void) {
      return;
    }
    focusedItem.redraw();
    drawFocusedItem();
    if (focusedItem !== void) {
      for (var i = curAncestors.count - 1; i >= 0; i--)
        curAncestors[i].onDescendantFocus();
      focusedItem.onFocus();
    }

    if (_focusOnSelect)
      focus();

    onFocusItem(focusedItem);
  }

  // 選択アイテムの背景を選択色で描画する
  function drawFocusedItem {
    if (focusedItem !== void)
      focusedItem.redraw();
  }

  // フォーカス時反応
  function onFocus {
    // セレクション再描画
    drawFocusedItem();
  }

  // フォーカス失った時の反応
  function onBlur {
    // セレクション再描画
    drawFocusedItem();
  }

  // セレクションを注視する
  function seeFocusedItem {
    asyncCaller.callOnce(this.doSeeFocusedItem, this);
  }

  function doSeeFocusedItem {
    if (focusedItem !== void) {
      noticeRect(focusedItem.left, focusedItem.top, 
                 focusedItem.width, focusedItem.height);
    }
  }

  // マウス押されたらその位置のアイテムをセレクト
  function onMouseDown(x, y, button, shift) {
    super.onMouseDown(...);
    if (button == mbMiddle)
      return;
    var index = findItemIndex(y);
    if (index >= 0) {
      focusItem(drawItemList[index]);
      focusedItem.onMouseDown(x, y - focusedItem.top, button, shift);
    }
    focus();
  }

  function onMouseUp(x, y, button, shift) {
    super.onMouseUp(...);
    var item = findItem(y);
    if (item !== void)
      item.onMouseUp(x, y - item.top, button, shift);
  }

  function onMouseMove(x, y, shift) {
    super.onMouseMove(...);
    var item = findItem(y);

    if (item !== curPointItem) {
      var prevPointItem = curPointItem;
      curPointItem = item;
      if (prevPointItem !== void) {
        prevPointItem.onMouseLeave();
        prevPointItem.redraw();
      }
      if (curPointItem !== void) {
        curPointItem.onMouseEnter();
        curPointItem.redraw();
      }
    }

    if (item !== void) {
      hint = item.hint;
      status = item.status;
      item.onMouseMove(x, y - item.top, shift);
    } else {
      hint = "";
      status = "";
    }
  }

  function onMouseLeave() {
    var prevPointItem = curPointItem;
    curPointItem = void;
    if (prevPointItem !== void) {
      prevPointItem.onMouseLeave();
      prevPointItem.redraw();
    }
  }

  function onDoubleClick(x, y) {
    if (focusedItem !== void) {
      focusedItem.onDoubleClick(x, y - focusedItem.top);
    }
  }

  function onDragEnter(x, y, shift) {
    if (focusedItem !== void) {
      focusedItem.onDragEnter(x - focusedItem.left, y - focusedItem.top, shift);
    }
  }

  function onDragMove(x, y, shift) {
    if (focusedItem !== void) {
      focusedItem.onDragMove(x - focusedItem.left, y - focusedItem.top, shift);
    }
  }
  
  function onDragLeave(x, y, shift) {
    if (focusedItem !== void) {
      focusedItem.onDragLeave(x, y - focusedItem.top, shift);
    }
  }

  function isPacketAcceptable(packet) {
    return true;
  }

  function onPacketMove(x, y, packet, shift) {
    var prevDragTargetItem = curDragTargetItem;
    var prevDragTargetItemAcceptPacket = curDragTargetItemAcceptPacket;
    curDragTargetItem = findItem(y);
    if (curDragTargetItem !== prevDragTargetItem) {
      curDragTargetItemAcceptPacket = false;
      if (prevDragTargetItemAcceptPacket) {
        prevDragTargetItem.onPacketLeave();
        prevDragTargetItem.redraw();
      }
      if (curDragTargetItem !== void) {
        curDragTargetItemAcceptPacket = curDragTargetItem.isPacketAcceptable(packet);
        if (curDragTargetItemAcceptPacket) {
          curDragTargetItem.onPacketEnter();
          curDragTargetItem.redraw();
        }
      }
    }
    if (curDragTargetItemAcceptPacket)
      curDragTargetItem.onPacketMove(x, y - curDragTargetItem.top, packet, shift);
  }

  function onPacketLeave(x, y, packet, shift) {
    if (curDragTargetItem !== void
        && curDragTargetItemAcceptPacket) {
      curDragTargetItemAcceptPacket = false;
      curDragTargetItem.onPacketLeave();
      curDragTargetItem.redraw();
      curDragTargetItem = void;
    }
  }

  function isPacketConfirmed(x, y, packet, shift) {
    return curDragTargetItemAcceptPacket;
  }

  function onPacketDrop(x, y, packet, shift) {
    var target = findItem(y);
    target.onPacketDrop(x - target.left, y - target.top, packet, shift);
  }

  function onPacketCancel(packet) {
    if (focusedItem !== void) {
      focusedItem.onPacketCancel(packet);
    }
  }

  // キー反応
  function onKeyDownSuper(key, shift) {
    if (key == VK_DOWN
        || key == VK_UP
        || key == VK_RIGHT
        || key == VK_LEFT)
      return;
    else
      super.onKeyDown(...);
  }

  function onKeyDown(key, shift) {
    if (focusedItem === void) {
      super.onKeyDown(...);
      return;
    }
    var focusedItemIndex = this.focusedItemIndex;
    if (key == VK_DOWN
        && ! (shift & (ssAlt | ssCtrl | ssShift))) {
      if (focusedItemIndex + 1 < drawItemList.count) {
        focusItem(drawItemList[focusedItemIndex + 1]);
        seeFocusedItem();
      }
    } else if (key == VK_UP
               && ! (shift & (ssAlt | ssCtrl | ssShift))) {
      if (focusedItemIndex > 0) {
        focusItem(drawItemList[focusedItemIndex - 1]);
        seeFocusedItem();
      }
    } else if (key == VK_RIGHT
               && ! (shift & (ssAlt | ssCtrl | ssShift))) {
      if (focusedItem.childList.count == 0) {
        return;
      }
      if (focusedItem.opened) {
        focusItem(focusedItem.childList[0]);
      } else {
        focusedItem.opened = true;
      }
    } else if (key == VK_LEFT
               && ! (shift & (ssAlt | ssCtrl | ssShift))) {
      if (focusedItem.childList.count != 0
          && focusedItem.opened) {
        focusedItem.opened = false;
        seeFocusedItem();
      } else if (focusedItem.parent != root) {
        focusItem(focusedItem.parent);
        seeFocusedItem();
      }
    } else if (key == VK_F2) {
      renameFocusedItem();
    } else {
      focusedItem.onKeyDown(...);
    }
  }

  // キー反応
  function onKeyPress(key) {
    switch (key) {
    case '+': {
      focusedItem.opened = true;
      break;
    }
    case '-': {
      focusedItem.opened = false;
      break;
    }
    case "*": {
      focusedItem.openDescendants();
      focusedItem.opened = true;
      break;
    }
    }
  }

  // 選択中のアイテムをリネームする
  function renameFocusedItem {
    if (focusedItem !== void
        && focusedItem.labelEditable) {
      seeFocusedItem();
      labelEdit = new KLabelEdit(focusedItem);
      onBeginLabelEdit();
    }
  }

  // リネームを終了
  function removeLabelEdit {
    onFinishLabelEdit();
    discard(labelEdit);
    focus(focusedItem);
  }

  function onBeginLabelEdit {
  }

  function onFinishLabelEdit {
  }

  // enabled==trueならそのまま表示
  function onNodeEnabled {
    canvas.opacity = 255;
    opacity = 255;
  } 

  // enabled=falseなら半透明で表示
  function onNodeDisabled {
    canvas.opacity = 64;
    opacity = 64;
  }

  /**------------------------------
   * 旧仕様との互換性のためのダミー関数群
   ------------------------------*/
  function seeSelection() {
    seeFocusedItem();
  }

  property selection {
    getter {
      return focusedItem;
    }
  }

  property selectionIndex {
    getter {
      return focusedItemIndex;
    }
  }
};

/**----------------------------------------------------------------------
 * リストアイテム
 ----------------------------------------------------------------------*/
class KListItem
{
  var isRoot = false;
  var _depth;
  var _opened;
  var _root;
  var parent;
  var _visible = false;
  var childList = [];
  var _labelEditable = false;
  var _minLabelWidth = 1;
  var _labelTextType = TEXT_SYMBOL;
  var name;
  var _size;
  var _icon;
  var _label;
  var _hint;
  var _status;
  // ウィジェット
  var _nameCache = %[];
  var _fontColor = 0xFFFFFFFF;
  var _fontBold = false;
  var left, top, width, height;
  var toggleWidth;
  var iconWidth;
  var labelWidth;
  var iconLayerList;
  var ownIconLayerList;
  var _selected = false;

  /**------------------------------
   * コンストラクタ
   * 
   * @param label ラベル
   * @param name 名前
   ------------------------------*/
  function KListItem(label = "", name = "") {
    _opened = false;
    this.name = name;
    _depth = -1;
    _label = label;
    _hint = "";
    _status = "";
    _icon = [];
    iconLayerList = [];
    ownIconLayerList = [];    // missing を有効にする
    Scripts.setCallMissing(this);
  }

  /*------------------------------
   * ファイナライザ
   ------------------------------*/
  function finalize {
    discardArray(childList);
    discard(layer);
    discardArray(ownIconLayerList);
  }

  
  /*------------------------------
   * 旧仕様と互換性を保つためだけのダミープロパティ
   ------------------------------*/
  property layer {
    getter {
      return %[ left: left, top: top, width: width, height: height ];
    }
  }

  /**------------------------------
   * クラスツリー
   *
   * @return 自分自身の属するクラスツリーを配列で返す
   ------------------------------*/
  property classTrees {
    getter {
      return Scripts.getClassNames(this);
    }
  }

  /**------------------------------
   * クラス名
   *
   * @return 自分自身のクラス名を返す
   ------------------------------*/
  property className {
    getter {
      return Scripts.getClassNames(this)[0];
    }
  }

  /**------------------------------
   * ラベルがリネーム可能かどうか
   * 
   * @param v リネーム可能？
   * @return リネーム可能？
   ------------------------------*/
  property labelEditable {
    getter {
      return _labelEditable;
    }
    setter(v) {
      _labelEditable = v;
      return _labelEditable;
    }
  }

  /**------------------------------
   * ラベルのテキストタイプ
   *
   * リネーム時に設定可能な テキストのタイプを
   * TEXT_ANY, TEXT_DIGIT, TEXT_SYMBOL のいずれかより設定する
   * 
   * @param v テキストタイプ
   * @return テキストタイプ
   ------------------------------*/
  property labelTextType {
    getter {
      return _labelTextType;
    }
    setter(v) {
      _labelTextType = v;
      return _labelTextType;
    }
  }

  /**------------------------------
   * ラベルの最小文字数
   *
   * リネーム時に設定可能なラベルの最小文字数を設定する
   * 
   * @param v 最小文字数
   * @return 最小文字数
   ------------------------------*/
  property minLabelWidth {
    getter {
      return _minLabelWidth;
    }
    setter(v) {
      _minLabelWidth = v;
      return _minLabelWidth;
    }
  }

  /**------------------------------
   * アイテムの縦幅
   *
   * 指定しないと、MList の fontHeight から spaceVertical から自動設定される
   *
   * @param v 縦幅
   * @return 縦幅
   ------------------------------*/
  property size {
    getter {
      if (_size == 0) {
        var r = root;
        if (r)
          _size = root.fontHeight + root.spaceVertical;
      }
      return _size;
    }
      
    setter(v) {
      _size = v;
      if (visible) {
        updateSize();
        requireRelocate();
      }
      return;
    }
  }

  /**------------------------------
   * ラベル
   * 
   * @param value ラベル
   * @return ラベル
   ------------------------------*/
  property label {
    getter {
      return _label;
    }
    setter (value) {
      if (_label == value)
        return;
      _label = value;
      if (_visible) {
        updateSize();
        requireRelocate();
      }
    }
  }

  /**------------------------------
   * フォントカラー
   * 
   * @param value カラー
   * @return カラー
   ------------------------------*/
  property fontColor {
    getter {
      return _fontColor;
    }
    setter (value) {
      if (_fontColor == value)
        return;
      _fontColor = value;
      if (_visible) {
        redraw();
      }
    }
  }

  /**------------------------------
   * フォントボールド
   * 
   * @param value ボールド
   * @return ボールド
   ------------------------------*/
  property fontBold {
    getter {
      return _fontBold;
    }
    setter (value) {
      if (_fontBold == value)
        return;
      _fontBold = value;
      if (_visible) {
        updateSize();
        requireRelocate();
      }
    }
  }

  /**------------------------------
   * ヒント
   *
   * @param value ヒント
   ------------------------------*/
  property hint {
    getter {
      return _hint;
    }
    setter(v) {
      _hint = v;
    }
  }
  
  /**------------------------------
   * ステータス
   *
   * @param value ステータス
   ------------------------------*/
  property status {
    getter {
      return _status;
    }
    setter(v) {
      _status = v;
    }
  }
  
  /**------------------------------
   * アイコン
   *
   * ラベルの前方に描画されるアイコンを設定する。
   * voidを設定するとアイコンは消去される。
   * アイコンがクリックされると onIconClick() が呼ばれる。
   *
   * @param value アイコンファイル名
   * @return アイコンファイル名
   ------------------------------*/
  property icon {
    getter {
      return _icon[0];
    }
    setter(value) {
      if (value == void)
        icons = [];
      else
        icons = [ value ];
    }
  }

  /**------------------------------
   * アイコンリスト
   *
   * ラベルの前方に描画されるアイコンを複数設定する。
   * 設定したアイコンは左から順番に並んで表示される。
   * アイコンがクリックされると onIconClick() が呼ばれる。
   * onIconClickの引数でどのアイコンが押されたかを判別できる。
   *
   * @param value アイコンファイル名配列
   * @return アイコンファイル名配列
   ------------------------------*/
  property icons {
    getter {
      return duplicateStruct(_icon);
    }
    setter(value) {
      _icon = value;
      if (! visible)
        return;
      updateIconLayerList();
      updateSize();
      requireRelocate();
    }
  }

  function updateIconLayerList() {
    discardArray(ownIconLayerList);
    iconLayerList = [];
    ownIconLayerList = [];
    
    for (var i = 0; i < _icon.count; i++) {
      var icon = _icon[i];
      var iconLayer;
      var own = false;
      if (icon instanceof "Layer") {
        iconLayer = new global.Layer(root.window, root);
        iconLayer.assignImages(icon);
        iconLayer.setSize(icon.width, icon.height);
        own = true;
      } else if (typeof(icon) == "Object") {
        iconLayer = new global.Layer(root.window, root);
        icon(iconLayer);
        own = true;
      } else {
        iconLayer = root.findIcon(icon);
      }
      iconLayerList.add(iconLayer);
      if (own)
        ownIconLayerList.add(iconLayer);
    }
  }

  property hasIcon {
    getter {
      return _icon.count > 0;
    }
  }

  /**------------------------------
   * アイコンが押された時に呼ばれるフック関数
   *
   * @param iconIndex アイコンインデックス
   ------------------------------*/
  function onIconClick(iconIndex) {
    focus();
    root.focus();
  } 

  /*------------------------------
   * depth
   ------------------------------*/
  property depth {
    setter (v) {
      _depth = v;
      if (v == -1)
        for (var i = 0; i < childList.count; i++)
          childList[i].depth = v;
    }
    getter {
      if (_depth < 0) {
        if (parent !== void)
          _depth = parent.depth + 1;
      }
      return _depth;
    }
  }

  /**------------------------------
   * 子アイテムを追加する
   *
   * @param item アイテム
   ------------------------------*/
  function add(item) {
    item.depth = -1;
    item.parent = this;
    childList.add(item);
    requireReconstruct();
  }

  /**------------------------------
   * 子アイテムを挿入する
   *
   * @param index インデックス
   * @param item アイテム
   ------------------------------*/
  function insert(index, item) {
    item.depth = -1;
    item.parent = this;
    childList.insert(index, item);
    requireReconstruct();
  }

  /**------------------------------
   * 子アイテムを削除する
   * 
   * @param item アイテム
   * @param doInvalidate invalidateするかどうか
   ------------------------------*/
  function remove(item, doInvalidate = true) {
    if (! (item isvalid))
      return void;

    if (item == root.focusedItem
        || (root.focusedItem && item.isAncestorOf(root.focusedItem))) {
      root.focusItem(void);
      var i = item.index;
      childList.remove(item);
      if (childList.count != 0) {
        if (i > childList.count - 1)
          i--;
        childList[i].select();
      }  else {
        select();
      }
    } else {
      childList.remove(item);
    }

    item._root = void;
    item.parent = void;

    if (doInvalidate)
      invalidate item;

    requireReconstruct();
  }

  /**------------------------------
   * 子アイテムを全て削除する
   *
   * @param doInvalidate 取り除いた子ウィジェットを無効化するか
   ------------------------------*/
  function removeAll(doInvalidate = true)
  {
    if (root !== void
        && root.focusedItem 
        && this.isAncestorOf(root.focusedItem)) 
      root.focusItem(void);
    while(childList.count > 0)
      {
        var child = childList[0];
        childList.remove(child);
        if(doInvalidate)
          {
            invalidate child;
          }
        else
          {
            child._root = void;
            child.parent = void;
          }
      }
    requireReconstruct();
  }

  /**------------------------------
   * 自分自身を削除する
   *
   * @param doInvalidate invalidateするかどうか
   ------------------------------*/
  function removeSelf(doInvalidate = true) {
    asyncCaller.call(parent.remove, this, doInvalidate);
  }

  /**------------------------------
   * 子持ちかどうか判定する
   *
   * @return 子持ち？
   ------------------------------*/
  property hasChild {
    getter {
      return childList.count != 0;
    }
  }

  /**------------------------------
   * 子アイテムをカウントする
   * 
   * @return 子アイテム数
   ------------------------------*/
  property childCount {
    getter {
      return childList.count;
    }
  }

  /**------------------------------
   * 子アイテムを参照する
   *
   * @param index インデックス
   * @return 子アイテム
   ------------------------------*/
  function childAt(index) {
    return childList[index];
  }

  /**------------------------------
   * 子孫アイテムから特定の名前を持った子ウィジェットを捜す
   * 
   * @param name 名前
   ------------------------------*/
  function find(name) {
    if (this.name === name)
      return this;
    for (var i = 0; i < childList.count; i++) {
      var child = childList[i];
      var widget = child.find(name);
      if (widget)
        return widget;
    }
    return void;
  }

  /**------------------------------
   * 子孫アイテムから特定の名前を持った子ウィジェットを捜します
   *
   * find関数を経由せずに、オブジェクトのプロパティ扱いで名前を指定して
   * 子孫アイテム中のウィジェットを参照することが出来ます。
   *
   * パフォーマンスの都合で、グローバルに同名のシンボルが存在する場合は
   * 優先的にそちらを見に行くという挙動をするので注意。
   ------------------------------*/
  function missing(get_or_set, name, value) {
    if (! get_or_set) {
      if (typeof(global[name]) != "undefined")
        return false;
      if (typeof(_nameCache[name]) != "undefined") {
        var widget = _nameCache[name];
        if (widget isvalid
            && widget.name == name) {
          *value = widget;
          return true;
        } else {
          delete _nameCache[name];
        }
      }
      var widget = find(name);
      if (widget) {
        _nameCache[name] = widget;
        *value = widget;
        return true;
      }
    }
    return false;
  }

  /**------------------------------
   * 自分自身のインデックス
   * 
   * リストの何番目にいるか。
   *
   * @param value インデックス
   * @return インデックス
   ------------------------------*/
  property index {
    getter {
      return parent.childList.find(this);
    }

    setter(value) {
      var curIndex = index;
      if (curIndex == value)
        return;
      parent.childList.erase(curIndex);
      parent.childList.insert(value, this);
      requireReconstruct();
    }
  }

  /**------------------------------
   * アイテムを「フォーカス」状態にする
   ------------------------------*/
  function focus {
    root.focusItem(this);
    root.seeFocusedItem();
  }

  /**------------------------------
   * フォーカスされているか？
   * @return フォーカスされているか？
   ------------------------------*/
  property focused {
    getter {
      return root !== void
        && root.focusedItem === this;
    }
  }

  /**------------------------------
   * アイテムがフォーカス状態になった時に呼ばれるフック関数
   * デフォルト動作では、旧仕様互換のため、onSelect() を呼ぶ。
   ------------------------------*/
  function onFocus {
    onSelect();
  }

  /**------------------------------
   * アイテムが非フォーカス状態になった時に呼ばれるフック関数
   * デフォルト動作では、旧仕様互換のため、onDeselect() を呼ぶ。
   ------------------------------*/
  function onBlur {
    onDeselect();
  }

  /**------------------------------
   * (自分を含む)子孫アイテムがフォーカス状態になった時に呼ばれるフック関数
   * デフォルト動作では、旧仕様互換のため、onDesecndantFocus() を呼ぶ。
   ------------------------------*/
  function onDescendantFocus {
    onDescendantSelect();
  }

  /**------------------------------
   * (自分を含む)子孫アイテムがフォーカス状態になった時に呼ばれるフック関数
   * デフォルト動作では、旧仕様互換のため、onDesecndantBlur() を呼ぶ。
   ------------------------------*/
  function onDescendantBlur {
    onDescendantDeselect();
  }

  /**------------------------------
   * 子持ちの時のトグル状態を変更する
   *
   * @param o 開閉
   * @return 開閉
   ------------------------------*/
  property opened {
    getter {
      return _opened;
    }
    setter(o) {
      if (_opened == o)
        return;
      _opened = o;
      requireReconstruct();
    }
  }

  /**------------------------------
   * 子孫アイテムをまとめて開く
   *------------------------------*/
  function openDescendants {
    var i, desc = descendants;

    for (i = 0; i < desc.count; i++) {
      if (desc[i].hasChild) {
        desc[i].opened = true;
      }
    }
  }

  /**------------------------------
   * ユーザーに値を入力させてラベルをリネームする
   * (F2を押した時と同様の動作)
   *------------------------------*/
  function renameAsUserInput {
    focus();
    root.renameFocusedItem();
  }    

  /**------------------------------
   * ラベルをリネームする
   * 
   * 引数 labelを指定すると、ラベル変更後に onRename 関数が呼ばれる。
   * (ラベル変更後にフックをかける仕組)
   * 
   * @param label リネームするラベル
   ------------------------------*/
  function rename(label) {
    var oldLabel = this.label;
    this.label = label;
    this.onRename(oldLabel, label);
  }

  /**------------------------------
   * ラベルにリネーム許可を与えるか判定する
   *
   * renameAsUserInput を使ったリネーム時に、
   * 指定された名前を受け入れていいかどうかを判定する
   * ユーザー定義関数。
   * デフォルトの実装では常にtrueを返す
   *
   * @param label 判定するラベル
   * @return 受け入れるならtrueを、拒否するならfalseを返す。
   ------------------------------*/
  function isAcceptRename(label) {
    return true;
  }

  /**------------------------------
   * リネーム時に呼ばれるフック関数
   * 
   * @param oldLabl 旧ラベル
   * @param newLabel 新ラベル
   ------------------------------*/
  function onRename(oldLabel, newLabel)
  {
  }

  /*------------------------------
   * 各種ウィジェットイベントフック関数。
   * 引数の詳細は KWidgetを参照されたし
   ------------------------------*/
  // キーダウン
  function onKeyDown(key, shift) {
    root.onKeyDownSuper(...);
  }

  // マウスダウン
  function onMouseDown(x, y, button, shift) {
    if (button == mbLeft
        && hasChild
        && inToggle(x, y)) {
      if (! opened
          && (shift & ssCtrl))
        openDescendants();
      opened = ! opened;
      return;
    }
    if (button == mbLeft
        && hasIcon
        && inIcon(x, y)) {
      onIconClick(iconIndexAt(x));
      return;
    }
    if (button == mbLeft) {
      onClick(x, y, shift);
    }
    if (button == mbRight) {
      onRightClick(x, y, shift);
    }
  }
  
  // マウスムーブ
  function onMouseMove(x, y, button, shift) {
  }

  // マウスアップ
  function onMouseUp(x, y, button, shift) {
  }

  // マウスエンター
  function onMouseEnter() {
  }

  // マウスリーブ
  function onMouseLeave() {
  }

  // 右クリック
  function onRightClick(x, y, shift) {
  }

  // 左クリック
  function onClick(x, y) {
  }

  // ドラッグエンター
  function onDragEnter(x, y, shift) {
  }

  // ドラッグムーブ
  function onDragMove(x, y, shift) {
  }

  // ドラッグリーブ
  function onDragLeave(x, y, shift) {
  }

  // パケットのドラッグ開始
  function beginDragPacket(packet) {
    root.beginDragPacket(packet);
  }

  // パケットの受け入れ判定
  function isPacketAcceptable(packet) {
    return false;
  }

  // パケット侵入
  function onPacketEnter(x, y, packet, shift) {
    // 背景色を変更
  }

  // パケットムーブ
  function onPacketMove(x, y, packet, shift) {
  }

  // パケット離脱
  function onPacketLeave(x, y, packet, shift) {
  }

  // パケットドロップ
  function onPacketDrop(x, y, packet, shift) {
  }

  // パケットキャンセル
  function onPacketCancel(packet) {
  }

  /*------------------------------
   * フック関数ここまで
   ------------------------------*/

  // アイテムの可視
  property visible {
    getter {
      return _visible;
    }

    setter (v) {
      if (_visible == v)
        return;
      _visible = v;
      if (_visible) {
        updateIconLayerList();
        updateSize();
      }
    }
  }

  // トグルの表示に要する幅
  // 位置設定
  function locate(x, y) {
    left = x;
    top = y;
  }

  function updateSize() {
    height = 0;
    toggleWidth = root.findIcon("k_list_open").width + 4;;
    height = Math.max(height, root.findIcon("k_list_open").height);
    iconWidth = 4;
    for (var i = 0; i < iconLayerList.count; i++) {
      iconWidth += iconLayerList[i].width;
      height = Math.max(iconLayerList[i].height);
    }
    root.font.bold = _fontBold;
    labelWidth = root.font.getTextWidth(label);
    width = toggleWidth + iconWidth + labelWidth;
    height = Math.max(height, size);
  }

  function inToggle(x, y) {
    x -= left;
    return x >= 0 && x < toggleWidth;
  }

  function inIcon(x, y) {
    x -= left;
    return x >= toggleWidth && x < toggleWidth + iconWidth;
  }

  function inLabel(x, y) {
    x -= left;
    return x >= toggleWidth + iconWidth && x < width;
  }

  // アイコンインデックスを特定
  function iconIndexAt(x) {
    x -= left;
    x -= toggleWidth + 2;
    var i;
    for (i = 0; i < iconLayerList.count - 1; i++)
      if (x < iconLayerList[i].width)
        return i;
      else
        x -= iconLayerList[i].width;
    return i;
  }

  function onDoubleClick(x, y) {
    if (! inToggle(x, y)
        && hasChild)
      opened = ! opened;
  }
  
  // 祖先アイテム一覧
  property ancestors {
    getter {
      var a, item;

      a = [];
      
      for (item = this.parent; item && ! item.isRoot; item = item.parent)
        a.add(item);

      return a;
    }
  }

  // 祖先であるかどうか判定
  function isAncestorOf(item) {
    for (; ! item.isRoot; item = item.parent) {
      if (item == this)
        return true;
    }
    return false;
  }

  // 子孫であるかどうか判定
  function isDescendantOf(item) {
    return item.isAncestorOf(this);
  }

  // 子孫アイテム一覧
  property descendants {
    getter {
      var i, num, child, item;
      var stack = [];
      i = 0;
      var retval = [];
      item = this;
      num = item.childList.count;
      if (num == 0)
        return [];
      for (;;) {
        child = item.childList[i];
        retval.add(child);
        if (child.hasChild) {
          if (i + 1 < num)
            stack.add([ item, i + 1, num ]);
          item = child;
          i = 0;
          num = item.childList.count;
          continue;
        }
        if (++i < num)
          continue;
        if (stack.count == 0)
          break;
        var a = stack[stack.count - 1];
        stack.erase(stack.count - 1);
        item = a[0];
        i = a[1];
        num = a[2];
      }
      return retval;
    }
  }

  // ルートアイテムを参照する
  property root {
    getter {
      if (_root === void
          && parent !== void)
        _root = parent.root;
      return _root;
    }
  }

  // windowを参照する
  property window {
    getter {
      return root.window;
    }
  }

  // 再配置を要求
  function requireRelocate {
    if (root) {
      root.requireRelocate();
    }
  }

  // 再構築を要求
  function requireReconstruct {
    if (root) {
      root.requireReconstruct();
    }
  }

  // アイコンレイヤ
  function iconLayerAt(index) {
    var layer = _icon[index];
    if (layer instanceof "Layer")
      return layer;
    else
      return root.icon(layer);
  }

  function redraw() {
    if (visible)
      root.onDraw(0, top, root.width, size);
  }

  function onDraw {
    var root = this.root;
    root.font.bold = _fontBold;
    root.drawText(left + toggleWidth + iconWidth, top + root.spaceVertical / 2, label, fontColor,
                  255, true, 2048, WIN_WHITE, 2.5);
    
    if (childCount) {
      var toggle = root.findIcon(opened ? "k_list_open" : "k_list_close");
      root.blendRect(left + 2, top + (size - toggle.height) / 2,
                     toggle,
                     0, 0, 
                     toggle.width, toggle.height);
    }
    if (_icon.count) {
      var x = left + toggleWidth + 2;
      for (var i = 0; i < _icon.count; i++) {
        var iconLayer = iconLayerList[i];
        root.blendRect(x, top + (size - iconLayer.height) / 2, iconLayer, 0, 0, iconLayer.width, iconLayer.height);
        x += iconLayer.width;
      }
    }
  }

  // ラベル矩形
  property labelRect {
    getter {
      return %[ left:(toggleWidth + iconWidth), top:0, 
                width:width - (toggleWidth + iconWidth), height:size];
    }
  }

  /**------------------------------
   * 「値」が変わった時に呼ばれるフック関数
   *
   * 「値」を持つウィジェットで、値が変更された時に呼ばれます。
   * デフォルトでは、parent の onChildValueModifiedを呼ぶように設定されています。
   *
   * @param newValue 新規の値
   * @param oldValue 変更前の値
   ------------------------------*/
  function onValueModified(newValue, oldValue) {
    if (parent !== void)
      parent.onChildValueModified(this, newValue, oldValue);
  }

  /**------------------------------
   * 子ウィジェットの「値」が変わった時に呼ばれるフック関数
   *
   * 子ウィジェットの「値」値が変更された時に呼ばれます。
   * デフォルトでは、さらに parent の onChildValueModifiedを呼ぶように設定されています。
   * どこかのウィジェットが関数をオーバーライドして処理を行わない限り、
   * 値変更の通知は KWindow まで届きます。
   *
   * @param newValue 新規の値
   * @param oldValue 変更前の値
   ------------------------------*/
  function onChildValueModified(child, newValue, oldValue) {
    if (parent !== void)
      parent.onChildValueModified(...);
  }

  /**------------------------------
   * 旧仕様との互換性のためのダミー関数群
   ------------------------------*/
  function select {
    focus();
  }

  function onSelect() {
  }

  function onDeselect() {
  }
  
  function onDescendantSelect() {
  }

  function onDescendantDeselect() {
  }

  property selected {
    getter {
      return focused;
    }
    setter (v) {
      focused = v;
    }
  }
};

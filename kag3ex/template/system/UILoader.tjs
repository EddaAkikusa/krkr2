//
// UI ロード処理用専用クラス
//

// csv パーサプラグインの読み込み
if (global.CSVParser === void) {
    Plugins.link("csvParser.dll");
}

var buttonStateNames = %[ normal:true, over:true, on:true, off:true ];

/**
 * UI定義ファイル読み出し用パーサ
 */
class UIListParser extends CSVParser {

    // パース結果格納用
    var result;
    var names;
	var evals;
    var check;

    /**
     * 行毎に呼び出される
     * @param columns カラムデータ(Array)
     * @param lineNo 論理行番号(1〜)
     */
    function doLine(_columns, lineNo) {
		if (isComment(_columns)) return;
		var columns = [];
		for (var i = 0; i < _columns.count; i++) columns[i] = _columns[i].trim();

		var type = columns[0];
		var name = columns[1];
		if (type == "eval") {
			check = true;
			doEvals(name, columns, _columns);
			return;
		}
		var info = result[name];
		if (info === void) {
			info = %[];
			info.name = name;
			info.uiname = name;
			info.uistates = %[];
			names.add(name);
			result[name] = info;
		}
		var knownType = true;
		switch (type) {
		case "type": doType(info, columns); break;
		case "file": doFile(info, columns); break;
		case "func": doFunc(info, columns); break;
		case "part": doPart(info, columns); break;
		case "copy": doCopy(info, columns); break;
		default: knownType = false; break;
		}
		check = true if (knownType);
	}
	// コメント行かどうか
	function isComment(columns) {
		return (columns              === void ||
				columns.count        === 0    ||
				columns[0].charAt(0) === '#');
	}

	// 種類指定
	function doType(info, columns) {
		info.class  = columns[2];
		info.x      = +columns[3];
		info.y      = +columns[4];
		info.width  = +columns[5];
		info.height = +columns[6];
	}

	// elm変更用コピー指定(.func用)
	function doCopy(info, columns) {
		info.class  = "copy";
		info.copy   = columns[2];
		info.subref = columns[3];
	}

	// state 保存
	function setState(stateName, info, columns) {
		if (info.class == "layer") {
			stateName = (string)null if (stateName == "");
			info.layer = stateName;
		}
		if (stateName == "") return false;
		var state = info.uistates[stateName];
		if (state === void) {
			state = %[];
			info.uistates[stateName] = state;
		}
		with (state) {
			.storage = columns[2];
			.ox = +columns[3];
			.oy = +columns[4];
			.w  = +columns[5];
			.h  = +columns[6];
		}
		return true;
	}

	// ファイル指定
	function doFile(info, columns) {
		switch (info.class) {
		case "copy":
			info.copy   = columns[7];
			info.subref = columns[8];
			break;
		case "base":
			info.storage  = columns[2] if (!setState(columns[7], info, columns));
			break;
		default:
			var stateName = columns[7];
			for (var i=8;i<columns.count;i++) {
				var state = columns[i];
				if (buttonStateNames[state] !== void) {
					stateName += "_";
					stateName += state;
				} else {
					if (info.class == "radio") {
						if (state != "") {
							info.groupName = state;
						}
					}
				}
			}
			setState(stateName, info, columns);
			break;
		}
	}

	// func (elm) 指定
	function doFunc(info, columns) {
		for (var i=2; i<columns.count; i+=2) {
			var tag = columns[i];
			var val = columns[i+1];
			val = true if (val === void);
			if (tag !==void && tag.length > 0) {
				try {
					info[tag] = val;
				} catch(e) {
					dm("指定された処理は評価できません:" + val);
				}
			}
		}
	}

	// パート指定
	function doPart(info, columns) {
		if (     info.class === void)   info.class = "part";
		else if (info.class !== "part") kag.error("part名に実体が存在します:" + info.name);
		info.part = [] if (info.part === void);
		var part = info.part;
		for (var i=2; i<columns.count; i++) part.add(columns[i]);
	}

	// eval 指定
	function doEvals(name, c1, c2) {
		var tag = c1[2];
		var sel = (tag == "exp") ? c2 : c1;
		sel.erase(0);
		sel.erase(0);
		sel[0] = tag;
		evals[name] = [] if (evals[name] === void);
		evals[name].add(sel);
	}

	function parseStorage(filename,utf8=false) {
		check = false;
		super.parseStorage(...);
		if (check) return result;

//		dm("reload: " + filename);
		// １行も読まれなかったらとりあえずエンコードを変えて読み直し
		super.parseStorage(filename, !utf8);
		if (check) return result;

//		dm("arrayload: " + filename);
		// それでもダメだったらArrayで読み直す
		var temp = [];
		var sep = (Storages.extractStorageExt(filename).toLowerCase() == ".txt") ? "\t" : ",";
		temp.load(filename);
		for (var i = 0; i < temp.count; i++) {
			var line = [];
			line.split(sep, temp[i]);
			doLine(line, i+1) if (line.count > 0);
		}
		return result;
	}

    function UIListParser() {
        super.CSVParser(...);
        clear();
    }

    function clear() {
        result = %[];
        names = [];
		evals = %[];
    }
};

function uiloadParse(elm)
{
    var separator = #',';
    var baseName = elm.storage;
    
    if (!Storages.isExistentStorage(baseName)) {
        if (Storages.isExistentStorage(baseName + ".csv")) {
            baseName += ".csv";
        } else if (Storages.isExistentStorage(baseName + ".txt")) {
            baseName += ".txt";
            separator = #'\t';
        } else {
            kag.errorImage("UI定義ファイルが見つかりません:" + baseName);
            return;
        }
    }
    var parser = new UIListParser(null, separator);

    parser.parseStorage(baseName);
    var funcName = (elm.func !== void) ? elm.func : Storages.chopStorageExt(baseName) + ".func";
    if (!Storages.isExistentStorage(funcName)) {
        if (Storages.isExistentStorage(funcName + ".func")) {
            funcName += ".func";
        }
    }
    if (Storages.isExistentStorage(funcName)) {
        parser.parseStorage(funcName);
    }

	return %[names: parser.names, result:parser.result, evals: parser.evals];
}

function uiloadCopyElement(dic, elm, name)
{
	var target, ret;
	try { ret = target = dic[name]; } catch {}
	if (target === void) {
		kag.error("コピー対象がありません:" + name);
		return;
	}
	if (target.class == "copy") {
		ret = uiloadCopyElement(dic, elm, target.copy);
		if (ret === void) return;
	}
	(global.Dictionary.assign incontextof elm)(target, false);
	return ret;
}

// part中にサブpartを含む場合は展開する
function uiloadPartExtract(dic, part)
{
	var result = [], append = [];
	result.assign(part);
	for (var i = 0; i < part.count; i++) {
		var item = dic[part[i]];
		if (item !== void && item.class == "part") {
			result.remove(part[i], true);
			append.add(uiloadPartExtract(dic, item.part));
		}
	}
	for (var i = 0; i < append.count; i++) {
		var subpart = append[i];
		for (var j = 0; j < subpart.count; j++)
			result.add(subpart[j]);
	}
	return result;
}

function uiloadEntry(layer, names, dic, elm, table, evals)
{
	// elm 加工フック
	uiloadEvals(elm, evals.pre, dic) if (evals !== void);

	// part除外処理
	var pr = (typeof elm.partremove === "String");
	var pe = (typeof elm.partexcept === "String");
	if (pr || pe) {
		var temp = [];
		temp.assign(names);

		// 指定part削除動作
		var parts = [];
		parts.split(",",elm.partremove,,true) if pr;
		for (var i = 0; i < parts.count; i++) {
			var part = dic[parts[i].trim()];
			if (part === void) dm("partが見つかりません:" + parts[i]);
			else if (part.class == "part") {
				part = uiloadPartExtract(dic, part.part);
				for (var j = 0; j < part.count; j++) temp.remove(part[j], true);
			} else                                   temp.remove(part.name, true);
		}

		// 指定part以外削除動作
		parts.clear();
		parts.split(",",elm.partexcept,,true) if pe;
		for (var i = 0; i < parts.count; i++) {
			var part = dic[parts[i].trim()];
			if (part === void) dm("partが見つかりません:" + parts[i]);
			else if (part.class == "part") {
				part = uiloadPartExtract(dic, part.part);
				for (var j = 0; j < temp.count; j++) if (part.find(temp[j]) < 0) temp[j] = void;
				temp.remove(void, true);
			} else {
				var hasPart = (temp.find(part.name) >= 0);
				temp.clear();
				temp.add(part.name) if hasPart;
			}
		}

		// 結果差し替え
		names = temp;
	}

	// names加工フック
	uiloadEvals(names, evals.names, dic) if (evals !== void);

	var basex = 0, basey = 0;
	var links = layer.numLinks;

	// 背景だけ特殊処理
	var base;
	for (var i=0; i<names.count; i++) {
		var value = dic[names[i]];
		if (value !== void && value.class == "base") {
			base = names[i];
			uiloadEvals(elm, evals.elm, dic, base) if (evals !== void);

			var value = dic[base];
			table[value.class](layer, base, value, elm);
			basex = value.x;
			basey = value.y;
			break;
		}
	}
	// 背景がなかったときの処理
	if (base === void) {
		uiloadEvals(elm, evals.elm, dic, base) if (evals !== void);
		table.base(layer, base, %[ x:0, y:0, width:layer.parent.width, height:layer.parent.height ], elm);
	}

	for (var i=0; i<names.count; i++) {
		var name  = names[i];
		var value = dic[name];
		if (value !== void) {
			switch (value.class) {
			case void:
				kag.error("クラスが指定されていません:" + name);
				break;
			case "base":
			case "part":
				break;
			case "copy":
				/*
				var target;
				try { target = dic[value.copy]; } catch {}
				if (target === void) {
					kag.error("コピー対象がありません:" + name);
					break;
				}
				var temp = %[];
				(global.Dictionary.assign incontextof temp)(target, true);
				(global.Dictionary.assign incontextof temp)(value,  false);
				 */
				var temp = %[];
				var target = uiloadCopyElement(dic, temp, value.copy);
				if (target === void) break;
				(global.Dictionary.assign incontextof temp)(value,  false);
				/**/
				temp.class = target.class;
				temp.groupName = value.subref if (temp.class == "radio" && value.subref !== void);
				temp.uistates = target.uistates;
				value = temp;
				/* not break */
			default:
				var func = table[value.class];
				if (func !== void) {
					value.x -= basex;
					value.y -= basey;
					var target = func(layer, name, value, elm);
					if (evals !== void && target !== void)
						uiloadEvals(target, evals[value.name], dic, base);
				}
				break;
			}
		}
	}

	// 優先順位逆転
	var max = layer.numLinks;
	for (var i = links; i < max; i++) {
		layer.links[i].object.order = max - i;
	}

	uiloadEvals(layer, evals.base, dic, base) if (evals !== void);
}

function uiloadGetRect(tag, result) {
	if (tag.indexOf(".") < 0)
		with (result[tag]) return %[x:.x, y:.y, w:.width, h:.height, ox:0, oy:0];
	var div = tag.split(".");
	var p = result[div[0]];
	var s = p.uistates[div[1]];
	return %[x:p.x + s.ox, y:p.y + s.oy, w:s.w, h:s.h, ox:s.ox, oy:s.oy];
}
function uiloadSetRect(target, rect, brect, x, y, w, h) {
	with (rect) {
		if (brect !== void) {
			.x -= brect.x;
			.y -= brect.y;
		}
		target[x] = .x;
		target[y] = .y;
		if (w !== void) {
			target[w] = .w;
			target[h] = .h;
		}
	}
}

function uiloadEvals(target, evals, result, base) {
	if (evals == void) return;
	var brect;
	if (base !== void) brect = uiloadGetRect(base, result);
	for (var i = 0; i < evals.count; i++) {
		var cur = evals[i];
		switch (cur[0]) {
		case "pos":   uiloadSetRect(target, uiloadGetRect(cur[1], result), brect, cur[2], cur[3]); break;
		case "rect":  uiloadSetRect(target, uiloadGetRect(cur[1], result), brect, cur[2], cur[3], cur[4], cur[5]); break;
		case "name":  uiloadSetRect(target, uiloadGetRect(cur[1], result), brect, "nameleft", "nametop", "namewidth", "nameheight"); break;
		case "face":  uiloadSetRect(target, uiloadGetRect(cur[1], result), brect, "faceleft", "facetop", "facewidth", "faceheight"); break;
		case "glyph": uiloadSetRect(target, uiloadGetRect(cur[1], result), brect, "glyphFixedLeft", "glyphFixedTop", "glyphFixedWidth", "glyphFixedHeight"); break;
		case "margin": // pos,ref
			var rect = uiloadGetRect(cur[1], result);
			rect.w = brect.w - (rect.x + rect.w);
			rect.h = brect.h - (rect.y + rect.h);
			if (typeof target.marginL !== "undefined") 
				uiloadSetRect(target, rect, brect, "marginL", "marginT", "marginR", "marginB");
			else 
				uiloadSetRect(target, rect, brect, "marginl", "margint", "marginr", "marginb");
			break;
		case "prop":
			for (var j = 1; j < cur.count-2; j+=3)
				target[cur[j]] = Scripts.eval("("+cur[j+1]+")"+cur[j+2]);
			break;
		case "exp":
			cur.erase(0);
			(function(e) { e!; } incontextof target)(cur.join(","));
			break;
		case "call":
			var f = Scripts.eval('function() { return "' + cur[1] + '"!; }');
			var r = (f incontextof target)();
			if (typeof r == "Object" && r instanceof "Function") {
				cur.erase(0);
				cur.erase(0);
				r(target, result, cur*);
			}
			break;
		}
	}
}


function uiloadWithFuncTable(layer, elm, funcTable) {
	var parse = uiloadParse(elm);
	if (parse === void) return %[];
	with (parse) uiloadEntry(layer, .names, .result, elm, funcTable, .evals);
	return parse.result;
}


function uiEntryBase(layer, name, value, elm) {
    var e = %[];
    (global.Dictionary.assign incontextof e)(elm,false); 
    e.left   = value.x;
    e.top    = value.y;
    e.width  = value.width;
    e.height = value.height;
    e.frame  = value.storage;
    e.margint = 0 if e.margint === void;
    e.marginl = 0 if e.marginl === void;
    e.marginr = 0 if e.marginr === void;
    e.marginb = 0 if e.marginb === void;
    e.transparent = false if e.transparent === void;
    e.visible = true if e.visible === void;
    layer.setPosition(e);
}
function uiEntryButton(layer, name, value) {
	layer.locate(value.x, value.y);
	layer.addButton(value);
	return layer.names[value.name];
}
function uiEntrySlider(layer, name, value) {
	layer.locate(value.x, value.y);
	layer.addSlider(value);
	return layer.names[value.name];
}
function uiSetLayerOption(target) {
	with (target) {
		.setImageSize(.width, .height); // ボタン分を使わないのでサイズを縮める
		.enabled = .focusable = false;
	}
	return target;
}
function uiAddLayer(layer, method, value) {
	with (value) {
		var s = .uistates;
		.uistates = %[ normal: s[value.layer] ];
		layer[method](value);
		.uistates = s;
	}
}
function uiEntryLayer(layer, name, value) {
	layer.locate(value.x, value.y);
	uiAddLayer(layer, "addButton", value);
	return uiSetLayerOption(layer.names[value.name]);
}


var uiEntryFuncs = %[
base:   uiEntryBase,
button: uiEntryButton,
toggle: uiEntryButton,
radio:  uiEntryButton,
slider: uiEntrySlider,
layer:  uiEntryLayer,
];

/**
 * UIのロード処理
 * @param layer レイヤ名
 * @param ロードする定義ファイル
 */
function uiload(layer, elm)
{
	return uiloadWithFuncTable(layer, elm, uiEntryFuncs);
}

function uiEntrySystemButton(layer, name, value) {
	layer.addSystemButton(value);
	return layer.buttons[value.name];
}
function uiEntrySystemLayer(layer, name, value) {
	uiAddLayer(layer, "addSystemButton", value);
	return uiSetLayerOption(layer.buttons[value.name]);
}
var uiEntrySystemFuncs = %[
base:   uiEntryBase,
button: uiEntrySystemButton,
toggle: uiEntrySystemButton,
radio:  uiEntrySystemButton,
layer:  uiEntrySystemLayer,
];
/**
 * UIのロード処理
 * @param layer レイヤ名
 * @param ロードする定義ファイル
 */
function uiloadSystem(layer, elm)
{
	return uiloadWithFuncTable(layer, elm, uiEntrySystemFuncs);
}
